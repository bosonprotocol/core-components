/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace ForwardRequestTypesV2 {
  export type ERC20ForwardRequestStruct = {
    from: string;
    to: string;
    token: string;
    txGas: BigNumberish;
    tokenGasPrice: BigNumberish;
    batchId: BigNumberish;
    batchNonce: BigNumberish;
    deadline: BigNumberish;
    data: BytesLike;
  };

  export type ERC20ForwardRequestStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    from: string;
    to: string;
    token: string;
    txGas: BigNumber;
    tokenGasPrice: BigNumber;
    batchId: BigNumber;
    batchNonce: BigNumber;
    deadline: BigNumber;
    data: string;
  };

  export type CustomForwardRequestStruct = {
    warning: string;
    info: string;
    action: string;
    request: ForwardRequestTypesV2.ERC20ForwardRequestStruct;
  };

  export type CustomForwardRequestStructOutput = [
    string,
    string,
    string,
    ForwardRequestTypesV2.ERC20ForwardRequestStructOutput
  ] & {
    warning: string;
    info: string;
    action: string;
    request: ForwardRequestTypesV2.ERC20ForwardRequestStructOutput;
  };
}

export interface BiconomyForwarderInterface extends utils.Interface {
  contractName: "BiconomyForwarder";
  functions: {
    "CUSTOM_FORWARD_REQUEST_TYPEHASH()": FunctionFragment;
    "EIP712_DOMAIN_TYPE()": FunctionFragment;
    "FORWARD_REQUEST_TYPEHASH()": FunctionFragment;
    "REQUEST_TYPEHASH()": FunctionFragment;
    "domains(bytes32)": FunctionFragment;
    "executeEIP712((address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes32,bytes)": FunctionFragment;
    "executeEIP712Custom((string,string,string,(address,address,address,uint256,uint256,uint256,uint256,uint256,bytes)),bytes32,bytes)": FunctionFragment;
    "executePersonalSign((address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes)": FunctionFragment;
    "getNonce(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "registerDomainSeparator(string,string)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "verifyEIP712((address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes32,bytes)": FunctionFragment;
    "verifyPersonalSign((address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CUSTOM_FORWARD_REQUEST_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EIP712_DOMAIN_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FORWARD_REQUEST_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REQUEST_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "domains", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "executeEIP712",
    values: [
      ForwardRequestTypesV2.ERC20ForwardRequestStruct,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeEIP712Custom",
    values: [
      ForwardRequestTypesV2.CustomForwardRequestStruct,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executePersonalSign",
    values: [ForwardRequestTypesV2.ERC20ForwardRequestStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerDomainSeparator",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyEIP712",
    values: [
      ForwardRequestTypesV2.ERC20ForwardRequestStruct,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyPersonalSign",
    values: [ForwardRequestTypesV2.ERC20ForwardRequestStruct, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "CUSTOM_FORWARD_REQUEST_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EIP712_DOMAIN_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FORWARD_REQUEST_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REQUEST_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "domains", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeEIP712",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeEIP712Custom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executePersonalSign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerDomainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyEIP712",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyPersonalSign",
    data: BytesLike
  ): Result;

  events: {
    "DomainRegistered(bytes32,bytes)": EventFragment;
    "MetaTransactionExecuted(address,address,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DomainRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type DomainRegisteredEvent = TypedEvent<
  [string, string],
  { domainSeparator: string; domainValue: string }
>;

export type DomainRegisteredEventFilter =
  TypedEventFilter<DomainRegisteredEvent>;

export type MetaTransactionExecutedEvent = TypedEvent<
  [string, string, string],
  { userAddress: string; relayerAddress: string; functionSignature: string }
>;

export type MetaTransactionExecutedEventFilter =
  TypedEventFilter<MetaTransactionExecutedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface BiconomyForwarder extends BaseContract {
  contractName: "BiconomyForwarder";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BiconomyForwarderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CUSTOM_FORWARD_REQUEST_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<[string]>;

    EIP712_DOMAIN_TYPE(overrides?: CallOverrides): Promise<[string]>;

    FORWARD_REQUEST_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    REQUEST_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    domains(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    executeEIP712(
      req: ForwardRequestTypesV2.ERC20ForwardRequestStruct,
      domainSeparator: BytesLike,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeEIP712Custom(
      req: ForwardRequestTypesV2.CustomForwardRequestStruct,
      domainSeparator: BytesLike,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executePersonalSign(
      req: ForwardRequestTypesV2.ERC20ForwardRequestStruct,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNonce(
      from: string,
      batchId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registerDomainSeparator(
      name: string,
      version: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyEIP712(
      req: ForwardRequestTypesV2.ERC20ForwardRequestStruct,
      domainSeparator: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    verifyPersonalSign(
      req: ForwardRequestTypesV2.ERC20ForwardRequestStruct,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  CUSTOM_FORWARD_REQUEST_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  EIP712_DOMAIN_TYPE(overrides?: CallOverrides): Promise<string>;

  FORWARD_REQUEST_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  REQUEST_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  domains(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  executeEIP712(
    req: ForwardRequestTypesV2.ERC20ForwardRequestStruct,
    domainSeparator: BytesLike,
    sig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeEIP712Custom(
    req: ForwardRequestTypesV2.CustomForwardRequestStruct,
    domainSeparator: BytesLike,
    sig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executePersonalSign(
    req: ForwardRequestTypesV2.ERC20ForwardRequestStruct,
    sig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNonce(
    from: string,
    batchId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  registerDomainSeparator(
    name: string,
    version: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyEIP712(
    req: ForwardRequestTypesV2.ERC20ForwardRequestStruct,
    domainSeparator: BytesLike,
    sig: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  verifyPersonalSign(
    req: ForwardRequestTypesV2.ERC20ForwardRequestStruct,
    sig: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    CUSTOM_FORWARD_REQUEST_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    EIP712_DOMAIN_TYPE(overrides?: CallOverrides): Promise<string>;

    FORWARD_REQUEST_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    REQUEST_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    domains(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    executeEIP712(
      req: ForwardRequestTypesV2.ERC20ForwardRequestStruct,
      domainSeparator: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; ret: string }>;

    executeEIP712Custom(
      req: ForwardRequestTypesV2.CustomForwardRequestStruct,
      domainSeparator: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; ret: string }>;

    executePersonalSign(
      req: ForwardRequestTypesV2.ERC20ForwardRequestStruct,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; ret: string }>;

    getNonce(
      from: string,
      batchId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    registerDomainSeparator(
      name: string,
      version: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyEIP712(
      req: ForwardRequestTypesV2.ERC20ForwardRequestStruct,
      domainSeparator: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyPersonalSign(
      req: ForwardRequestTypesV2.ERC20ForwardRequestStruct,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DomainRegistered(bytes32,bytes)"(
      domainSeparator?: BytesLike | null,
      domainValue?: null
    ): DomainRegisteredEventFilter;
    DomainRegistered(
      domainSeparator?: BytesLike | null,
      domainValue?: null
    ): DomainRegisteredEventFilter;

    "MetaTransactionExecuted(address,address,bytes)"(
      userAddress?: string | null,
      relayerAddress?: string | null,
      functionSignature?: BytesLike | null
    ): MetaTransactionExecutedEventFilter;
    MetaTransactionExecuted(
      userAddress?: string | null,
      relayerAddress?: string | null,
      functionSignature?: BytesLike | null
    ): MetaTransactionExecutedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    CUSTOM_FORWARD_REQUEST_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    EIP712_DOMAIN_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    FORWARD_REQUEST_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    REQUEST_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    domains(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    executeEIP712(
      req: ForwardRequestTypesV2.ERC20ForwardRequestStruct,
      domainSeparator: BytesLike,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeEIP712Custom(
      req: ForwardRequestTypesV2.CustomForwardRequestStruct,
      domainSeparator: BytesLike,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executePersonalSign(
      req: ForwardRequestTypesV2.ERC20ForwardRequestStruct,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNonce(
      from: string,
      batchId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registerDomainSeparator(
      name: string,
      version: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyEIP712(
      req: ForwardRequestTypesV2.ERC20ForwardRequestStruct,
      domainSeparator: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyPersonalSign(
      req: ForwardRequestTypesV2.ERC20ForwardRequestStruct,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CUSTOM_FORWARD_REQUEST_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EIP712_DOMAIN_TYPE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FORWARD_REQUEST_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REQUEST_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    domains(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeEIP712(
      req: ForwardRequestTypesV2.ERC20ForwardRequestStruct,
      domainSeparator: BytesLike,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeEIP712Custom(
      req: ForwardRequestTypesV2.CustomForwardRequestStruct,
      domainSeparator: BytesLike,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executePersonalSign(
      req: ForwardRequestTypesV2.ERC20ForwardRequestStruct,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNonce(
      from: string,
      batchId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerDomainSeparator(
      name: string,
      version: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyEIP712(
      req: ForwardRequestTypesV2.ERC20ForwardRequestStruct,
      domainSeparator: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyPersonalSign(
      req: ForwardRequestTypesV2.ERC20ForwardRequestStruct,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
