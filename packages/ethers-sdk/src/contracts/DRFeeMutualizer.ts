/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace DRFeeMutualizer {
  export type AgreementStruct = {
    maxAmountPerTx: BigNumberish;
    maxAmountTotal: BigNumberish;
    timePeriod: BigNumberish;
    premium: BigNumberish;
    tokenAddress: string;
    refundOnCancel: boolean;
    isVoided: boolean;
    startTime: BigNumberish;
    totalMutualized: BigNumberish;
    sellerId: BigNumberish;
  };

  export type AgreementStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    boolean,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    maxAmountPerTx: BigNumber;
    maxAmountTotal: BigNumber;
    timePeriod: BigNumber;
    premium: BigNumber;
    tokenAddress: string;
    refundOnCancel: boolean;
    isVoided: boolean;
    startTime: BigNumber;
    totalMutualized: BigNumber;
    sellerId: BigNumber;
  };
}

export interface DRFeeMutualizerInterface extends utils.Interface {
  contractName: "DRFeeMutualizer";
  functions: {
    "deposit(address,uint256)": FunctionFragment;
    "depositRestrictedToOwner()": FunctionFragment;
    "feeInfoByExchange(uint256)": FunctionFragment;
    "finalizeExchange(uint256,uint256)": FunctionFragment;
    "getAgreement(uint256)": FunctionFragment;
    "getAgreementId(uint256,address,uint256)": FunctionFragment;
    "getPoolBalance(address)": FunctionFragment;
    "isSellerCovered(uint256,uint256,address,uint256)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "newAgreement(uint256,address,uint256,uint256,uint256,uint256,uint256,bool)": FunctionFragment;
    "owner()": FunctionFragment;
    "payPremium(uint256,uint256)": FunctionFragment;
    "poolBalances(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestDRFee(uint256,uint256,address,uint256,uint256)": FunctionFragment;
    "sellerToTokenToDisputeResolverToAgreement(uint256,address,uint256)": FunctionFragment;
    "setDepositRestriction(bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "voidAgreement(uint256)": FunctionFragment;
    "withdraw(address,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositRestrictedToOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeInfoByExchange",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeExchange",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgreement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgreementId",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isSellerCovered",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "newAgreement",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payPremium",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolBalances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestDRFee",
    values: [BigNumberish, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellerToTokenToDisputeResolverToAgreement",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositRestriction",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "voidAgreement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositRestrictedToOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeInfoByExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgreementId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSellerCovered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payPremium", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestDRFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellerToTokenToDisputeResolverToAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositRestriction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voidAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AgreementActivated(uint256,uint256)": EventFragment;
    "AgreementCreated(uint256,uint256,address,uint256)": EventFragment;
    "AgreementVoided(uint256,bool,uint256)": EventFragment;
    "DRFeeProvided(uint256,uint256,uint256)": EventFragment;
    "DRFeeReturned(uint256,uint256,uint256)": EventFragment;
    "DepositRestrictionApplied(bool)": EventFragment;
    "FundsDeposited(address,address,uint256)": EventFragment;
    "FundsWithdrawn(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AgreementActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementVoided"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DRFeeProvided"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DRFeeReturned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositRestrictionApplied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type AgreementActivatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { agreementId: BigNumber; sellerId: BigNumber }
>;

export type AgreementActivatedEventFilter =
  TypedEventFilter<AgreementActivatedEvent>;

export type AgreementCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber],
  {
    agreementId: BigNumber;
    sellerId: BigNumber;
    tokenAddress: string;
    disputeResolverId: BigNumber;
  }
>;

export type AgreementCreatedEventFilter =
  TypedEventFilter<AgreementCreatedEvent>;

export type AgreementVoidedEvent = TypedEvent<
  [BigNumber, boolean, BigNumber],
  {
    agreementId: BigNumber;
    premiumRefunded: boolean;
    amountRefunded: BigNumber;
  }
>;

export type AgreementVoidedEventFilter = TypedEventFilter<AgreementVoidedEvent>;

export type DRFeeProvidedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { exchangeId: BigNumber; sellerId: BigNumber; feeAmount: BigNumber }
>;

export type DRFeeProvidedEventFilter = TypedEventFilter<DRFeeProvidedEvent>;

export type DRFeeReturnedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  {
    exchangeId: BigNumber;
    originalFeeAmount: BigNumber;
    returnedAmount: BigNumber;
  }
>;

export type DRFeeReturnedEventFilter = TypedEventFilter<DRFeeReturnedEvent>;

export type DepositRestrictionAppliedEvent = TypedEvent<
  [boolean],
  { restricted: boolean }
>;

export type DepositRestrictionAppliedEventFilter =
  TypedEventFilter<DepositRestrictionAppliedEvent>;

export type FundsDepositedEvent = TypedEvent<
  [string, string, BigNumber],
  { depositor: string; tokenAddress: string; amount: BigNumber }
>;

export type FundsDepositedEventFilter = TypedEventFilter<FundsDepositedEvent>;

export type FundsWithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  { to: string; tokenAddress: string; amount: BigNumber }
>;

export type FundsWithdrawnEventFilter = TypedEventFilter<FundsWithdrawnEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface DRFeeMutualizer extends BaseContract {
  contractName: "DRFeeMutualizer";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DRFeeMutualizerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deposit(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositRestrictedToOwner(overrides?: CallOverrides): Promise<[boolean]>;

    feeInfoByExchange(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { token: string; amount: BigNumber }>;

    finalizeExchange(
      _exchangeId: BigNumberish,
      _returnedFeeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAgreement(
      _agreementId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[DRFeeMutualizer.AgreementStructOutput]>;

    getAgreementId(
      _sellerId: BigNumberish,
      _tokenAddress: string,
      _disputeResolverId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPoolBalance(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    isSellerCovered(
      _sellerId: BigNumberish,
      _feeAmount: BigNumberish,
      _tokenAddress: string,
      _disputeResolverId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    newAgreement(
      _sellerId: BigNumberish,
      _tokenAddress: string,
      _disputeResolverId: BigNumberish,
      _maxAmountPerTx: BigNumberish,
      _maxAmountTotal: BigNumberish,
      _timePeriod: BigNumberish,
      _premium: BigNumberish,
      _refundOnCancel: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payPremium(
      _agreementId: BigNumberish,
      _sellerId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    poolBalances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestDRFee(
      _sellerId: BigNumberish,
      _feeAmount: BigNumberish,
      _tokenAddress: string,
      _exchangeId: BigNumberish,
      _disputeResolverId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellerToTokenToDisputeResolverToAgreement(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setDepositRestriction(
      _restricted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voidAgreement(
      _agreementId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _tokenAddress: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  deposit(
    _tokenAddress: string,
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositRestrictedToOwner(overrides?: CallOverrides): Promise<boolean>;

  feeInfoByExchange(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { token: string; amount: BigNumber }>;

  finalizeExchange(
    _exchangeId: BigNumberish,
    _returnedFeeAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAgreement(
    _agreementId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<DRFeeMutualizer.AgreementStructOutput>;

  getAgreementId(
    _sellerId: BigNumberish,
    _tokenAddress: string,
    _disputeResolverId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoolBalance(
    _tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isSellerCovered(
    _sellerId: BigNumberish,
    _feeAmount: BigNumberish,
    _tokenAddress: string,
    _disputeResolverId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  newAgreement(
    _sellerId: BigNumberish,
    _tokenAddress: string,
    _disputeResolverId: BigNumberish,
    _maxAmountPerTx: BigNumberish,
    _maxAmountTotal: BigNumberish,
    _timePeriod: BigNumberish,
    _premium: BigNumberish,
    _refundOnCancel: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  payPremium(
    _agreementId: BigNumberish,
    _sellerId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  poolBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestDRFee(
    _sellerId: BigNumberish,
    _feeAmount: BigNumberish,
    _tokenAddress: string,
    _exchangeId: BigNumberish,
    _disputeResolverId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellerToTokenToDisputeResolverToAgreement(
    arg0: BigNumberish,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setDepositRestriction(
    _restricted: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voidAgreement(
    _agreementId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _tokenAddress: string,
    _amount: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deposit(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositRestrictedToOwner(overrides?: CallOverrides): Promise<boolean>;

    feeInfoByExchange(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { token: string; amount: BigNumber }>;

    finalizeExchange(
      _exchangeId: BigNumberish,
      _returnedFeeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAgreement(
      _agreementId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<DRFeeMutualizer.AgreementStructOutput>;

    getAgreementId(
      _sellerId: BigNumberish,
      _tokenAddress: string,
      _disputeResolverId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolBalance(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSellerCovered(
      _sellerId: BigNumberish,
      _feeAmount: BigNumberish,
      _tokenAddress: string,
      _disputeResolverId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    newAgreement(
      _sellerId: BigNumberish,
      _tokenAddress: string,
      _disputeResolverId: BigNumberish,
      _maxAmountPerTx: BigNumberish,
      _maxAmountTotal: BigNumberish,
      _timePeriod: BigNumberish,
      _premium: BigNumberish,
      _refundOnCancel: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    payPremium(
      _agreementId: BigNumberish,
      _sellerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    poolBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestDRFee(
      _sellerId: BigNumberish,
      _feeAmount: BigNumberish,
      _tokenAddress: string,
      _exchangeId: BigNumberish,
      _disputeResolverId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    sellerToTokenToDisputeResolverToAgreement(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDepositRestriction(
      _restricted: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    voidAgreement(
      _agreementId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _tokenAddress: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AgreementActivated(uint256,uint256)"(
      agreementId?: BigNumberish | null,
      sellerId?: BigNumberish | null
    ): AgreementActivatedEventFilter;
    AgreementActivated(
      agreementId?: BigNumberish | null,
      sellerId?: BigNumberish | null
    ): AgreementActivatedEventFilter;

    "AgreementCreated(uint256,uint256,address,uint256)"(
      agreementId?: null,
      sellerId?: BigNumberish | null,
      tokenAddress?: string | null,
      disputeResolverId?: BigNumberish | null
    ): AgreementCreatedEventFilter;
    AgreementCreated(
      agreementId?: null,
      sellerId?: BigNumberish | null,
      tokenAddress?: string | null,
      disputeResolverId?: BigNumberish | null
    ): AgreementCreatedEventFilter;

    "AgreementVoided(uint256,bool,uint256)"(
      agreementId?: BigNumberish | null,
      premiumRefunded?: null,
      amountRefunded?: null
    ): AgreementVoidedEventFilter;
    AgreementVoided(
      agreementId?: BigNumberish | null,
      premiumRefunded?: null,
      amountRefunded?: null
    ): AgreementVoidedEventFilter;

    "DRFeeProvided(uint256,uint256,uint256)"(
      exchangeId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      feeAmount?: null
    ): DRFeeProvidedEventFilter;
    DRFeeProvided(
      exchangeId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      feeAmount?: null
    ): DRFeeProvidedEventFilter;

    "DRFeeReturned(uint256,uint256,uint256)"(
      exchangeId?: BigNumberish | null,
      originalFeeAmount?: null,
      returnedAmount?: null
    ): DRFeeReturnedEventFilter;
    DRFeeReturned(
      exchangeId?: BigNumberish | null,
      originalFeeAmount?: null,
      returnedAmount?: null
    ): DRFeeReturnedEventFilter;

    "DepositRestrictionApplied(bool)"(
      restricted?: null
    ): DepositRestrictionAppliedEventFilter;
    DepositRestrictionApplied(
      restricted?: null
    ): DepositRestrictionAppliedEventFilter;

    "FundsDeposited(address,address,uint256)"(
      depositor?: string | null,
      tokenAddress?: string | null,
      amount?: null
    ): FundsDepositedEventFilter;
    FundsDeposited(
      depositor?: string | null,
      tokenAddress?: string | null,
      amount?: null
    ): FundsDepositedEventFilter;

    "FundsWithdrawn(address,address,uint256)"(
      to?: string | null,
      tokenAddress?: string | null,
      amount?: null
    ): FundsWithdrawnEventFilter;
    FundsWithdrawn(
      to?: string | null,
      tokenAddress?: string | null,
      amount?: null
    ): FundsWithdrawnEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    deposit(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositRestrictedToOwner(overrides?: CallOverrides): Promise<BigNumber>;

    feeInfoByExchange(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalizeExchange(
      _exchangeId: BigNumberish,
      _returnedFeeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAgreement(
      _agreementId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAgreementId(
      _sellerId: BigNumberish,
      _tokenAddress: string,
      _disputeResolverId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolBalance(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSellerCovered(
      _sellerId: BigNumberish,
      _feeAmount: BigNumberish,
      _tokenAddress: string,
      _disputeResolverId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newAgreement(
      _sellerId: BigNumberish,
      _tokenAddress: string,
      _disputeResolverId: BigNumberish,
      _maxAmountPerTx: BigNumberish,
      _maxAmountTotal: BigNumberish,
      _timePeriod: BigNumberish,
      _premium: BigNumberish,
      _refundOnCancel: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payPremium(
      _agreementId: BigNumberish,
      _sellerId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    poolBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestDRFee(
      _sellerId: BigNumberish,
      _feeAmount: BigNumberish,
      _tokenAddress: string,
      _exchangeId: BigNumberish,
      _disputeResolverId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellerToTokenToDisputeResolverToAgreement(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDepositRestriction(
      _restricted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voidAgreement(
      _agreementId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _tokenAddress: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositRestrictedToOwner(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeInfoByExchange(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalizeExchange(
      _exchangeId: BigNumberish,
      _returnedFeeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAgreement(
      _agreementId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAgreementId(
      _sellerId: BigNumberish,
      _tokenAddress: string,
      _disputeResolverId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolBalance(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSellerCovered(
      _sellerId: BigNumberish,
      _feeAmount: BigNumberish,
      _tokenAddress: string,
      _disputeResolverId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newAgreement(
      _sellerId: BigNumberish,
      _tokenAddress: string,
      _disputeResolverId: BigNumberish,
      _maxAmountPerTx: BigNumberish,
      _maxAmountTotal: BigNumberish,
      _timePeriod: BigNumberish,
      _premium: BigNumberish,
      _refundOnCancel: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payPremium(
      _agreementId: BigNumberish,
      _sellerId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    poolBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestDRFee(
      _sellerId: BigNumberish,
      _feeAmount: BigNumberish,
      _tokenAddress: string,
      _exchangeId: BigNumberish,
      _disputeResolverId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellerToTokenToDisputeResolverToAgreement(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDepositRestriction(
      _restricted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voidAgreement(
      _agreementId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _tokenAddress: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
