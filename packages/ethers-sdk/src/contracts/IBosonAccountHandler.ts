/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace BosonTypes {
  export type AgentStruct = {
    id: BigNumberish;
    feePercentage: BigNumberish;
    wallet: string;
    active: boolean;
  };

  export type AgentStructOutput = [BigNumber, BigNumber, string, boolean] & {
    id: BigNumber;
    feePercentage: BigNumber;
    wallet: string;
    active: boolean;
  };

  export type BuyerStruct = {
    id: BigNumberish;
    wallet: string;
    active: boolean;
  };

  export type BuyerStructOutput = [BigNumber, string, boolean] & {
    id: BigNumber;
    wallet: string;
    active: boolean;
  };

  export type DisputeResolverStruct = {
    id: BigNumberish;
    escalationResponsePeriod: BigNumberish;
    assistant: string;
    admin: string;
    clerk: string;
    treasury: string;
    metadataUri: string;
    active: boolean;
  };

  export type DisputeResolverStructOutput = [
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    string,
    string,
    boolean
  ] & {
    id: BigNumber;
    escalationResponsePeriod: BigNumber;
    assistant: string;
    admin: string;
    clerk: string;
    treasury: string;
    metadataUri: string;
    active: boolean;
  };

  export type DisputeResolverFeeStruct = {
    tokenAddress: string;
    tokenName: string;
    feeAmount: BigNumberish;
  };

  export type DisputeResolverFeeStructOutput = [string, string, BigNumber] & {
    tokenAddress: string;
    tokenName: string;
    feeAmount: BigNumber;
  };

  export type SellerStruct = {
    id: BigNumberish;
    assistant: string;
    admin: string;
    clerk: string;
    treasury: string;
    active: boolean;
    metadataUri: string;
  };

  export type SellerStructOutput = [
    BigNumber,
    string,
    string,
    string,
    string,
    boolean,
    string
  ] & {
    id: BigNumber;
    assistant: string;
    admin: string;
    clerk: string;
    treasury: string;
    active: boolean;
    metadataUri: string;
  };

  export type AuthTokenStruct = {
    tokenId: BigNumberish;
    tokenType: BigNumberish;
  };

  export type AuthTokenStructOutput = [BigNumber, number] & {
    tokenId: BigNumber;
    tokenType: number;
  };

  export type VoucherInitValuesStruct = {
    contractURI: string;
    royaltyPercentage: BigNumberish;
  };

  export type VoucherInitValuesStructOutput = [string, BigNumber] & {
    contractURI: string;
    royaltyPercentage: BigNumber;
  };
}

export interface IBosonAccountHandlerInterface extends utils.Interface {
  contractName: "IBosonAccountHandler";
  functions: {
    "addFeesToDisputeResolver(uint256,(address,string,uint256)[])": FunctionFragment;
    "addSellersToAllowList(uint256,uint256[])": FunctionFragment;
    "areSellersAllowed(uint256,uint256[])": FunctionFragment;
    "createAgent((uint256,uint256,address,bool))": FunctionFragment;
    "createBuyer((uint256,address,bool))": FunctionFragment;
    "createDisputeResolver((uint256,uint256,address,address,address,address,string,bool),(address,string,uint256)[],uint256[])": FunctionFragment;
    "createSeller((uint256,address,address,address,address,bool,string),(uint256,uint8),(string,uint256))": FunctionFragment;
    "getAgent(uint256)": FunctionFragment;
    "getBuyer(uint256)": FunctionFragment;
    "getDisputeResolver(uint256)": FunctionFragment;
    "getDisputeResolverByAddress(address)": FunctionFragment;
    "getNextAccountId()": FunctionFragment;
    "getSeller(uint256)": FunctionFragment;
    "getSellerByAddress(address)": FunctionFragment;
    "getSellerByAuthToken((uint256,uint8))": FunctionFragment;
    "optInToDisputeResolverUpdate(uint256,uint8[])": FunctionFragment;
    "optInToSellerUpdate(uint256,uint8[])": FunctionFragment;
    "removeFeesFromDisputeResolver(uint256,address[])": FunctionFragment;
    "removeSellersFromAllowList(uint256,uint256[])": FunctionFragment;
    "updateAgent((uint256,uint256,address,bool))": FunctionFragment;
    "updateBuyer((uint256,address,bool))": FunctionFragment;
    "updateDisputeResolver((uint256,uint256,address,address,address,address,string,bool))": FunctionFragment;
    "updateSeller((uint256,address,address,address,address,bool,string),(uint256,uint8))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addFeesToDisputeResolver",
    values: [BigNumberish, BosonTypes.DisputeResolverFeeStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addSellersToAllowList",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "areSellersAllowed",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createAgent",
    values: [BosonTypes.AgentStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createBuyer",
    values: [BosonTypes.BuyerStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createDisputeResolver",
    values: [
      BosonTypes.DisputeResolverStruct,
      BosonTypes.DisputeResolverFeeStruct[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createSeller",
    values: [
      BosonTypes.SellerStruct,
      BosonTypes.AuthTokenStruct,
      BosonTypes.VoucherInitValuesStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDisputeResolver",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDisputeResolverByAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextAccountId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSeller",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellerByAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellerByAuthToken",
    values: [BosonTypes.AuthTokenStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "optInToDisputeResolverUpdate",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "optInToSellerUpdate",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFeesFromDisputeResolver",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSellersFromAllowList",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAgent",
    values: [BosonTypes.AgentStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBuyer",
    values: [BosonTypes.BuyerStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDisputeResolver",
    values: [BosonTypes.DisputeResolverStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSeller",
    values: [BosonTypes.SellerStruct, BosonTypes.AuthTokenStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "addFeesToDisputeResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSellersToAllowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "areSellersAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBuyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDisputeResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSeller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAgent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBuyer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDisputeResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDisputeResolverByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextAccountId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSeller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSellerByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSellerByAuthToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optInToDisputeResolverUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optInToSellerUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFeesFromDisputeResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSellersFromAllowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBuyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDisputeResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSeller",
    data: BytesLike
  ): Result;

  events: {
    "AgentCreated(uint256,tuple,address)": EventFragment;
    "AgentUpdated(uint256,tuple,address)": EventFragment;
    "AllowedSellersAdded(uint256,uint256[],address)": EventFragment;
    "AllowedSellersRemoved(uint256,uint256[],address)": EventFragment;
    "BuyerCreated(uint256,tuple,address)": EventFragment;
    "BuyerUpdated(uint256,tuple,address)": EventFragment;
    "DisputeResolverCreated(uint256,tuple,tuple[],uint256[],address)": EventFragment;
    "DisputeResolverFeesAdded(uint256,tuple[],address)": EventFragment;
    "DisputeResolverFeesRemoved(uint256,address[],address)": EventFragment;
    "DisputeResolverUpdateApplied(uint256,tuple,tuple,address)": EventFragment;
    "DisputeResolverUpdatePending(uint256,tuple,address)": EventFragment;
    "SellerCreated(uint256,tuple,address,tuple,address)": EventFragment;
    "SellerUpdateApplied(uint256,tuple,tuple,tuple,tuple,address)": EventFragment;
    "SellerUpdatePending(uint256,tuple,tuple,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AgentCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgentUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllowedSellersAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllowedSellersRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyerCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeResolverCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeResolverFeesAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeResolverFeesRemoved"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DisputeResolverUpdateApplied"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DisputeResolverUpdatePending"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellerCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellerUpdateApplied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellerUpdatePending"): EventFragment;
}

export type AgentCreatedEvent = TypedEvent<
  [BigNumber, BosonTypes.AgentStructOutput, string],
  {
    agentId: BigNumber;
    agent: BosonTypes.AgentStructOutput;
    executedBy: string;
  }
>;

export type AgentCreatedEventFilter = TypedEventFilter<AgentCreatedEvent>;

export type AgentUpdatedEvent = TypedEvent<
  [BigNumber, BosonTypes.AgentStructOutput, string],
  {
    agentId: BigNumber;
    agent: BosonTypes.AgentStructOutput;
    executedBy: string;
  }
>;

export type AgentUpdatedEventFilter = TypedEventFilter<AgentUpdatedEvent>;

export type AllowedSellersAddedEvent = TypedEvent<
  [BigNumber, BigNumber[], string],
  {
    disputeResolverId: BigNumber;
    addedSellers: BigNumber[];
    executedBy: string;
  }
>;

export type AllowedSellersAddedEventFilter =
  TypedEventFilter<AllowedSellersAddedEvent>;

export type AllowedSellersRemovedEvent = TypedEvent<
  [BigNumber, BigNumber[], string],
  {
    disputeResolverId: BigNumber;
    removedSellers: BigNumber[];
    executedBy: string;
  }
>;

export type AllowedSellersRemovedEventFilter =
  TypedEventFilter<AllowedSellersRemovedEvent>;

export type BuyerCreatedEvent = TypedEvent<
  [BigNumber, BosonTypes.BuyerStructOutput, string],
  {
    buyerId: BigNumber;
    buyer: BosonTypes.BuyerStructOutput;
    executedBy: string;
  }
>;

export type BuyerCreatedEventFilter = TypedEventFilter<BuyerCreatedEvent>;

export type BuyerUpdatedEvent = TypedEvent<
  [BigNumber, BosonTypes.BuyerStructOutput, string],
  {
    buyerId: BigNumber;
    buyer: BosonTypes.BuyerStructOutput;
    executedBy: string;
  }
>;

export type BuyerUpdatedEventFilter = TypedEventFilter<BuyerUpdatedEvent>;

export type DisputeResolverCreatedEvent = TypedEvent<
  [
    BigNumber,
    BosonTypes.DisputeResolverStructOutput,
    BosonTypes.DisputeResolverFeeStructOutput[],
    BigNumber[],
    string
  ],
  {
    disputeResolverId: BigNumber;
    disputeResolver: BosonTypes.DisputeResolverStructOutput;
    disputeResolverFees: BosonTypes.DisputeResolverFeeStructOutput[];
    sellerAllowList: BigNumber[];
    executedBy: string;
  }
>;

export type DisputeResolverCreatedEventFilter =
  TypedEventFilter<DisputeResolverCreatedEvent>;

export type DisputeResolverFeesAddedEvent = TypedEvent<
  [BigNumber, BosonTypes.DisputeResolverFeeStructOutput[], string],
  {
    disputeResolverId: BigNumber;
    disputeResolverFees: BosonTypes.DisputeResolverFeeStructOutput[];
    executedBy: string;
  }
>;

export type DisputeResolverFeesAddedEventFilter =
  TypedEventFilter<DisputeResolverFeesAddedEvent>;

export type DisputeResolverFeesRemovedEvent = TypedEvent<
  [BigNumber, string[], string],
  {
    disputeResolverId: BigNumber;
    feeTokensRemoved: string[];
    executedBy: string;
  }
>;

export type DisputeResolverFeesRemovedEventFilter =
  TypedEventFilter<DisputeResolverFeesRemovedEvent>;

export type DisputeResolverUpdateAppliedEvent = TypedEvent<
  [
    BigNumber,
    BosonTypes.DisputeResolverStructOutput,
    BosonTypes.DisputeResolverStructOutput,
    string
  ],
  {
    disputeResolverId: BigNumber;
    disputeResolver: BosonTypes.DisputeResolverStructOutput;
    pendingDisputeResolver: BosonTypes.DisputeResolverStructOutput;
    executedBy: string;
  }
>;

export type DisputeResolverUpdateAppliedEventFilter =
  TypedEventFilter<DisputeResolverUpdateAppliedEvent>;

export type DisputeResolverUpdatePendingEvent = TypedEvent<
  [BigNumber, BosonTypes.DisputeResolverStructOutput, string],
  {
    disputeResolverId: BigNumber;
    pendingDisputeResolver: BosonTypes.DisputeResolverStructOutput;
    executedBy: string;
  }
>;

export type DisputeResolverUpdatePendingEventFilter =
  TypedEventFilter<DisputeResolverUpdatePendingEvent>;

export type SellerCreatedEvent = TypedEvent<
  [
    BigNumber,
    BosonTypes.SellerStructOutput,
    string,
    BosonTypes.AuthTokenStructOutput,
    string
  ],
  {
    sellerId: BigNumber;
    seller: BosonTypes.SellerStructOutput;
    voucherCloneAddress: string;
    authToken: BosonTypes.AuthTokenStructOutput;
    executedBy: string;
  }
>;

export type SellerCreatedEventFilter = TypedEventFilter<SellerCreatedEvent>;

export type SellerUpdateAppliedEvent = TypedEvent<
  [
    BigNumber,
    BosonTypes.SellerStructOutput,
    BosonTypes.SellerStructOutput,
    BosonTypes.AuthTokenStructOutput,
    BosonTypes.AuthTokenStructOutput,
    string
  ],
  {
    sellerId: BigNumber;
    seller: BosonTypes.SellerStructOutput;
    pendingSeller: BosonTypes.SellerStructOutput;
    authToken: BosonTypes.AuthTokenStructOutput;
    pendingAuthToken: BosonTypes.AuthTokenStructOutput;
    executedBy: string;
  }
>;

export type SellerUpdateAppliedEventFilter =
  TypedEventFilter<SellerUpdateAppliedEvent>;

export type SellerUpdatePendingEvent = TypedEvent<
  [
    BigNumber,
    BosonTypes.SellerStructOutput,
    BosonTypes.AuthTokenStructOutput,
    string
  ],
  {
    sellerId: BigNumber;
    pendingSeller: BosonTypes.SellerStructOutput;
    pendingAuthToken: BosonTypes.AuthTokenStructOutput;
    executedBy: string;
  }
>;

export type SellerUpdatePendingEventFilter =
  TypedEventFilter<SellerUpdatePendingEvent>;

export interface IBosonAccountHandler extends BaseContract {
  contractName: "IBosonAccountHandler";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBosonAccountHandlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addFeesToDisputeResolver(
      _disputeResolverId: BigNumberish,
      _disputeResolverFees: BosonTypes.DisputeResolverFeeStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSellersToAllowList(
      _disputeResolverId: BigNumberish,
      _sellerAllowList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    areSellersAllowed(
      _disputeResolverId: BigNumberish,
      _sellerIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean[]] & { sellerAllowed: boolean[] }>;

    createAgent(
      _agent: BosonTypes.AgentStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createBuyer(
      _buyer: BosonTypes.BuyerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createDisputeResolver(
      _disputeResolver: BosonTypes.DisputeResolverStruct,
      _disputeResolverFees: BosonTypes.DisputeResolverFeeStruct[],
      _sellerAllowList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createSeller(
      _seller: BosonTypes.SellerStruct,
      _authToken: BosonTypes.AuthTokenStruct,
      _voucherInitValues: BosonTypes.VoucherInitValuesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAgent(
      _agentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BosonTypes.AgentStructOutput] & {
        exists: boolean;
        agent: BosonTypes.AgentStructOutput;
      }
    >;

    getBuyer(
      _buyerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BosonTypes.BuyerStructOutput] & {
        exists: boolean;
        buyer: BosonTypes.BuyerStructOutput;
      }
    >;

    getDisputeResolver(
      _disputeResolverId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BosonTypes.DisputeResolverStructOutput,
        BosonTypes.DisputeResolverFeeStructOutput[],
        BigNumber[]
      ] & {
        exists: boolean;
        disputeResolver: BosonTypes.DisputeResolverStructOutput;
        disputeResolverFees: BosonTypes.DisputeResolverFeeStructOutput[];
        sellerAllowList: BigNumber[];
      }
    >;

    getDisputeResolverByAddress(
      _associatedAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BosonTypes.DisputeResolverStructOutput,
        BosonTypes.DisputeResolverFeeStructOutput[],
        BigNumber[]
      ] & {
        exists: boolean;
        disputeResolver: BosonTypes.DisputeResolverStructOutput;
        disputeResolverFees: BosonTypes.DisputeResolverFeeStructOutput[];
        sellerAllowList: BigNumber[];
      }
    >;

    getNextAccountId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nextAccountId: BigNumber }>;

    getSeller(
      _sellerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BosonTypes.SellerStructOutput,
        BosonTypes.AuthTokenStructOutput
      ] & {
        exists: boolean;
        seller: BosonTypes.SellerStructOutput;
        authToken: BosonTypes.AuthTokenStructOutput;
      }
    >;

    getSellerByAddress(
      _associatedAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BosonTypes.SellerStructOutput,
        BosonTypes.AuthTokenStructOutput
      ] & {
        exists: boolean;
        seller: BosonTypes.SellerStructOutput;
        authToken: BosonTypes.AuthTokenStructOutput;
      }
    >;

    getSellerByAuthToken(
      _associatedAuthToken: BosonTypes.AuthTokenStruct,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BosonTypes.SellerStructOutput,
        BosonTypes.AuthTokenStructOutput
      ] & {
        exists: boolean;
        seller: BosonTypes.SellerStructOutput;
        authToken: BosonTypes.AuthTokenStructOutput;
      }
    >;

    optInToDisputeResolverUpdate(
      _disputeResolverId: BigNumberish,
      _fieldsToUpdate: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    optInToSellerUpdate(
      _sellerId: BigNumberish,
      _fieldsToUpdate: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeFeesFromDisputeResolver(
      _disputeResolverId: BigNumberish,
      _feeTokenAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSellersFromAllowList(
      _disputeResolverId: BigNumberish,
      _sellerAllowList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateAgent(
      _agent: BosonTypes.AgentStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateBuyer(
      _buyer: BosonTypes.BuyerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateDisputeResolver(
      _disputeResolver: BosonTypes.DisputeResolverStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSeller(
      _seller: BosonTypes.SellerStruct,
      _authToken: BosonTypes.AuthTokenStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addFeesToDisputeResolver(
    _disputeResolverId: BigNumberish,
    _disputeResolverFees: BosonTypes.DisputeResolverFeeStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSellersToAllowList(
    _disputeResolverId: BigNumberish,
    _sellerAllowList: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  areSellersAllowed(
    _disputeResolverId: BigNumberish,
    _sellerIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  createAgent(
    _agent: BosonTypes.AgentStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createBuyer(
    _buyer: BosonTypes.BuyerStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createDisputeResolver(
    _disputeResolver: BosonTypes.DisputeResolverStruct,
    _disputeResolverFees: BosonTypes.DisputeResolverFeeStruct[],
    _sellerAllowList: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createSeller(
    _seller: BosonTypes.SellerStruct,
    _authToken: BosonTypes.AuthTokenStruct,
    _voucherInitValues: BosonTypes.VoucherInitValuesStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAgent(
    _agentId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BosonTypes.AgentStructOutput] & {
      exists: boolean;
      agent: BosonTypes.AgentStructOutput;
    }
  >;

  getBuyer(
    _buyerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BosonTypes.BuyerStructOutput] & {
      exists: boolean;
      buyer: BosonTypes.BuyerStructOutput;
    }
  >;

  getDisputeResolver(
    _disputeResolverId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BosonTypes.DisputeResolverStructOutput,
      BosonTypes.DisputeResolverFeeStructOutput[],
      BigNumber[]
    ] & {
      exists: boolean;
      disputeResolver: BosonTypes.DisputeResolverStructOutput;
      disputeResolverFees: BosonTypes.DisputeResolverFeeStructOutput[];
      sellerAllowList: BigNumber[];
    }
  >;

  getDisputeResolverByAddress(
    _associatedAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BosonTypes.DisputeResolverStructOutput,
      BosonTypes.DisputeResolverFeeStructOutput[],
      BigNumber[]
    ] & {
      exists: boolean;
      disputeResolver: BosonTypes.DisputeResolverStructOutput;
      disputeResolverFees: BosonTypes.DisputeResolverFeeStructOutput[];
      sellerAllowList: BigNumber[];
    }
  >;

  getNextAccountId(overrides?: CallOverrides): Promise<BigNumber>;

  getSeller(
    _sellerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BosonTypes.SellerStructOutput,
      BosonTypes.AuthTokenStructOutput
    ] & {
      exists: boolean;
      seller: BosonTypes.SellerStructOutput;
      authToken: BosonTypes.AuthTokenStructOutput;
    }
  >;

  getSellerByAddress(
    _associatedAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BosonTypes.SellerStructOutput,
      BosonTypes.AuthTokenStructOutput
    ] & {
      exists: boolean;
      seller: BosonTypes.SellerStructOutput;
      authToken: BosonTypes.AuthTokenStructOutput;
    }
  >;

  getSellerByAuthToken(
    _associatedAuthToken: BosonTypes.AuthTokenStruct,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BosonTypes.SellerStructOutput,
      BosonTypes.AuthTokenStructOutput
    ] & {
      exists: boolean;
      seller: BosonTypes.SellerStructOutput;
      authToken: BosonTypes.AuthTokenStructOutput;
    }
  >;

  optInToDisputeResolverUpdate(
    _disputeResolverId: BigNumberish,
    _fieldsToUpdate: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  optInToSellerUpdate(
    _sellerId: BigNumberish,
    _fieldsToUpdate: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeFeesFromDisputeResolver(
    _disputeResolverId: BigNumberish,
    _feeTokenAddresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSellersFromAllowList(
    _disputeResolverId: BigNumberish,
    _sellerAllowList: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateAgent(
    _agent: BosonTypes.AgentStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateBuyer(
    _buyer: BosonTypes.BuyerStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateDisputeResolver(
    _disputeResolver: BosonTypes.DisputeResolverStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSeller(
    _seller: BosonTypes.SellerStruct,
    _authToken: BosonTypes.AuthTokenStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addFeesToDisputeResolver(
      _disputeResolverId: BigNumberish,
      _disputeResolverFees: BosonTypes.DisputeResolverFeeStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    addSellersToAllowList(
      _disputeResolverId: BigNumberish,
      _sellerAllowList: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    areSellersAllowed(
      _disputeResolverId: BigNumberish,
      _sellerIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    createAgent(
      _agent: BosonTypes.AgentStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    createBuyer(
      _buyer: BosonTypes.BuyerStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    createDisputeResolver(
      _disputeResolver: BosonTypes.DisputeResolverStruct,
      _disputeResolverFees: BosonTypes.DisputeResolverFeeStruct[],
      _sellerAllowList: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    createSeller(
      _seller: BosonTypes.SellerStruct,
      _authToken: BosonTypes.AuthTokenStruct,
      _voucherInitValues: BosonTypes.VoucherInitValuesStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getAgent(
      _agentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BosonTypes.AgentStructOutput] & {
        exists: boolean;
        agent: BosonTypes.AgentStructOutput;
      }
    >;

    getBuyer(
      _buyerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BosonTypes.BuyerStructOutput] & {
        exists: boolean;
        buyer: BosonTypes.BuyerStructOutput;
      }
    >;

    getDisputeResolver(
      _disputeResolverId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BosonTypes.DisputeResolverStructOutput,
        BosonTypes.DisputeResolverFeeStructOutput[],
        BigNumber[]
      ] & {
        exists: boolean;
        disputeResolver: BosonTypes.DisputeResolverStructOutput;
        disputeResolverFees: BosonTypes.DisputeResolverFeeStructOutput[];
        sellerAllowList: BigNumber[];
      }
    >;

    getDisputeResolverByAddress(
      _associatedAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BosonTypes.DisputeResolverStructOutput,
        BosonTypes.DisputeResolverFeeStructOutput[],
        BigNumber[]
      ] & {
        exists: boolean;
        disputeResolver: BosonTypes.DisputeResolverStructOutput;
        disputeResolverFees: BosonTypes.DisputeResolverFeeStructOutput[];
        sellerAllowList: BigNumber[];
      }
    >;

    getNextAccountId(overrides?: CallOverrides): Promise<BigNumber>;

    getSeller(
      _sellerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BosonTypes.SellerStructOutput,
        BosonTypes.AuthTokenStructOutput
      ] & {
        exists: boolean;
        seller: BosonTypes.SellerStructOutput;
        authToken: BosonTypes.AuthTokenStructOutput;
      }
    >;

    getSellerByAddress(
      _associatedAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BosonTypes.SellerStructOutput,
        BosonTypes.AuthTokenStructOutput
      ] & {
        exists: boolean;
        seller: BosonTypes.SellerStructOutput;
        authToken: BosonTypes.AuthTokenStructOutput;
      }
    >;

    getSellerByAuthToken(
      _associatedAuthToken: BosonTypes.AuthTokenStruct,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BosonTypes.SellerStructOutput,
        BosonTypes.AuthTokenStructOutput
      ] & {
        exists: boolean;
        seller: BosonTypes.SellerStructOutput;
        authToken: BosonTypes.AuthTokenStructOutput;
      }
    >;

    optInToDisputeResolverUpdate(
      _disputeResolverId: BigNumberish,
      _fieldsToUpdate: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    optInToSellerUpdate(
      _sellerId: BigNumberish,
      _fieldsToUpdate: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeFeesFromDisputeResolver(
      _disputeResolverId: BigNumberish,
      _feeTokenAddresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeSellersFromAllowList(
      _disputeResolverId: BigNumberish,
      _sellerAllowList: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateAgent(
      _agent: BosonTypes.AgentStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBuyer(
      _buyer: BosonTypes.BuyerStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDisputeResolver(
      _disputeResolver: BosonTypes.DisputeResolverStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSeller(
      _seller: BosonTypes.SellerStruct,
      _authToken: BosonTypes.AuthTokenStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AgentCreated(uint256,tuple,address)"(
      agentId?: BigNumberish | null,
      agent?: null,
      executedBy?: string | null
    ): AgentCreatedEventFilter;
    AgentCreated(
      agentId?: BigNumberish | null,
      agent?: null,
      executedBy?: string | null
    ): AgentCreatedEventFilter;

    "AgentUpdated(uint256,tuple,address)"(
      agentId?: BigNumberish | null,
      agent?: null,
      executedBy?: string | null
    ): AgentUpdatedEventFilter;
    AgentUpdated(
      agentId?: BigNumberish | null,
      agent?: null,
      executedBy?: string | null
    ): AgentUpdatedEventFilter;

    "AllowedSellersAdded(uint256,uint256[],address)"(
      disputeResolverId?: BigNumberish | null,
      addedSellers?: null,
      executedBy?: string | null
    ): AllowedSellersAddedEventFilter;
    AllowedSellersAdded(
      disputeResolverId?: BigNumberish | null,
      addedSellers?: null,
      executedBy?: string | null
    ): AllowedSellersAddedEventFilter;

    "AllowedSellersRemoved(uint256,uint256[],address)"(
      disputeResolverId?: BigNumberish | null,
      removedSellers?: null,
      executedBy?: string | null
    ): AllowedSellersRemovedEventFilter;
    AllowedSellersRemoved(
      disputeResolverId?: BigNumberish | null,
      removedSellers?: null,
      executedBy?: string | null
    ): AllowedSellersRemovedEventFilter;

    "BuyerCreated(uint256,tuple,address)"(
      buyerId?: BigNumberish | null,
      buyer?: null,
      executedBy?: string | null
    ): BuyerCreatedEventFilter;
    BuyerCreated(
      buyerId?: BigNumberish | null,
      buyer?: null,
      executedBy?: string | null
    ): BuyerCreatedEventFilter;

    "BuyerUpdated(uint256,tuple,address)"(
      buyerId?: BigNumberish | null,
      buyer?: null,
      executedBy?: string | null
    ): BuyerUpdatedEventFilter;
    BuyerUpdated(
      buyerId?: BigNumberish | null,
      buyer?: null,
      executedBy?: string | null
    ): BuyerUpdatedEventFilter;

    "DisputeResolverCreated(uint256,tuple,tuple[],uint256[],address)"(
      disputeResolverId?: BigNumberish | null,
      disputeResolver?: null,
      disputeResolverFees?: null,
      sellerAllowList?: null,
      executedBy?: string | null
    ): DisputeResolverCreatedEventFilter;
    DisputeResolverCreated(
      disputeResolverId?: BigNumberish | null,
      disputeResolver?: null,
      disputeResolverFees?: null,
      sellerAllowList?: null,
      executedBy?: string | null
    ): DisputeResolverCreatedEventFilter;

    "DisputeResolverFeesAdded(uint256,tuple[],address)"(
      disputeResolverId?: BigNumberish | null,
      disputeResolverFees?: null,
      executedBy?: string | null
    ): DisputeResolverFeesAddedEventFilter;
    DisputeResolverFeesAdded(
      disputeResolverId?: BigNumberish | null,
      disputeResolverFees?: null,
      executedBy?: string | null
    ): DisputeResolverFeesAddedEventFilter;

    "DisputeResolverFeesRemoved(uint256,address[],address)"(
      disputeResolverId?: BigNumberish | null,
      feeTokensRemoved?: null,
      executedBy?: string | null
    ): DisputeResolverFeesRemovedEventFilter;
    DisputeResolverFeesRemoved(
      disputeResolverId?: BigNumberish | null,
      feeTokensRemoved?: null,
      executedBy?: string | null
    ): DisputeResolverFeesRemovedEventFilter;

    "DisputeResolverUpdateApplied(uint256,tuple,tuple,address)"(
      disputeResolverId?: BigNumberish | null,
      disputeResolver?: null,
      pendingDisputeResolver?: null,
      executedBy?: string | null
    ): DisputeResolverUpdateAppliedEventFilter;
    DisputeResolverUpdateApplied(
      disputeResolverId?: BigNumberish | null,
      disputeResolver?: null,
      pendingDisputeResolver?: null,
      executedBy?: string | null
    ): DisputeResolverUpdateAppliedEventFilter;

    "DisputeResolverUpdatePending(uint256,tuple,address)"(
      disputeResolverId?: BigNumberish | null,
      pendingDisputeResolver?: null,
      executedBy?: string | null
    ): DisputeResolverUpdatePendingEventFilter;
    DisputeResolverUpdatePending(
      disputeResolverId?: BigNumberish | null,
      pendingDisputeResolver?: null,
      executedBy?: string | null
    ): DisputeResolverUpdatePendingEventFilter;

    "SellerCreated(uint256,tuple,address,tuple,address)"(
      sellerId?: BigNumberish | null,
      seller?: null,
      voucherCloneAddress?: null,
      authToken?: null,
      executedBy?: string | null
    ): SellerCreatedEventFilter;
    SellerCreated(
      sellerId?: BigNumberish | null,
      seller?: null,
      voucherCloneAddress?: null,
      authToken?: null,
      executedBy?: string | null
    ): SellerCreatedEventFilter;

    "SellerUpdateApplied(uint256,tuple,tuple,tuple,tuple,address)"(
      sellerId?: BigNumberish | null,
      seller?: null,
      pendingSeller?: null,
      authToken?: null,
      pendingAuthToken?: null,
      executedBy?: string | null
    ): SellerUpdateAppliedEventFilter;
    SellerUpdateApplied(
      sellerId?: BigNumberish | null,
      seller?: null,
      pendingSeller?: null,
      authToken?: null,
      pendingAuthToken?: null,
      executedBy?: string | null
    ): SellerUpdateAppliedEventFilter;

    "SellerUpdatePending(uint256,tuple,tuple,address)"(
      sellerId?: BigNumberish | null,
      pendingSeller?: null,
      pendingAuthToken?: null,
      executedBy?: string | null
    ): SellerUpdatePendingEventFilter;
    SellerUpdatePending(
      sellerId?: BigNumberish | null,
      pendingSeller?: null,
      pendingAuthToken?: null,
      executedBy?: string | null
    ): SellerUpdatePendingEventFilter;
  };

  estimateGas: {
    addFeesToDisputeResolver(
      _disputeResolverId: BigNumberish,
      _disputeResolverFees: BosonTypes.DisputeResolverFeeStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSellersToAllowList(
      _disputeResolverId: BigNumberish,
      _sellerAllowList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    areSellersAllowed(
      _disputeResolverId: BigNumberish,
      _sellerIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createAgent(
      _agent: BosonTypes.AgentStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createBuyer(
      _buyer: BosonTypes.BuyerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createDisputeResolver(
      _disputeResolver: BosonTypes.DisputeResolverStruct,
      _disputeResolverFees: BosonTypes.DisputeResolverFeeStruct[],
      _sellerAllowList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createSeller(
      _seller: BosonTypes.SellerStruct,
      _authToken: BosonTypes.AuthTokenStruct,
      _voucherInitValues: BosonTypes.VoucherInitValuesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAgent(
      _agentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyer(
      _buyerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDisputeResolver(
      _disputeResolverId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDisputeResolverByAddress(
      _associatedAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextAccountId(overrides?: CallOverrides): Promise<BigNumber>;

    getSeller(
      _sellerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellerByAddress(
      _associatedAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellerByAuthToken(
      _associatedAuthToken: BosonTypes.AuthTokenStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optInToDisputeResolverUpdate(
      _disputeResolverId: BigNumberish,
      _fieldsToUpdate: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    optInToSellerUpdate(
      _sellerId: BigNumberish,
      _fieldsToUpdate: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeFeesFromDisputeResolver(
      _disputeResolverId: BigNumberish,
      _feeTokenAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSellersFromAllowList(
      _disputeResolverId: BigNumberish,
      _sellerAllowList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateAgent(
      _agent: BosonTypes.AgentStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateBuyer(
      _buyer: BosonTypes.BuyerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateDisputeResolver(
      _disputeResolver: BosonTypes.DisputeResolverStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSeller(
      _seller: BosonTypes.SellerStruct,
      _authToken: BosonTypes.AuthTokenStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addFeesToDisputeResolver(
      _disputeResolverId: BigNumberish,
      _disputeResolverFees: BosonTypes.DisputeResolverFeeStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSellersToAllowList(
      _disputeResolverId: BigNumberish,
      _sellerAllowList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    areSellersAllowed(
      _disputeResolverId: BigNumberish,
      _sellerIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createAgent(
      _agent: BosonTypes.AgentStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createBuyer(
      _buyer: BosonTypes.BuyerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createDisputeResolver(
      _disputeResolver: BosonTypes.DisputeResolverStruct,
      _disputeResolverFees: BosonTypes.DisputeResolverFeeStruct[],
      _sellerAllowList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createSeller(
      _seller: BosonTypes.SellerStruct,
      _authToken: BosonTypes.AuthTokenStruct,
      _voucherInitValues: BosonTypes.VoucherInitValuesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAgent(
      _agentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBuyer(
      _buyerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDisputeResolver(
      _disputeResolverId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDisputeResolverByAddress(
      _associatedAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextAccountId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSeller(
      _sellerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSellerByAddress(
      _associatedAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSellerByAuthToken(
      _associatedAuthToken: BosonTypes.AuthTokenStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optInToDisputeResolverUpdate(
      _disputeResolverId: BigNumberish,
      _fieldsToUpdate: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    optInToSellerUpdate(
      _sellerId: BigNumberish,
      _fieldsToUpdate: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeFeesFromDisputeResolver(
      _disputeResolverId: BigNumberish,
      _feeTokenAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSellersFromAllowList(
      _disputeResolverId: BigNumberish,
      _sellerAllowList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateAgent(
      _agent: BosonTypes.AgentStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateBuyer(
      _buyer: BosonTypes.BuyerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateDisputeResolver(
      _disputeResolver: BosonTypes.DisputeResolverStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSeller(
      _seller: BosonTypes.SellerStruct,
      _authToken: BosonTypes.AuthTokenStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
