/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace BosonTypes {
  export type BuyerStruct = {
    id: BigNumberish;
    wallet: string;
    active: boolean;
  };

  export type BuyerStructOutput = [BigNumber, string, boolean] & {
    id: BigNumber;
    wallet: string;
    active: boolean;
  };

  export type SellerStruct = {
    id: BigNumberish;
    operator: string;
    admin: string;
    clerk: string;
    treasury: string;
    active: boolean;
  };

  export type SellerStructOutput = [
    BigNumber,
    string,
    string,
    string,
    string,
    boolean
  ] & {
    id: BigNumber;
    operator: string;
    admin: string;
    clerk: string;
    treasury: string;
    active: boolean;
  };
}

export interface IBosonAccountHandlerInterface extends utils.Interface {
  contractName: "IBosonAccountHandler";
  functions: {
    "createBuyer((uint256,address,bool))": FunctionFragment;
    "createSeller((uint256,address,address,address,address,bool))": FunctionFragment;
    "getBuyer(uint256)": FunctionFragment;
    "getNextAccountId()": FunctionFragment;
    "getSeller(uint256)": FunctionFragment;
    "getSellerByAddress(address)": FunctionFragment;
    "updateSeller((uint256,address,address,address,address,bool))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createBuyer",
    values: [BosonTypes.BuyerStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createSeller",
    values: [BosonTypes.SellerStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextAccountId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSeller",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellerByAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSeller",
    values: [BosonTypes.SellerStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "createBuyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSeller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBuyer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNextAccountId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSeller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSellerByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSeller",
    data: BytesLike
  ): Result;

  events: {
    "BuyerCreated(uint256,tuple)": EventFragment;
    "SellerCreated(uint256,tuple)": EventFragment;
    "SellerUpdated(uint256,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BuyerCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellerCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellerUpdated"): EventFragment;
}

export type BuyerCreatedEvent = TypedEvent<
  [BigNumber, BosonTypes.BuyerStructOutput],
  { buyerId: BigNumber; buyer: BosonTypes.BuyerStructOutput }
>;

export type BuyerCreatedEventFilter = TypedEventFilter<BuyerCreatedEvent>;

export type SellerCreatedEvent = TypedEvent<
  [BigNumber, BosonTypes.SellerStructOutput],
  { sellerId: BigNumber; seller: BosonTypes.SellerStructOutput }
>;

export type SellerCreatedEventFilter = TypedEventFilter<SellerCreatedEvent>;

export type SellerUpdatedEvent = TypedEvent<
  [BigNumber, BosonTypes.SellerStructOutput],
  { sellerId: BigNumber; seller: BosonTypes.SellerStructOutput }
>;

export type SellerUpdatedEventFilter = TypedEventFilter<SellerUpdatedEvent>;

export interface IBosonAccountHandler extends BaseContract {
  contractName: "IBosonAccountHandler";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBosonAccountHandlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createBuyer(
      _buyer: BosonTypes.BuyerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createSeller(
      _seller: BosonTypes.SellerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBuyer(
      _buyerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BosonTypes.BuyerStructOutput] & {
        exists: boolean;
        buyer: BosonTypes.BuyerStructOutput;
      }
    >;

    getNextAccountId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nextAccountId: BigNumber }>;

    getSeller(
      _sellerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BosonTypes.SellerStructOutput] & {
        exists: boolean;
        seller: BosonTypes.SellerStructOutput;
      }
    >;

    getSellerByAddress(
      _associatedAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BosonTypes.SellerStructOutput] & {
        exists: boolean;
        seller: BosonTypes.SellerStructOutput;
      }
    >;

    updateSeller(
      _seller: BosonTypes.SellerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createBuyer(
    _buyer: BosonTypes.BuyerStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createSeller(
    _seller: BosonTypes.SellerStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBuyer(
    _buyerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BosonTypes.BuyerStructOutput] & {
      exists: boolean;
      buyer: BosonTypes.BuyerStructOutput;
    }
  >;

  getNextAccountId(overrides?: CallOverrides): Promise<BigNumber>;

  getSeller(
    _sellerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BosonTypes.SellerStructOutput] & {
      exists: boolean;
      seller: BosonTypes.SellerStructOutput;
    }
  >;

  getSellerByAddress(
    _associatedAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BosonTypes.SellerStructOutput] & {
      exists: boolean;
      seller: BosonTypes.SellerStructOutput;
    }
  >;

  updateSeller(
    _seller: BosonTypes.SellerStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createBuyer(
      _buyer: BosonTypes.BuyerStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    createSeller(
      _seller: BosonTypes.SellerStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getBuyer(
      _buyerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BosonTypes.BuyerStructOutput] & {
        exists: boolean;
        buyer: BosonTypes.BuyerStructOutput;
      }
    >;

    getNextAccountId(overrides?: CallOverrides): Promise<BigNumber>;

    getSeller(
      _sellerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BosonTypes.SellerStructOutput] & {
        exists: boolean;
        seller: BosonTypes.SellerStructOutput;
      }
    >;

    getSellerByAddress(
      _associatedAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BosonTypes.SellerStructOutput] & {
        exists: boolean;
        seller: BosonTypes.SellerStructOutput;
      }
    >;

    updateSeller(
      _seller: BosonTypes.SellerStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BuyerCreated(uint256,tuple)"(
      buyerId?: BigNumberish | null,
      buyer?: null
    ): BuyerCreatedEventFilter;
    BuyerCreated(
      buyerId?: BigNumberish | null,
      buyer?: null
    ): BuyerCreatedEventFilter;

    "SellerCreated(uint256,tuple)"(
      sellerId?: BigNumberish | null,
      seller?: null
    ): SellerCreatedEventFilter;
    SellerCreated(
      sellerId?: BigNumberish | null,
      seller?: null
    ): SellerCreatedEventFilter;

    "SellerUpdated(uint256,tuple)"(
      sellerId?: BigNumberish | null,
      seller?: null
    ): SellerUpdatedEventFilter;
    SellerUpdated(
      sellerId?: BigNumberish | null,
      seller?: null
    ): SellerUpdatedEventFilter;
  };

  estimateGas: {
    createBuyer(
      _buyer: BosonTypes.BuyerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createSeller(
      _seller: BosonTypes.SellerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBuyer(
      _buyerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextAccountId(overrides?: CallOverrides): Promise<BigNumber>;

    getSeller(
      _sellerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellerByAddress(
      _associatedAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateSeller(
      _seller: BosonTypes.SellerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createBuyer(
      _buyer: BosonTypes.BuyerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createSeller(
      _seller: BosonTypes.SellerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBuyer(
      _buyerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextAccountId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSeller(
      _sellerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSellerByAddress(
      _associatedAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateSeller(
      _seller: BosonTypes.SellerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
