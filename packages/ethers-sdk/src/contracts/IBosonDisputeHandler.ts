/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace BosonTypes {
  export type DisputeStruct = {
    exchangeId: BigNumberish;
    buyerPercent: BigNumberish;
    state: BigNumberish;
  };

  export type DisputeStructOutput = [BigNumber, BigNumber, number] & {
    exchangeId: BigNumber;
    buyerPercent: BigNumber;
    state: number;
  };

  export type DisputeDatesStruct = {
    disputed: BigNumberish;
    escalated: BigNumberish;
    finalized: BigNumberish;
    timeout: BigNumberish;
  };

  export type DisputeDatesStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    disputed: BigNumber;
    escalated: BigNumber;
    finalized: BigNumber;
    timeout: BigNumber;
  };
}

export interface IBosonDisputeHandlerInterface extends utils.Interface {
  contractName: "IBosonDisputeHandler";
  functions: {
    "decideDispute(uint256,uint256)": FunctionFragment;
    "escalateDispute(uint256)": FunctionFragment;
    "expireDispute(uint256)": FunctionFragment;
    "expireDisputeBatch(uint256[])": FunctionFragment;
    "expireEscalatedDispute(uint256)": FunctionFragment;
    "extendDisputeTimeout(uint256,uint256)": FunctionFragment;
    "getDispute(uint256)": FunctionFragment;
    "getDisputeState(uint256)": FunctionFragment;
    "getDisputeTimeout(uint256)": FunctionFragment;
    "isDisputeFinalized(uint256)": FunctionFragment;
    "raiseDispute(uint256)": FunctionFragment;
    "refuseEscalatedDispute(uint256)": FunctionFragment;
    "resolveDispute(uint256,uint256,bytes32,bytes32,uint8)": FunctionFragment;
    "retractDispute(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "decideDispute",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "escalateDispute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "expireDispute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "expireDisputeBatch",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "expireEscalatedDispute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "extendDisputeTimeout",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDispute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDisputeState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDisputeTimeout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isDisputeFinalized",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "raiseDispute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "refuseEscalatedDispute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDispute",
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "retractDispute",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "decideDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escalateDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expireDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expireDisputeBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expireEscalatedDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extendDisputeTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDispute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDisputeState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDisputeTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDisputeFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raiseDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refuseEscalatedDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retractDispute",
    data: BytesLike
  ): Result;

  events: {
    "DisputeDecided(uint256,uint256,address)": EventFragment;
    "DisputeEscalated(uint256,uint256,address)": EventFragment;
    "DisputeExpired(uint256,address)": EventFragment;
    "DisputeRaised(uint256,uint256,uint256,address)": EventFragment;
    "DisputeResolved(uint256,uint256,address)": EventFragment;
    "DisputeRetracted(uint256,address)": EventFragment;
    "DisputeTimeoutExtended(uint256,uint256,address)": EventFragment;
    "EscalatedDisputeExpired(uint256,address)": EventFragment;
    "EscalatedDisputeRefused(uint256,address)": EventFragment;
    "FundsEncumbered(uint256,address,uint256,address)": EventFragment;
    "FundsReleased(uint256,uint256,address,uint256,address)": EventFragment;
    "FundsWithdrawn(uint256,address,address,uint256,address)": EventFragment;
    "ProtocolFeeCollected(uint256,address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DisputeDecided"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeEscalated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeExpired"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeRaised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeResolved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeRetracted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeTimeoutExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EscalatedDisputeExpired"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EscalatedDisputeRefused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsEncumbered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsReleased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolFeeCollected"): EventFragment;
}

export type DisputeDecidedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { exchangeId: BigNumber; _buyerPercent: BigNumber; executedBy: string }
>;

export type DisputeDecidedEventFilter = TypedEventFilter<DisputeDecidedEvent>;

export type DisputeEscalatedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { exchangeId: BigNumber; disputeResolverId: BigNumber; executedBy: string }
>;

export type DisputeEscalatedEventFilter =
  TypedEventFilter<DisputeEscalatedEvent>;

export type DisputeExpiredEvent = TypedEvent<
  [BigNumber, string],
  { exchangeId: BigNumber; executedBy: string }
>;

export type DisputeExpiredEventFilter = TypedEventFilter<DisputeExpiredEvent>;

export type DisputeRaisedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  {
    exchangeId: BigNumber;
    buyerId: BigNumber;
    sellerId: BigNumber;
    executedBy: string;
  }
>;

export type DisputeRaisedEventFilter = TypedEventFilter<DisputeRaisedEvent>;

export type DisputeResolvedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { exchangeId: BigNumber; _buyerPercent: BigNumber; executedBy: string }
>;

export type DisputeResolvedEventFilter = TypedEventFilter<DisputeResolvedEvent>;

export type DisputeRetractedEvent = TypedEvent<
  [BigNumber, string],
  { exchangeId: BigNumber; executedBy: string }
>;

export type DisputeRetractedEventFilter =
  TypedEventFilter<DisputeRetractedEvent>;

export type DisputeTimeoutExtendedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { exchangeId: BigNumber; newDisputeTimeout: BigNumber; executedBy: string }
>;

export type DisputeTimeoutExtendedEventFilter =
  TypedEventFilter<DisputeTimeoutExtendedEvent>;

export type EscalatedDisputeExpiredEvent = TypedEvent<
  [BigNumber, string],
  { exchangeId: BigNumber; executedBy: string }
>;

export type EscalatedDisputeExpiredEventFilter =
  TypedEventFilter<EscalatedDisputeExpiredEvent>;

export type EscalatedDisputeRefusedEvent = TypedEvent<
  [BigNumber, string],
  { exchangeId: BigNumber; executedBy: string }
>;

export type EscalatedDisputeRefusedEventFilter =
  TypedEventFilter<EscalatedDisputeRefusedEvent>;

export type FundsEncumberedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  {
    entityId: BigNumber;
    exchangeToken: string;
    amount: BigNumber;
    executedBy: string;
  }
>;

export type FundsEncumberedEventFilter = TypedEventFilter<FundsEncumberedEvent>;

export type FundsReleasedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, string],
  {
    exchangeId: BigNumber;
    entityId: BigNumber;
    exchangeToken: string;
    amount: BigNumber;
    executedBy: string;
  }
>;

export type FundsReleasedEventFilter = TypedEventFilter<FundsReleasedEvent>;

export type FundsWithdrawnEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, string],
  {
    sellerId: BigNumber;
    withdrawnTo: string;
    tokenAddress: string;
    amount: BigNumber;
    executedBy: string;
  }
>;

export type FundsWithdrawnEventFilter = TypedEventFilter<FundsWithdrawnEvent>;

export type ProtocolFeeCollectedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  {
    exchangeId: BigNumber;
    exchangeToken: string;
    amount: BigNumber;
    executedBy: string;
  }
>;

export type ProtocolFeeCollectedEventFilter =
  TypedEventFilter<ProtocolFeeCollectedEvent>;

export interface IBosonDisputeHandler extends BaseContract {
  contractName: "IBosonDisputeHandler";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBosonDisputeHandlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    decideDispute(
      _exchangeId: BigNumberish,
      _buyerPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    escalateDispute(
      _exchangeId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    expireDispute(
      _exchangeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    expireDisputeBatch(
      _exchangeIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    expireEscalatedDispute(
      _exchangeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    extendDisputeTimeout(
      _exchangeId: BigNumberish,
      _newDisputeTimeout: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDispute(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BosonTypes.DisputeStructOutput,
        BosonTypes.DisputeDatesStructOutput
      ] & {
        exists: boolean;
        dispute: BosonTypes.DisputeStructOutput;
        disputeDates: BosonTypes.DisputeDatesStructOutput;
      }
    >;

    getDisputeState(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, number] & { exists: boolean; state: number }>;

    getDisputeTimeout(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { exists: boolean; timeout: BigNumber }>;

    isDisputeFinalized(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean] & { exists: boolean; isFinalized: boolean }>;

    raiseDispute(
      _exchangeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    refuseEscalatedDispute(
      _exchangeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resolveDispute(
      _exchangeId: BigNumberish,
      _buyerPercent: BigNumberish,
      _sigR: BytesLike,
      _sigS: BytesLike,
      _sigV: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retractDispute(
      _exchangeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  decideDispute(
    _exchangeId: BigNumberish,
    _buyerPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  escalateDispute(
    _exchangeId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  expireDispute(
    _exchangeId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  expireDisputeBatch(
    _exchangeIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  expireEscalatedDispute(
    _exchangeId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  extendDisputeTimeout(
    _exchangeId: BigNumberish,
    _newDisputeTimeout: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDispute(
    _exchangeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BosonTypes.DisputeStructOutput,
      BosonTypes.DisputeDatesStructOutput
    ] & {
      exists: boolean;
      dispute: BosonTypes.DisputeStructOutput;
      disputeDates: BosonTypes.DisputeDatesStructOutput;
    }
  >;

  getDisputeState(
    _exchangeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, number] & { exists: boolean; state: number }>;

  getDisputeTimeout(
    _exchangeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { exists: boolean; timeout: BigNumber }>;

  isDisputeFinalized(
    _exchangeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean] & { exists: boolean; isFinalized: boolean }>;

  raiseDispute(
    _exchangeId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  refuseEscalatedDispute(
    _exchangeId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resolveDispute(
    _exchangeId: BigNumberish,
    _buyerPercent: BigNumberish,
    _sigR: BytesLike,
    _sigS: BytesLike,
    _sigV: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retractDispute(
    _exchangeId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    decideDispute(
      _exchangeId: BigNumberish,
      _buyerPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    escalateDispute(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    expireDispute(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    expireDisputeBatch(
      _exchangeIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    expireEscalatedDispute(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    extendDisputeTimeout(
      _exchangeId: BigNumberish,
      _newDisputeTimeout: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getDispute(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BosonTypes.DisputeStructOutput,
        BosonTypes.DisputeDatesStructOutput
      ] & {
        exists: boolean;
        dispute: BosonTypes.DisputeStructOutput;
        disputeDates: BosonTypes.DisputeDatesStructOutput;
      }
    >;

    getDisputeState(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, number] & { exists: boolean; state: number }>;

    getDisputeTimeout(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { exists: boolean; timeout: BigNumber }>;

    isDisputeFinalized(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean] & { exists: boolean; isFinalized: boolean }>;

    raiseDispute(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    refuseEscalatedDispute(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    resolveDispute(
      _exchangeId: BigNumberish,
      _buyerPercent: BigNumberish,
      _sigR: BytesLike,
      _sigS: BytesLike,
      _sigV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    retractDispute(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DisputeDecided(uint256,uint256,address)"(
      exchangeId?: BigNumberish | null,
      _buyerPercent?: null,
      executedBy?: string | null
    ): DisputeDecidedEventFilter;
    DisputeDecided(
      exchangeId?: BigNumberish | null,
      _buyerPercent?: null,
      executedBy?: string | null
    ): DisputeDecidedEventFilter;

    "DisputeEscalated(uint256,uint256,address)"(
      exchangeId?: BigNumberish | null,
      disputeResolverId?: BigNumberish | null,
      executedBy?: string | null
    ): DisputeEscalatedEventFilter;
    DisputeEscalated(
      exchangeId?: BigNumberish | null,
      disputeResolverId?: BigNumberish | null,
      executedBy?: string | null
    ): DisputeEscalatedEventFilter;

    "DisputeExpired(uint256,address)"(
      exchangeId?: BigNumberish | null,
      executedBy?: string | null
    ): DisputeExpiredEventFilter;
    DisputeExpired(
      exchangeId?: BigNumberish | null,
      executedBy?: string | null
    ): DisputeExpiredEventFilter;

    "DisputeRaised(uint256,uint256,uint256,address)"(
      exchangeId?: BigNumberish | null,
      buyerId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      executedBy?: null
    ): DisputeRaisedEventFilter;
    DisputeRaised(
      exchangeId?: BigNumberish | null,
      buyerId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      executedBy?: null
    ): DisputeRaisedEventFilter;

    "DisputeResolved(uint256,uint256,address)"(
      exchangeId?: BigNumberish | null,
      _buyerPercent?: null,
      executedBy?: string | null
    ): DisputeResolvedEventFilter;
    DisputeResolved(
      exchangeId?: BigNumberish | null,
      _buyerPercent?: null,
      executedBy?: string | null
    ): DisputeResolvedEventFilter;

    "DisputeRetracted(uint256,address)"(
      exchangeId?: BigNumberish | null,
      executedBy?: string | null
    ): DisputeRetractedEventFilter;
    DisputeRetracted(
      exchangeId?: BigNumberish | null,
      executedBy?: string | null
    ): DisputeRetractedEventFilter;

    "DisputeTimeoutExtended(uint256,uint256,address)"(
      exchangeId?: BigNumberish | null,
      newDisputeTimeout?: null,
      executedBy?: string | null
    ): DisputeTimeoutExtendedEventFilter;
    DisputeTimeoutExtended(
      exchangeId?: BigNumberish | null,
      newDisputeTimeout?: null,
      executedBy?: string | null
    ): DisputeTimeoutExtendedEventFilter;

    "EscalatedDisputeExpired(uint256,address)"(
      exchangeId?: BigNumberish | null,
      executedBy?: string | null
    ): EscalatedDisputeExpiredEventFilter;
    EscalatedDisputeExpired(
      exchangeId?: BigNumberish | null,
      executedBy?: string | null
    ): EscalatedDisputeExpiredEventFilter;

    "EscalatedDisputeRefused(uint256,address)"(
      exchangeId?: BigNumberish | null,
      executedBy?: string | null
    ): EscalatedDisputeRefusedEventFilter;
    EscalatedDisputeRefused(
      exchangeId?: BigNumberish | null,
      executedBy?: string | null
    ): EscalatedDisputeRefusedEventFilter;

    "FundsEncumbered(uint256,address,uint256,address)"(
      entityId?: BigNumberish | null,
      exchangeToken?: string | null,
      amount?: null,
      executedBy?: string | null
    ): FundsEncumberedEventFilter;
    FundsEncumbered(
      entityId?: BigNumberish | null,
      exchangeToken?: string | null,
      amount?: null,
      executedBy?: string | null
    ): FundsEncumberedEventFilter;

    "FundsReleased(uint256,uint256,address,uint256,address)"(
      exchangeId?: BigNumberish | null,
      entityId?: BigNumberish | null,
      exchangeToken?: string | null,
      amount?: null,
      executedBy?: null
    ): FundsReleasedEventFilter;
    FundsReleased(
      exchangeId?: BigNumberish | null,
      entityId?: BigNumberish | null,
      exchangeToken?: string | null,
      amount?: null,
      executedBy?: null
    ): FundsReleasedEventFilter;

    "FundsWithdrawn(uint256,address,address,uint256,address)"(
      sellerId?: BigNumberish | null,
      withdrawnTo?: string | null,
      tokenAddress?: string | null,
      amount?: null,
      executedBy?: null
    ): FundsWithdrawnEventFilter;
    FundsWithdrawn(
      sellerId?: BigNumberish | null,
      withdrawnTo?: string | null,
      tokenAddress?: string | null,
      amount?: null,
      executedBy?: null
    ): FundsWithdrawnEventFilter;

    "ProtocolFeeCollected(uint256,address,uint256,address)"(
      exchangeId?: BigNumberish | null,
      exchangeToken?: string | null,
      amount?: null,
      executedBy?: string | null
    ): ProtocolFeeCollectedEventFilter;
    ProtocolFeeCollected(
      exchangeId?: BigNumberish | null,
      exchangeToken?: string | null,
      amount?: null,
      executedBy?: string | null
    ): ProtocolFeeCollectedEventFilter;
  };

  estimateGas: {
    decideDispute(
      _exchangeId: BigNumberish,
      _buyerPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    escalateDispute(
      _exchangeId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    expireDispute(
      _exchangeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    expireDisputeBatch(
      _exchangeIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    expireEscalatedDispute(
      _exchangeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    extendDisputeTimeout(
      _exchangeId: BigNumberish,
      _newDisputeTimeout: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDispute(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDisputeState(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDisputeTimeout(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDisputeFinalized(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    raiseDispute(
      _exchangeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    refuseEscalatedDispute(
      _exchangeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resolveDispute(
      _exchangeId: BigNumberish,
      _buyerPercent: BigNumberish,
      _sigR: BytesLike,
      _sigS: BytesLike,
      _sigV: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retractDispute(
      _exchangeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    decideDispute(
      _exchangeId: BigNumberish,
      _buyerPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    escalateDispute(
      _exchangeId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    expireDispute(
      _exchangeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    expireDisputeBatch(
      _exchangeIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    expireEscalatedDispute(
      _exchangeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    extendDisputeTimeout(
      _exchangeId: BigNumberish,
      _newDisputeTimeout: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDispute(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDisputeState(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDisputeTimeout(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDisputeFinalized(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    raiseDispute(
      _exchangeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    refuseEscalatedDispute(
      _exchangeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resolveDispute(
      _exchangeId: BigNumberish,
      _buyerPercent: BigNumberish,
      _sigR: BytesLike,
      _sigS: BytesLike,
      _sigV: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retractDispute(
      _exchangeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
