/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace BosonTypes {
  export type ExchangeStruct = {
    id: BigNumberish;
    offerId: BigNumberish;
    buyerId: BigNumberish;
    finalizedDate: BigNumberish;
    state: BigNumberish;
    mutualizerAddress: string;
  };

  export type ExchangeStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    string
  ] & {
    id: BigNumber;
    offerId: BigNumber;
    buyerId: BigNumber;
    finalizedDate: BigNumber;
    state: number;
    mutualizerAddress: string;
  };

  export type VoucherStruct = {
    committedDate: BigNumberish;
    validUntilDate: BigNumberish;
    redeemedDate: BigNumberish;
    expired: boolean;
  };

  export type VoucherStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    committedDate: BigNumber;
    validUntilDate: BigNumber;
    redeemedDate: BigNumber;
    expired: boolean;
  };

  export type RoyaltyInfoStruct = { recipients: string[]; bps: BigNumberish[] };

  export type RoyaltyInfoStructOutput = [string[], BigNumber[]] & {
    recipients: string[];
    bps: BigNumber[];
  };

  export type SellerOfferParamsStruct = {
    collectionIndex: BigNumberish;
    royaltyInfo: BosonTypes.RoyaltyInfoStruct;
    mutualizerAddress: string;
  };

  export type SellerOfferParamsStructOutput = [
    BigNumber,
    BosonTypes.RoyaltyInfoStructOutput,
    string
  ] & {
    collectionIndex: BigNumber;
    royaltyInfo: BosonTypes.RoyaltyInfoStructOutput;
    mutualizerAddress: string;
  };

  export type OfferStruct = {
    id: BigNumberish;
    sellerId: BigNumberish;
    price: BigNumberish;
    sellerDeposit: BigNumberish;
    buyerCancelPenalty: BigNumberish;
    quantityAvailable: BigNumberish;
    exchangeToken: string;
    priceType: BigNumberish;
    creator: BigNumberish;
    metadataUri: string;
    metadataHash: string;
    voided: boolean;
    collectionIndex: BigNumberish;
    royaltyInfo: BosonTypes.RoyaltyInfoStruct[];
    buyerId: BigNumberish;
  };

  export type OfferStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    number,
    number,
    string,
    string,
    boolean,
    BigNumber,
    BosonTypes.RoyaltyInfoStructOutput[],
    BigNumber
  ] & {
    id: BigNumber;
    sellerId: BigNumber;
    price: BigNumber;
    sellerDeposit: BigNumber;
    buyerCancelPenalty: BigNumber;
    quantityAvailable: BigNumber;
    exchangeToken: string;
    priceType: number;
    creator: number;
    metadataUri: string;
    metadataHash: string;
    voided: boolean;
    collectionIndex: BigNumber;
    royaltyInfo: BosonTypes.RoyaltyInfoStructOutput[];
    buyerId: BigNumber;
  };

  export type OfferDatesStruct = {
    validFrom: BigNumberish;
    validUntil: BigNumberish;
    voucherRedeemableFrom: BigNumberish;
    voucherRedeemableUntil: BigNumberish;
  };

  export type OfferDatesStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    validFrom: BigNumber;
    validUntil: BigNumber;
    voucherRedeemableFrom: BigNumber;
    voucherRedeemableUntil: BigNumber;
  };

  export type OfferDurationsStruct = {
    disputePeriod: BigNumberish;
    voucherValid: BigNumberish;
    resolutionPeriod: BigNumberish;
  };

  export type OfferDurationsStructOutput = [BigNumber, BigNumber, BigNumber] & {
    disputePeriod: BigNumber;
    voucherValid: BigNumber;
    resolutionPeriod: BigNumber;
  };

  export type DRParametersStruct = {
    disputeResolverId: BigNumberish;
    mutualizerAddress: string;
  };

  export type DRParametersStructOutput = [BigNumber, string] & {
    disputeResolverId: BigNumber;
    mutualizerAddress: string;
  };

  export type ConditionStruct = {
    method: BigNumberish;
    tokenType: BigNumberish;
    tokenAddress: string;
    gating: BigNumberish;
    minTokenId: BigNumberish;
    threshold: BigNumberish;
    maxCommits: BigNumberish;
    maxTokenId: BigNumberish;
  };

  export type ConditionStructOutput = [
    number,
    number,
    string,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    method: number;
    tokenType: number;
    tokenAddress: string;
    gating: number;
    minTokenId: BigNumber;
    threshold: BigNumber;
    maxCommits: BigNumber;
    maxTokenId: BigNumber;
  };

  export type FullOfferStruct = {
    offer: BosonTypes.OfferStruct;
    offerDates: BosonTypes.OfferDatesStruct;
    offerDurations: BosonTypes.OfferDurationsStruct;
    drParameters: BosonTypes.DRParametersStruct;
    condition: BosonTypes.ConditionStruct;
    agentId: BigNumberish;
    feeLimit: BigNumberish;
    useDepositedFunds: boolean;
  };

  export type FullOfferStructOutput = [
    BosonTypes.OfferStructOutput,
    BosonTypes.OfferDatesStructOutput,
    BosonTypes.OfferDurationsStructOutput,
    BosonTypes.DRParametersStructOutput,
    BosonTypes.ConditionStructOutput,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    offer: BosonTypes.OfferStructOutput;
    offerDates: BosonTypes.OfferDatesStructOutput;
    offerDurations: BosonTypes.OfferDurationsStructOutput;
    drParameters: BosonTypes.DRParametersStructOutput;
    condition: BosonTypes.ConditionStructOutput;
    agentId: BigNumber;
    feeLimit: BigNumber;
    useDepositedFunds: boolean;
  };
}

export interface IBosonExchangeCommitHandlerInterface extends utils.Interface {
  contractName: "IBosonExchangeCommitHandler";
  functions: {
    "commitToBuyerOffer(uint256,(uint256,(address[],uint256[]),address))": FunctionFragment;
    "commitToConditionalOffer(address,uint256,uint256)": FunctionFragment;
    "commitToOffer(address,uint256)": FunctionFragment;
    "createOfferAndCommit(((uint256,uint256,uint256,uint256,uint256,uint256,address,uint8,uint8,string,string,bool,uint256,(address[],uint256[])[],uint256),(uint256,uint256,uint256,uint256),(uint256,uint256,uint256),(uint256,address),(uint8,uint8,address,uint8,uint256,uint256,uint256,uint256),uint256,uint256,bool),address,address,bytes,uint256,(uint256,(address[],uint256[]),address))": FunctionFragment;
    "isEligibleToCommit(address,uint256,uint256)": FunctionFragment;
    "onPremintedVoucherTransferred(uint256,address,address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "commitToBuyerOffer",
    values: [BigNumberish, BosonTypes.SellerOfferParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "commitToConditionalOffer",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commitToOffer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createOfferAndCommit",
    values: [
      BosonTypes.FullOfferStruct,
      string,
      string,
      BytesLike,
      BigNumberish,
      BosonTypes.SellerOfferParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isEligibleToCommit",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onPremintedVoucherTransferred",
    values: [BigNumberish, string, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "commitToBuyerOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitToConditionalOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitToOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOfferAndCommit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEligibleToCommit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onPremintedVoucherTransferred",
    data: BytesLike
  ): Result;

  events: {
    "BuyerCommitted(uint256,uint256,uint256,tuple,tuple,address)": EventFragment;
    "BuyerInitiatedOfferSetSellerParams(uint256,uint256,tuple,address)": EventFragment;
    "ConditionalCommitAuthorized(uint256,uint8,address,uint256,uint256,uint256)": EventFragment;
    "DRFeeRequested(uint256,address,uint256,address,address)": EventFragment;
    "DRFeeReturned(uint256,address,uint256,address,address)": EventFragment;
    "ExchangeCompleted(uint256,uint256,uint256,address)": EventFragment;
    "FundsEncumbered(uint256,address,uint256,address)": EventFragment;
    "FundsReleased(uint256,uint256,address,uint256,address)": EventFragment;
    "FundsWithdrawn(uint256,address,address,uint256,address)": EventFragment;
    "ProtocolFeeCollected(uint256,address,uint256,address)": EventFragment;
    "SellerCommitted(uint256,uint256,uint256,tuple,tuple,address)": EventFragment;
    "VoucherCanceled(uint256,uint256,address)": EventFragment;
    "VoucherExpired(uint256,uint256,address)": EventFragment;
    "VoucherExtended(uint256,uint256,uint256,address)": EventFragment;
    "VoucherRedeemed(uint256,uint256,address)": EventFragment;
    "VoucherRevoked(uint256,uint256,address)": EventFragment;
    "VoucherTransferred(uint256,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BuyerCommitted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BuyerInitiatedOfferSetSellerParams"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ConditionalCommitAuthorized"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DRFeeRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DRFeeReturned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsEncumbered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsReleased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolFeeCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellerCommitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoucherCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoucherExpired"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoucherExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoucherRedeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoucherRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoucherTransferred"): EventFragment;
}

export type BuyerCommittedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    BosonTypes.ExchangeStructOutput,
    BosonTypes.VoucherStructOutput,
    string
  ],
  {
    offerId: BigNumber;
    buyerId: BigNumber;
    exchangeId: BigNumber;
    exchange: BosonTypes.ExchangeStructOutput;
    voucher: BosonTypes.VoucherStructOutput;
    executedBy: string;
  }
>;

export type BuyerCommittedEventFilter = TypedEventFilter<BuyerCommittedEvent>;

export type BuyerInitiatedOfferSetSellerParamsEvent = TypedEvent<
  [BigNumber, BigNumber, BosonTypes.SellerOfferParamsStructOutput, string],
  {
    offerId: BigNumber;
    sellerId: BigNumber;
    sellerParams: BosonTypes.SellerOfferParamsStructOutput;
    executedBy: string;
  }
>;

export type BuyerInitiatedOfferSetSellerParamsEventFilter =
  TypedEventFilter<BuyerInitiatedOfferSetSellerParamsEvent>;

export type ConditionalCommitAuthorizedEvent = TypedEvent<
  [BigNumber, number, string, BigNumber, BigNumber, BigNumber],
  {
    offerId: BigNumber;
    gating: number;
    buyerAddress: string;
    tokenId: BigNumber;
    commitCount: BigNumber;
    maxCommits: BigNumber;
  }
>;

export type ConditionalCommitAuthorizedEventFilter =
  TypedEventFilter<ConditionalCommitAuthorizedEvent>;

export type DRFeeRequestedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, string],
  {
    exchangeId: BigNumber;
    tokenAddress: string;
    feeAmount: BigNumber;
    mutualizerAddress: string;
    executedBy: string;
  }
>;

export type DRFeeRequestedEventFilter = TypedEventFilter<DRFeeRequestedEvent>;

export type DRFeeReturnedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, string],
  {
    exchangeId: BigNumber;
    tokenAddress: string;
    returnAmount: BigNumber;
    mutualizerAddress: string;
    executedBy: string;
  }
>;

export type DRFeeReturnedEventFilter = TypedEventFilter<DRFeeReturnedEvent>;

export type ExchangeCompletedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  {
    offerId: BigNumber;
    buyerId: BigNumber;
    exchangeId: BigNumber;
    executedBy: string;
  }
>;

export type ExchangeCompletedEventFilter =
  TypedEventFilter<ExchangeCompletedEvent>;

export type FundsEncumberedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  {
    entityId: BigNumber;
    exchangeToken: string;
    amount: BigNumber;
    executedBy: string;
  }
>;

export type FundsEncumberedEventFilter = TypedEventFilter<FundsEncumberedEvent>;

export type FundsReleasedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, string],
  {
    exchangeId: BigNumber;
    entityId: BigNumber;
    exchangeToken: string;
    amount: BigNumber;
    executedBy: string;
  }
>;

export type FundsReleasedEventFilter = TypedEventFilter<FundsReleasedEvent>;

export type FundsWithdrawnEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, string],
  {
    sellerId: BigNumber;
    withdrawnTo: string;
    tokenAddress: string;
    amount: BigNumber;
    executedBy: string;
  }
>;

export type FundsWithdrawnEventFilter = TypedEventFilter<FundsWithdrawnEvent>;

export type ProtocolFeeCollectedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  {
    exchangeId: BigNumber;
    exchangeToken: string;
    amount: BigNumber;
    executedBy: string;
  }
>;

export type ProtocolFeeCollectedEventFilter =
  TypedEventFilter<ProtocolFeeCollectedEvent>;

export type SellerCommittedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    BosonTypes.ExchangeStructOutput,
    BosonTypes.VoucherStructOutput,
    string
  ],
  {
    offerId: BigNumber;
    sellerId: BigNumber;
    exchangeId: BigNumber;
    exchange: BosonTypes.ExchangeStructOutput;
    voucher: BosonTypes.VoucherStructOutput;
    executedBy: string;
  }
>;

export type SellerCommittedEventFilter = TypedEventFilter<SellerCommittedEvent>;

export type VoucherCanceledEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { offerId: BigNumber; exchangeId: BigNumber; executedBy: string }
>;

export type VoucherCanceledEventFilter = TypedEventFilter<VoucherCanceledEvent>;

export type VoucherExpiredEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { offerId: BigNumber; exchangeId: BigNumber; executedBy: string }
>;

export type VoucherExpiredEventFilter = TypedEventFilter<VoucherExpiredEvent>;

export type VoucherExtendedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  {
    offerId: BigNumber;
    exchangeId: BigNumber;
    validUntil: BigNumber;
    executedBy: string;
  }
>;

export type VoucherExtendedEventFilter = TypedEventFilter<VoucherExtendedEvent>;

export type VoucherRedeemedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { offerId: BigNumber; exchangeId: BigNumber; executedBy: string }
>;

export type VoucherRedeemedEventFilter = TypedEventFilter<VoucherRedeemedEvent>;

export type VoucherRevokedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { offerId: BigNumber; exchangeId: BigNumber; executedBy: string }
>;

export type VoucherRevokedEventFilter = TypedEventFilter<VoucherRevokedEvent>;

export type VoucherTransferredEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  {
    offerId: BigNumber;
    exchangeId: BigNumber;
    newBuyerId: BigNumber;
    executedBy: string;
  }
>;

export type VoucherTransferredEventFilter =
  TypedEventFilter<VoucherTransferredEvent>;

export interface IBosonExchangeCommitHandler extends BaseContract {
  contractName: "IBosonExchangeCommitHandler";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBosonExchangeCommitHandlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    commitToBuyerOffer(
      _offerId: BigNumberish,
      _sellerParams: BosonTypes.SellerOfferParamsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commitToConditionalOffer(
      _buyer: string,
      _offerId: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commitToOffer(
      _buyer: string,
      _offerId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createOfferAndCommit(
      _fullOffer: BosonTypes.FullOfferStruct,
      _offerCreator: string,
      _committer: string,
      _signature: BytesLike,
      _conditionalTokenId: BigNumberish,
      _sellerParams: BosonTypes.SellerOfferParamsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isEligibleToCommit(
      _buyer: string,
      _offerId: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        isEligible: boolean;
        commitCount: BigNumber;
        maxCommits: BigNumber;
      }
    >;

    onPremintedVoucherTransferred(
      _tokenId: BigNumberish,
      _to: string,
      _from: string,
      _rangeOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  commitToBuyerOffer(
    _offerId: BigNumberish,
    _sellerParams: BosonTypes.SellerOfferParamsStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commitToConditionalOffer(
    _buyer: string,
    _offerId: BigNumberish,
    _tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commitToOffer(
    _buyer: string,
    _offerId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createOfferAndCommit(
    _fullOffer: BosonTypes.FullOfferStruct,
    _offerCreator: string,
    _committer: string,
    _signature: BytesLike,
    _conditionalTokenId: BigNumberish,
    _sellerParams: BosonTypes.SellerOfferParamsStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isEligibleToCommit(
    _buyer: string,
    _offerId: BigNumberish,
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      isEligible: boolean;
      commitCount: BigNumber;
      maxCommits: BigNumber;
    }
  >;

  onPremintedVoucherTransferred(
    _tokenId: BigNumberish,
    _to: string,
    _from: string,
    _rangeOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    commitToBuyerOffer(
      _offerId: BigNumberish,
      _sellerParams: BosonTypes.SellerOfferParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    commitToConditionalOffer(
      _buyer: string,
      _offerId: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    commitToOffer(
      _buyer: string,
      _offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createOfferAndCommit(
      _fullOffer: BosonTypes.FullOfferStruct,
      _offerCreator: string,
      _committer: string,
      _signature: BytesLike,
      _conditionalTokenId: BigNumberish,
      _sellerParams: BosonTypes.SellerOfferParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    isEligibleToCommit(
      _buyer: string,
      _offerId: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        isEligible: boolean;
        commitCount: BigNumber;
        maxCommits: BigNumber;
      }
    >;

    onPremintedVoucherTransferred(
      _tokenId: BigNumberish,
      _to: string,
      _from: string,
      _rangeOwner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "BuyerCommitted(uint256,uint256,uint256,tuple,tuple,address)"(
      offerId?: BigNumberish | null,
      buyerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      exchange?: null,
      voucher?: null,
      executedBy?: null
    ): BuyerCommittedEventFilter;
    BuyerCommitted(
      offerId?: BigNumberish | null,
      buyerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      exchange?: null,
      voucher?: null,
      executedBy?: null
    ): BuyerCommittedEventFilter;

    "BuyerInitiatedOfferSetSellerParams(uint256,uint256,tuple,address)"(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      sellerParams?: null,
      executedBy?: null
    ): BuyerInitiatedOfferSetSellerParamsEventFilter;
    BuyerInitiatedOfferSetSellerParams(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      sellerParams?: null,
      executedBy?: null
    ): BuyerInitiatedOfferSetSellerParamsEventFilter;

    "ConditionalCommitAuthorized(uint256,uint8,address,uint256,uint256,uint256)"(
      offerId?: BigNumberish | null,
      gating?: null,
      buyerAddress?: string | null,
      tokenId?: BigNumberish | null,
      commitCount?: null,
      maxCommits?: null
    ): ConditionalCommitAuthorizedEventFilter;
    ConditionalCommitAuthorized(
      offerId?: BigNumberish | null,
      gating?: null,
      buyerAddress?: string | null,
      tokenId?: BigNumberish | null,
      commitCount?: null,
      maxCommits?: null
    ): ConditionalCommitAuthorizedEventFilter;

    "DRFeeRequested(uint256,address,uint256,address,address)"(
      exchangeId?: BigNumberish | null,
      tokenAddress?: string | null,
      feeAmount?: null,
      mutualizerAddress?: string | null,
      executedBy?: null
    ): DRFeeRequestedEventFilter;
    DRFeeRequested(
      exchangeId?: BigNumberish | null,
      tokenAddress?: string | null,
      feeAmount?: null,
      mutualizerAddress?: string | null,
      executedBy?: null
    ): DRFeeRequestedEventFilter;

    "DRFeeReturned(uint256,address,uint256,address,address)"(
      exchangeId?: BigNumberish | null,
      tokenAddress?: string | null,
      returnAmount?: null,
      mutualizerAddress?: null,
      executedBy?: null
    ): DRFeeReturnedEventFilter;
    DRFeeReturned(
      exchangeId?: BigNumberish | null,
      tokenAddress?: string | null,
      returnAmount?: null,
      mutualizerAddress?: null,
      executedBy?: null
    ): DRFeeReturnedEventFilter;

    "ExchangeCompleted(uint256,uint256,uint256,address)"(
      offerId?: BigNumberish | null,
      buyerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      executedBy?: null
    ): ExchangeCompletedEventFilter;
    ExchangeCompleted(
      offerId?: BigNumberish | null,
      buyerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      executedBy?: null
    ): ExchangeCompletedEventFilter;

    "FundsEncumbered(uint256,address,uint256,address)"(
      entityId?: BigNumberish | null,
      exchangeToken?: string | null,
      amount?: null,
      executedBy?: string | null
    ): FundsEncumberedEventFilter;
    FundsEncumbered(
      entityId?: BigNumberish | null,
      exchangeToken?: string | null,
      amount?: null,
      executedBy?: string | null
    ): FundsEncumberedEventFilter;

    "FundsReleased(uint256,uint256,address,uint256,address)"(
      exchangeId?: BigNumberish | null,
      entityId?: BigNumberish | null,
      exchangeToken?: string | null,
      amount?: null,
      executedBy?: null
    ): FundsReleasedEventFilter;
    FundsReleased(
      exchangeId?: BigNumberish | null,
      entityId?: BigNumberish | null,
      exchangeToken?: string | null,
      amount?: null,
      executedBy?: null
    ): FundsReleasedEventFilter;

    "FundsWithdrawn(uint256,address,address,uint256,address)"(
      sellerId?: BigNumberish | null,
      withdrawnTo?: string | null,
      tokenAddress?: string | null,
      amount?: null,
      executedBy?: null
    ): FundsWithdrawnEventFilter;
    FundsWithdrawn(
      sellerId?: BigNumberish | null,
      withdrawnTo?: string | null,
      tokenAddress?: string | null,
      amount?: null,
      executedBy?: null
    ): FundsWithdrawnEventFilter;

    "ProtocolFeeCollected(uint256,address,uint256,address)"(
      exchangeId?: BigNumberish | null,
      exchangeToken?: string | null,
      amount?: null,
      executedBy?: string | null
    ): ProtocolFeeCollectedEventFilter;
    ProtocolFeeCollected(
      exchangeId?: BigNumberish | null,
      exchangeToken?: string | null,
      amount?: null,
      executedBy?: string | null
    ): ProtocolFeeCollectedEventFilter;

    "SellerCommitted(uint256,uint256,uint256,tuple,tuple,address)"(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      exchange?: null,
      voucher?: null,
      executedBy?: null
    ): SellerCommittedEventFilter;
    SellerCommitted(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      exchange?: null,
      voucher?: null,
      executedBy?: null
    ): SellerCommittedEventFilter;

    "VoucherCanceled(uint256,uint256,address)"(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      executedBy?: string | null
    ): VoucherCanceledEventFilter;
    VoucherCanceled(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      executedBy?: string | null
    ): VoucherCanceledEventFilter;

    "VoucherExpired(uint256,uint256,address)"(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      executedBy?: string | null
    ): VoucherExpiredEventFilter;
    VoucherExpired(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      executedBy?: string | null
    ): VoucherExpiredEventFilter;

    "VoucherExtended(uint256,uint256,uint256,address)"(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      validUntil?: null,
      executedBy?: string | null
    ): VoucherExtendedEventFilter;
    VoucherExtended(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      validUntil?: null,
      executedBy?: string | null
    ): VoucherExtendedEventFilter;

    "VoucherRedeemed(uint256,uint256,address)"(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      executedBy?: string | null
    ): VoucherRedeemedEventFilter;
    VoucherRedeemed(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      executedBy?: string | null
    ): VoucherRedeemedEventFilter;

    "VoucherRevoked(uint256,uint256,address)"(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      executedBy?: string | null
    ): VoucherRevokedEventFilter;
    VoucherRevoked(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      executedBy?: string | null
    ): VoucherRevokedEventFilter;

    "VoucherTransferred(uint256,uint256,uint256,address)"(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      newBuyerId?: BigNumberish | null,
      executedBy?: null
    ): VoucherTransferredEventFilter;
    VoucherTransferred(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      newBuyerId?: BigNumberish | null,
      executedBy?: null
    ): VoucherTransferredEventFilter;
  };

  estimateGas: {
    commitToBuyerOffer(
      _offerId: BigNumberish,
      _sellerParams: BosonTypes.SellerOfferParamsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commitToConditionalOffer(
      _buyer: string,
      _offerId: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commitToOffer(
      _buyer: string,
      _offerId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createOfferAndCommit(
      _fullOffer: BosonTypes.FullOfferStruct,
      _offerCreator: string,
      _committer: string,
      _signature: BytesLike,
      _conditionalTokenId: BigNumberish,
      _sellerParams: BosonTypes.SellerOfferParamsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isEligibleToCommit(
      _buyer: string,
      _offerId: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onPremintedVoucherTransferred(
      _tokenId: BigNumberish,
      _to: string,
      _from: string,
      _rangeOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    commitToBuyerOffer(
      _offerId: BigNumberish,
      _sellerParams: BosonTypes.SellerOfferParamsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commitToConditionalOffer(
      _buyer: string,
      _offerId: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commitToOffer(
      _buyer: string,
      _offerId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createOfferAndCommit(
      _fullOffer: BosonTypes.FullOfferStruct,
      _offerCreator: string,
      _committer: string,
      _signature: BytesLike,
      _conditionalTokenId: BigNumberish,
      _sellerParams: BosonTypes.SellerOfferParamsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isEligibleToCommit(
      _buyer: string,
      _offerId: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onPremintedVoucherTransferred(
      _tokenId: BigNumberish,
      _to: string,
      _from: string,
      _rangeOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
