/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace BosonTypes {
  export type ExchangeStruct = {
    id: BigNumberish;
    offerId: BigNumberish;
    buyerId: BigNumberish;
    finalizedDate: BigNumberish;
    state: BigNumberish;
  };

  export type ExchangeStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number
  ] & {
    id: BigNumber;
    offerId: BigNumber;
    buyerId: BigNumber;
    finalizedDate: BigNumber;
    state: number;
  };

  export type VoucherStruct = {
    committedDate: BigNumberish;
    validUntilDate: BigNumberish;
    redeemedDate: BigNumberish;
    expired: boolean;
  };

  export type VoucherStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    committedDate: BigNumber;
    validUntilDate: BigNumber;
    redeemedDate: BigNumber;
    expired: boolean;
  };

  export type TwinStruct = {
    id: BigNumberish;
    sellerId: BigNumberish;
    amount: BigNumberish;
    supplyAvailable: BigNumberish;
    tokenId: BigNumberish;
    tokenAddress: string;
    tokenType: BigNumberish;
  };

  export type TwinStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    number
  ] & {
    id: BigNumber;
    sellerId: BigNumber;
    amount: BigNumber;
    supplyAvailable: BigNumber;
    tokenId: BigNumber;
    tokenAddress: string;
    tokenType: number;
  };

  export type OfferFeesStruct = {
    protocolFee: BigNumberish;
    agentFee: BigNumberish;
  };

  export type OfferFeesStructOutput = [BigNumber, BigNumber] & {
    protocolFee: BigNumber;
    agentFee: BigNumber;
  };

  export type ConditionStruct = {
    method: BigNumberish;
    tokenType: BigNumberish;
    tokenAddress: string;
    tokenId: BigNumberish;
    threshold: BigNumberish;
    maxCommits: BigNumberish;
  };

  export type ConditionStructOutput = [
    number,
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    method: number;
    tokenType: number;
    tokenAddress: string;
    tokenId: BigNumber;
    threshold: BigNumber;
    maxCommits: BigNumber;
  };

  export type TwinReceiptStruct = {
    twinId: BigNumberish;
    tokenId: BigNumberish;
    amount: BigNumberish;
    tokenAddress: string;
    tokenType: BigNumberish;
  };

  export type TwinReceiptStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    number
  ] & {
    twinId: BigNumber;
    tokenId: BigNumber;
    amount: BigNumber;
    tokenAddress: string;
    tokenType: number;
  };

  export type ReceiptStruct = {
    exchangeId: BigNumberish;
    offerId: BigNumberish;
    buyerId: BigNumberish;
    sellerId: BigNumberish;
    price: BigNumberish;
    sellerDeposit: BigNumberish;
    buyerCancelPenalty: BigNumberish;
    offerFees: BosonTypes.OfferFeesStruct;
    agentId: BigNumberish;
    exchangeToken: string;
    finalizedDate: BigNumberish;
    condition: BosonTypes.ConditionStruct;
    committedDate: BigNumberish;
    redeemedDate: BigNumberish;
    voucherExpired: boolean;
    disputeResolverId: BigNumberish;
    disputedDate: BigNumberish;
    escalatedDate: BigNumberish;
    disputeState: BigNumberish;
    twinReceipts: BosonTypes.TwinReceiptStruct[];
  };

  export type ReceiptStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BosonTypes.OfferFeesStructOutput,
    BigNumber,
    string,
    BigNumber,
    BosonTypes.ConditionStructOutput,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    BosonTypes.TwinReceiptStructOutput[]
  ] & {
    exchangeId: BigNumber;
    offerId: BigNumber;
    buyerId: BigNumber;
    sellerId: BigNumber;
    price: BigNumber;
    sellerDeposit: BigNumber;
    buyerCancelPenalty: BigNumber;
    offerFees: BosonTypes.OfferFeesStructOutput;
    agentId: BigNumber;
    exchangeToken: string;
    finalizedDate: BigNumber;
    condition: BosonTypes.ConditionStructOutput;
    committedDate: BigNumber;
    redeemedDate: BigNumber;
    voucherExpired: boolean;
    disputeResolverId: BigNumber;
    disputedDate: BigNumber;
    escalatedDate: BigNumber;
    disputeState: number;
    twinReceipts: BosonTypes.TwinReceiptStructOutput[];
  };
}

export interface IBosonExchangeHandlerInterface extends utils.Interface {
  contractName: "IBosonExchangeHandler";
  functions: {
    "cancelVoucher(uint256)": FunctionFragment;
    "commitToOffer(address,uint256)": FunctionFragment;
    "completeExchange(uint256)": FunctionFragment;
    "completeExchangeBatch(uint256[])": FunctionFragment;
    "expireVoucher(uint256)": FunctionFragment;
    "extendVoucher(uint256,uint256)": FunctionFragment;
    "getExchange(uint256)": FunctionFragment;
    "getExchangeState(uint256)": FunctionFragment;
    "getNextExchangeId()": FunctionFragment;
    "getReceipt(uint256)": FunctionFragment;
    "isExchangeFinalized(uint256)": FunctionFragment;
    "onVoucherTransferred(uint256,address)": FunctionFragment;
    "redeemVoucher(uint256)": FunctionFragment;
    "revokeVoucher(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancelVoucher",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commitToOffer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeExchange",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeExchangeBatch",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "expireVoucher",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "extendVoucher",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getExchange",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getExchangeState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextExchangeId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReceipt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isExchangeFinalized",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onVoucherTransferred",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemVoucher",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeVoucher",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelVoucher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitToOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeExchangeBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expireVoucher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extendVoucher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchangeState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextExchangeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReceipt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isExchangeFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onVoucherTransferred",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemVoucher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeVoucher",
    data: BytesLike
  ): Result;

  events: {
    "BuyerCommitted(uint256,uint256,uint256,tuple,tuple,address)": EventFragment;
    "ExchangeCompleted(uint256,uint256,uint256,address)": EventFragment;
    "FundsEncumbered(uint256,address,uint256,address)": EventFragment;
    "FundsReleased(uint256,uint256,address,uint256,address)": EventFragment;
    "FundsWithdrawn(uint256,address,address,uint256,address)": EventFragment;
    "ProtocolFeeCollected(uint256,address,uint256,address)": EventFragment;
    "TwinCreated(uint256,uint256,tuple,address)": EventFragment;
    "TwinDeleted(uint256,uint256,address)": EventFragment;
    "TwinTransferFailed(uint256,address,uint256,uint256,uint256,address)": EventFragment;
    "TwinTransferred(uint256,address,uint256,uint256,uint256,address)": EventFragment;
    "VoucherCanceled(uint256,uint256,address)": EventFragment;
    "VoucherExpired(uint256,uint256,address)": EventFragment;
    "VoucherExtended(uint256,uint256,uint256,address)": EventFragment;
    "VoucherRedeemed(uint256,uint256,address)": EventFragment;
    "VoucherRevoked(uint256,uint256,address)": EventFragment;
    "VoucherTransferred(uint256,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BuyerCommitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsEncumbered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsReleased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolFeeCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TwinCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TwinDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TwinTransferFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TwinTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoucherCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoucherExpired"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoucherExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoucherRedeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoucherRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoucherTransferred"): EventFragment;
}

export type BuyerCommittedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    BosonTypes.ExchangeStructOutput,
    BosonTypes.VoucherStructOutput,
    string
  ],
  {
    offerId: BigNumber;
    buyerId: BigNumber;
    exchangeId: BigNumber;
    exchange: BosonTypes.ExchangeStructOutput;
    voucher: BosonTypes.VoucherStructOutput;
    executedBy: string;
  }
>;

export type BuyerCommittedEventFilter = TypedEventFilter<BuyerCommittedEvent>;

export type ExchangeCompletedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  {
    offerId: BigNumber;
    buyerId: BigNumber;
    exchangeId: BigNumber;
    executedBy: string;
  }
>;

export type ExchangeCompletedEventFilter =
  TypedEventFilter<ExchangeCompletedEvent>;

export type FundsEncumberedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  {
    entityId: BigNumber;
    exchangeToken: string;
    amount: BigNumber;
    executedBy: string;
  }
>;

export type FundsEncumberedEventFilter = TypedEventFilter<FundsEncumberedEvent>;

export type FundsReleasedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, string],
  {
    exchangeId: BigNumber;
    entityId: BigNumber;
    exchangeToken: string;
    amount: BigNumber;
    executedBy: string;
  }
>;

export type FundsReleasedEventFilter = TypedEventFilter<FundsReleasedEvent>;

export type FundsWithdrawnEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, string],
  {
    sellerId: BigNumber;
    withdrawnTo: string;
    tokenAddress: string;
    amount: BigNumber;
    executedBy: string;
  }
>;

export type FundsWithdrawnEventFilter = TypedEventFilter<FundsWithdrawnEvent>;

export type ProtocolFeeCollectedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  {
    exchangeId: BigNumber;
    exchangeToken: string;
    amount: BigNumber;
    executedBy: string;
  }
>;

export type ProtocolFeeCollectedEventFilter =
  TypedEventFilter<ProtocolFeeCollectedEvent>;

export type TwinCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, BosonTypes.TwinStructOutput, string],
  {
    twinId: BigNumber;
    sellerId: BigNumber;
    twin: BosonTypes.TwinStructOutput;
    executedBy: string;
  }
>;

export type TwinCreatedEventFilter = TypedEventFilter<TwinCreatedEvent>;

export type TwinDeletedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { twinId: BigNumber; sellerId: BigNumber; executedBy: string }
>;

export type TwinDeletedEventFilter = TypedEventFilter<TwinDeletedEvent>;

export type TwinTransferFailedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber, string],
  {
    twinId: BigNumber;
    tokenAddress: string;
    exchangeId: BigNumber;
    tokenId: BigNumber;
    amount: BigNumber;
    executedBy: string;
  }
>;

export type TwinTransferFailedEventFilter =
  TypedEventFilter<TwinTransferFailedEvent>;

export type TwinTransferredEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber, string],
  {
    twinId: BigNumber;
    tokenAddress: string;
    exchangeId: BigNumber;
    tokenId: BigNumber;
    amount: BigNumber;
    executedBy: string;
  }
>;

export type TwinTransferredEventFilter = TypedEventFilter<TwinTransferredEvent>;

export type VoucherCanceledEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { offerId: BigNumber; exchangeId: BigNumber; executedBy: string }
>;

export type VoucherCanceledEventFilter = TypedEventFilter<VoucherCanceledEvent>;

export type VoucherExpiredEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { offerId: BigNumber; exchangeId: BigNumber; executedBy: string }
>;

export type VoucherExpiredEventFilter = TypedEventFilter<VoucherExpiredEvent>;

export type VoucherExtendedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  {
    offerId: BigNumber;
    exchangeId: BigNumber;
    validUntil: BigNumber;
    executedBy: string;
  }
>;

export type VoucherExtendedEventFilter = TypedEventFilter<VoucherExtendedEvent>;

export type VoucherRedeemedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { offerId: BigNumber; exchangeId: BigNumber; executedBy: string }
>;

export type VoucherRedeemedEventFilter = TypedEventFilter<VoucherRedeemedEvent>;

export type VoucherRevokedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { offerId: BigNumber; exchangeId: BigNumber; executedBy: string }
>;

export type VoucherRevokedEventFilter = TypedEventFilter<VoucherRevokedEvent>;

export type VoucherTransferredEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  {
    offerId: BigNumber;
    exchangeId: BigNumber;
    newBuyerId: BigNumber;
    executedBy: string;
  }
>;

export type VoucherTransferredEventFilter =
  TypedEventFilter<VoucherTransferredEvent>;

export interface IBosonExchangeHandler extends BaseContract {
  contractName: "IBosonExchangeHandler";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBosonExchangeHandlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelVoucher(
      _exchangeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commitToOffer(
      _buyer: string,
      _offerId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    completeExchange(
      _exchangeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    completeExchangeBatch(
      _exchangeIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    expireVoucher(
      _exchangeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    extendVoucher(
      _exchangeId: BigNumberish,
      _validUntilDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getExchange(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BosonTypes.ExchangeStructOutput,
        BosonTypes.VoucherStructOutput
      ] & {
        exists: boolean;
        exchange: BosonTypes.ExchangeStructOutput;
        voucher: BosonTypes.VoucherStructOutput;
      }
    >;

    getExchangeState(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, number] & { exists: boolean; state: number }>;

    getNextExchangeId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nextExchangeId: BigNumber }>;

    getReceipt(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BosonTypes.ReceiptStructOutput] & {
        receipt: BosonTypes.ReceiptStructOutput;
      }
    >;

    isExchangeFinalized(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean] & { exists: boolean; isFinalized: boolean }>;

    onVoucherTransferred(
      _exchangeId: BigNumberish,
      _newBuyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemVoucher(
      _exchangeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeVoucher(
      _exchangeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  cancelVoucher(
    _exchangeId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commitToOffer(
    _buyer: string,
    _offerId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  completeExchange(
    _exchangeId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  completeExchangeBatch(
    _exchangeIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  expireVoucher(
    _exchangeId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  extendVoucher(
    _exchangeId: BigNumberish,
    _validUntilDate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getExchange(
    _exchangeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BosonTypes.ExchangeStructOutput,
      BosonTypes.VoucherStructOutput
    ] & {
      exists: boolean;
      exchange: BosonTypes.ExchangeStructOutput;
      voucher: BosonTypes.VoucherStructOutput;
    }
  >;

  getExchangeState(
    _exchangeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, number] & { exists: boolean; state: number }>;

  getNextExchangeId(overrides?: CallOverrides): Promise<BigNumber>;

  getReceipt(
    _exchangeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BosonTypes.ReceiptStructOutput>;

  isExchangeFinalized(
    _exchangeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean] & { exists: boolean; isFinalized: boolean }>;

  onVoucherTransferred(
    _exchangeId: BigNumberish,
    _newBuyer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemVoucher(
    _exchangeId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeVoucher(
    _exchangeId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelVoucher(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    commitToOffer(
      _buyer: string,
      _offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    completeExchange(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    completeExchangeBatch(
      _exchangeIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    expireVoucher(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    extendVoucher(
      _exchangeId: BigNumberish,
      _validUntilDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getExchange(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BosonTypes.ExchangeStructOutput,
        BosonTypes.VoucherStructOutput
      ] & {
        exists: boolean;
        exchange: BosonTypes.ExchangeStructOutput;
        voucher: BosonTypes.VoucherStructOutput;
      }
    >;

    getExchangeState(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, number] & { exists: boolean; state: number }>;

    getNextExchangeId(overrides?: CallOverrides): Promise<BigNumber>;

    getReceipt(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BosonTypes.ReceiptStructOutput>;

    isExchangeFinalized(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean] & { exists: boolean; isFinalized: boolean }>;

    onVoucherTransferred(
      _exchangeId: BigNumberish,
      _newBuyer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemVoucher(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeVoucher(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BuyerCommitted(uint256,uint256,uint256,tuple,tuple,address)"(
      offerId?: BigNumberish | null,
      buyerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      exchange?: null,
      voucher?: null,
      executedBy?: null
    ): BuyerCommittedEventFilter;
    BuyerCommitted(
      offerId?: BigNumberish | null,
      buyerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      exchange?: null,
      voucher?: null,
      executedBy?: null
    ): BuyerCommittedEventFilter;

    "ExchangeCompleted(uint256,uint256,uint256,address)"(
      offerId?: BigNumberish | null,
      buyerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      executedBy?: null
    ): ExchangeCompletedEventFilter;
    ExchangeCompleted(
      offerId?: BigNumberish | null,
      buyerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      executedBy?: null
    ): ExchangeCompletedEventFilter;

    "FundsEncumbered(uint256,address,uint256,address)"(
      entityId?: BigNumberish | null,
      exchangeToken?: string | null,
      amount?: null,
      executedBy?: string | null
    ): FundsEncumberedEventFilter;
    FundsEncumbered(
      entityId?: BigNumberish | null,
      exchangeToken?: string | null,
      amount?: null,
      executedBy?: string | null
    ): FundsEncumberedEventFilter;

    "FundsReleased(uint256,uint256,address,uint256,address)"(
      exchangeId?: BigNumberish | null,
      entityId?: BigNumberish | null,
      exchangeToken?: string | null,
      amount?: null,
      executedBy?: null
    ): FundsReleasedEventFilter;
    FundsReleased(
      exchangeId?: BigNumberish | null,
      entityId?: BigNumberish | null,
      exchangeToken?: string | null,
      amount?: null,
      executedBy?: null
    ): FundsReleasedEventFilter;

    "FundsWithdrawn(uint256,address,address,uint256,address)"(
      sellerId?: BigNumberish | null,
      withdrawnTo?: string | null,
      tokenAddress?: string | null,
      amount?: null,
      executedBy?: null
    ): FundsWithdrawnEventFilter;
    FundsWithdrawn(
      sellerId?: BigNumberish | null,
      withdrawnTo?: string | null,
      tokenAddress?: string | null,
      amount?: null,
      executedBy?: null
    ): FundsWithdrawnEventFilter;

    "ProtocolFeeCollected(uint256,address,uint256,address)"(
      exchangeId?: BigNumberish | null,
      exchangeToken?: string | null,
      amount?: null,
      executedBy?: string | null
    ): ProtocolFeeCollectedEventFilter;
    ProtocolFeeCollected(
      exchangeId?: BigNumberish | null,
      exchangeToken?: string | null,
      amount?: null,
      executedBy?: string | null
    ): ProtocolFeeCollectedEventFilter;

    "TwinCreated(uint256,uint256,tuple,address)"(
      twinId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      twin?: null,
      executedBy?: string | null
    ): TwinCreatedEventFilter;
    TwinCreated(
      twinId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      twin?: null,
      executedBy?: string | null
    ): TwinCreatedEventFilter;

    "TwinDeleted(uint256,uint256,address)"(
      twinId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      executedBy?: string | null
    ): TwinDeletedEventFilter;
    TwinDeleted(
      twinId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      executedBy?: string | null
    ): TwinDeletedEventFilter;

    "TwinTransferFailed(uint256,address,uint256,uint256,uint256,address)"(
      twinId?: BigNumberish | null,
      tokenAddress?: string | null,
      exchangeId?: BigNumberish | null,
      tokenId?: null,
      amount?: null,
      executedBy?: null
    ): TwinTransferFailedEventFilter;
    TwinTransferFailed(
      twinId?: BigNumberish | null,
      tokenAddress?: string | null,
      exchangeId?: BigNumberish | null,
      tokenId?: null,
      amount?: null,
      executedBy?: null
    ): TwinTransferFailedEventFilter;

    "TwinTransferred(uint256,address,uint256,uint256,uint256,address)"(
      twinId?: BigNumberish | null,
      tokenAddress?: string | null,
      exchangeId?: BigNumberish | null,
      tokenId?: null,
      amount?: null,
      executedBy?: null
    ): TwinTransferredEventFilter;
    TwinTransferred(
      twinId?: BigNumberish | null,
      tokenAddress?: string | null,
      exchangeId?: BigNumberish | null,
      tokenId?: null,
      amount?: null,
      executedBy?: null
    ): TwinTransferredEventFilter;

    "VoucherCanceled(uint256,uint256,address)"(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      executedBy?: string | null
    ): VoucherCanceledEventFilter;
    VoucherCanceled(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      executedBy?: string | null
    ): VoucherCanceledEventFilter;

    "VoucherExpired(uint256,uint256,address)"(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      executedBy?: string | null
    ): VoucherExpiredEventFilter;
    VoucherExpired(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      executedBy?: string | null
    ): VoucherExpiredEventFilter;

    "VoucherExtended(uint256,uint256,uint256,address)"(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      validUntil?: null,
      executedBy?: string | null
    ): VoucherExtendedEventFilter;
    VoucherExtended(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      validUntil?: null,
      executedBy?: string | null
    ): VoucherExtendedEventFilter;

    "VoucherRedeemed(uint256,uint256,address)"(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      executedBy?: string | null
    ): VoucherRedeemedEventFilter;
    VoucherRedeemed(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      executedBy?: string | null
    ): VoucherRedeemedEventFilter;

    "VoucherRevoked(uint256,uint256,address)"(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      executedBy?: string | null
    ): VoucherRevokedEventFilter;
    VoucherRevoked(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      executedBy?: string | null
    ): VoucherRevokedEventFilter;

    "VoucherTransferred(uint256,uint256,uint256,address)"(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      newBuyerId?: BigNumberish | null,
      executedBy?: null
    ): VoucherTransferredEventFilter;
    VoucherTransferred(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      newBuyerId?: BigNumberish | null,
      executedBy?: null
    ): VoucherTransferredEventFilter;
  };

  estimateGas: {
    cancelVoucher(
      _exchangeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commitToOffer(
      _buyer: string,
      _offerId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    completeExchange(
      _exchangeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    completeExchangeBatch(
      _exchangeIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    expireVoucher(
      _exchangeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    extendVoucher(
      _exchangeId: BigNumberish,
      _validUntilDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getExchange(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExchangeState(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextExchangeId(overrides?: CallOverrides): Promise<BigNumber>;

    getReceipt(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isExchangeFinalized(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onVoucherTransferred(
      _exchangeId: BigNumberish,
      _newBuyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemVoucher(
      _exchangeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeVoucher(
      _exchangeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelVoucher(
      _exchangeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commitToOffer(
      _buyer: string,
      _offerId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    completeExchange(
      _exchangeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    completeExchangeBatch(
      _exchangeIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    expireVoucher(
      _exchangeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    extendVoucher(
      _exchangeId: BigNumberish,
      _validUntilDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getExchange(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExchangeState(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextExchangeId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReceipt(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isExchangeFinalized(
      _exchangeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onVoucherTransferred(
      _exchangeId: BigNumberish,
      _newBuyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemVoucher(
      _exchangeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeVoucher(
      _exchangeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
