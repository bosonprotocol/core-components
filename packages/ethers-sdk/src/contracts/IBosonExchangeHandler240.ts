/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BaseContract, BigNumber, BigNumberish, Signer, utils } from "ethers";
import { EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace BosonTypes {
  export type ExchangeStruct = {
    id: BigNumberish;
    offerId: BigNumberish;
    buyerId: BigNumberish;
    finalizedDate: BigNumberish;
    state: BigNumberish;
  };

  export type ExchangeStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number
  ] & {
    id: BigNumber;
    offerId: BigNumber;
    buyerId: BigNumber;
    finalizedDate: BigNumber;
    state: number;
  };

  export type VoucherStruct = {
    committedDate: BigNumberish;
    validUntilDate: BigNumberish;
    redeemedDate: BigNumberish;
    expired: boolean;
  };

  export type VoucherStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    committedDate: BigNumber;
    validUntilDate: BigNumber;
    redeemedDate: BigNumber;
    expired: boolean;
  };
}

export interface IBosonExchangeHandler240Interface extends utils.Interface {
  contractName: "IBosonExchangeHandler240";
  functions: {};

  events: {
    "BuyerCommitted(uint256,uint256,uint256,tuple,tuple,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BuyerCommitted"): EventFragment;
}

export type BuyerCommittedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    BosonTypes.ExchangeStructOutput,
    BosonTypes.VoucherStructOutput,
    string
  ],
  {
    offerId: BigNumber;
    buyerId: BigNumber;
    exchangeId: BigNumber;
    exchange: BosonTypes.ExchangeStructOutput;
    voucher: BosonTypes.VoucherStructOutput;
    executedBy: string;
  }
>;

export type BuyerCommittedEventFilter = TypedEventFilter<BuyerCommittedEvent>;

export interface IBosonExchangeHandler240 extends BaseContract {
  contractName: "IBosonExchangeHandler240";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBosonExchangeHandler240Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "BuyerCommitted(uint256,uint256,uint256,tuple,tuple,address)"(
      offerId?: BigNumberish | null,
      buyerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      exchange?: null,
      voucher?: null,
      executedBy?: null
    ): BuyerCommittedEventFilter;
    BuyerCommitted(
      offerId?: BigNumberish | null,
      buyerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      exchange?: null,
      voucher?: null,
      executedBy?: null
    ): BuyerCommittedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
