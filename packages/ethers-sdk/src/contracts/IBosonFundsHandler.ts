/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace BosonTypes {
  export type FundsStruct = {
    tokenAddress: string;
    tokenName: string;
    availableAmount: BigNumberish;
  };

  export type FundsStructOutput = [string, string, BigNumber] & {
    tokenAddress: string;
    tokenName: string;
    availableAmount: BigNumber;
  };
}

export interface IBosonFundsHandlerInterface extends utils.Interface {
  contractName: "IBosonFundsHandler";
  functions: {
    "depositFunds(uint256,address,uint256)": FunctionFragment;
    "getAvailableFunds(uint256)": FunctionFragment;
    "withdrawFunds(uint256,address[],uint256[])": FunctionFragment;
    "withdrawProtocolFees(address[],uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "depositFunds",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableFunds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [BigNumberish, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawProtocolFees",
    values: [string[], BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "depositFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawProtocolFees",
    data: BytesLike
  ): Result;

  events: {
    "FundsDeposited(uint256,address,address,uint256)": EventFragment;
    "FundsEncumbered(uint256,address,uint256,address)": EventFragment;
    "FundsReleased(uint256,uint256,address,uint256,address)": EventFragment;
    "FundsWithdrawn(uint256,address,address,uint256,address)": EventFragment;
    "ProtocolFeeCollected(uint256,address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FundsDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsEncumbered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsReleased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolFeeCollected"): EventFragment;
}

export type FundsDepositedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  {
    sellerId: BigNumber;
    executedBy: string;
    tokenAddress: string;
    amount: BigNumber;
  }
>;

export type FundsDepositedEventFilter = TypedEventFilter<FundsDepositedEvent>;

export type FundsEncumberedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  {
    entityId: BigNumber;
    exchangeToken: string;
    amount: BigNumber;
    executedBy: string;
  }
>;

export type FundsEncumberedEventFilter = TypedEventFilter<FundsEncumberedEvent>;

export type FundsReleasedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, string],
  {
    exchangeId: BigNumber;
    entityId: BigNumber;
    exchangeToken: string;
    amount: BigNumber;
    executedBy: string;
  }
>;

export type FundsReleasedEventFilter = TypedEventFilter<FundsReleasedEvent>;

export type FundsWithdrawnEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, string],
  {
    sellerId: BigNumber;
    withdrawnTo: string;
    tokenAddress: string;
    amount: BigNumber;
    executedBy: string;
  }
>;

export type FundsWithdrawnEventFilter = TypedEventFilter<FundsWithdrawnEvent>;

export type ProtocolFeeCollectedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  {
    exchangeId: BigNumber;
    exchangeToken: string;
    amount: BigNumber;
    executedBy: string;
  }
>;

export type ProtocolFeeCollectedEventFilter =
  TypedEventFilter<ProtocolFeeCollectedEvent>;

export interface IBosonFundsHandler extends BaseContract {
  contractName: "IBosonFundsHandler";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBosonFundsHandlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    depositFunds(
      _sellerId: BigNumberish,
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAvailableFunds(
      _entityId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BosonTypes.FundsStructOutput[]] & {
        availableFunds: BosonTypes.FundsStructOutput[];
      }
    >;

    withdrawFunds(
      _entityId: BigNumberish,
      _tokenList: string[],
      _tokenAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawProtocolFees(
      _tokenList: string[],
      _tokenAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  depositFunds(
    _sellerId: BigNumberish,
    _tokenAddress: string,
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAvailableFunds(
    _entityId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BosonTypes.FundsStructOutput[]>;

  withdrawFunds(
    _entityId: BigNumberish,
    _tokenList: string[],
    _tokenAmounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawProtocolFees(
    _tokenList: string[],
    _tokenAmounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    depositFunds(
      _sellerId: BigNumberish,
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAvailableFunds(
      _entityId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BosonTypes.FundsStructOutput[]>;

    withdrawFunds(
      _entityId: BigNumberish,
      _tokenList: string[],
      _tokenAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawProtocolFees(
      _tokenList: string[],
      _tokenAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FundsDeposited(uint256,address,address,uint256)"(
      sellerId?: BigNumberish | null,
      executedBy?: string | null,
      tokenAddress?: string | null,
      amount?: null
    ): FundsDepositedEventFilter;
    FundsDeposited(
      sellerId?: BigNumberish | null,
      executedBy?: string | null,
      tokenAddress?: string | null,
      amount?: null
    ): FundsDepositedEventFilter;

    "FundsEncumbered(uint256,address,uint256,address)"(
      entityId?: BigNumberish | null,
      exchangeToken?: string | null,
      amount?: null,
      executedBy?: string | null
    ): FundsEncumberedEventFilter;
    FundsEncumbered(
      entityId?: BigNumberish | null,
      exchangeToken?: string | null,
      amount?: null,
      executedBy?: string | null
    ): FundsEncumberedEventFilter;

    "FundsReleased(uint256,uint256,address,uint256,address)"(
      exchangeId?: BigNumberish | null,
      entityId?: BigNumberish | null,
      exchangeToken?: string | null,
      amount?: null,
      executedBy?: null
    ): FundsReleasedEventFilter;
    FundsReleased(
      exchangeId?: BigNumberish | null,
      entityId?: BigNumberish | null,
      exchangeToken?: string | null,
      amount?: null,
      executedBy?: null
    ): FundsReleasedEventFilter;

    "FundsWithdrawn(uint256,address,address,uint256,address)"(
      sellerId?: BigNumberish | null,
      withdrawnTo?: string | null,
      tokenAddress?: string | null,
      amount?: null,
      executedBy?: null
    ): FundsWithdrawnEventFilter;
    FundsWithdrawn(
      sellerId?: BigNumberish | null,
      withdrawnTo?: string | null,
      tokenAddress?: string | null,
      amount?: null,
      executedBy?: null
    ): FundsWithdrawnEventFilter;

    "ProtocolFeeCollected(uint256,address,uint256,address)"(
      exchangeId?: BigNumberish | null,
      exchangeToken?: string | null,
      amount?: null,
      executedBy?: string | null
    ): ProtocolFeeCollectedEventFilter;
    ProtocolFeeCollected(
      exchangeId?: BigNumberish | null,
      exchangeToken?: string | null,
      amount?: null,
      executedBy?: string | null
    ): ProtocolFeeCollectedEventFilter;
  };

  estimateGas: {
    depositFunds(
      _sellerId: BigNumberish,
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAvailableFunds(
      _entityId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFunds(
      _entityId: BigNumberish,
      _tokenList: string[],
      _tokenAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawProtocolFees(
      _tokenList: string[],
      _tokenAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    depositFunds(
      _sellerId: BigNumberish,
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAvailableFunds(
      _entityId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFunds(
      _entityId: BigNumberish,
      _tokenList: string[],
      _tokenAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawProtocolFees(
      _tokenList: string[],
      _tokenAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
