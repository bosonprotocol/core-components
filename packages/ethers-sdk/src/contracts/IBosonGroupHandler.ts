/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace BosonTypes {
  export type GroupStruct = {
    id: BigNumberish;
    sellerId: BigNumberish;
    offerIds: BigNumberish[];
  };

  export type GroupStructOutput = [BigNumber, BigNumber, BigNumber[]] & {
    id: BigNumber;
    sellerId: BigNumber;
    offerIds: BigNumber[];
  };

  export type ConditionStruct = {
    method: BigNumberish;
    tokenType: BigNumberish;
    tokenAddress: string;
    tokenId: BigNumberish;
    threshold: BigNumberish;
    maxCommits: BigNumberish;
  };

  export type ConditionStructOutput = [
    number,
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    method: number;
    tokenType: number;
    tokenAddress: string;
    tokenId: BigNumber;
    threshold: BigNumber;
    maxCommits: BigNumber;
  };
}

export interface IBosonGroupHandlerInterface extends utils.Interface {
  contractName: "IBosonGroupHandler";
  functions: {
    "addOffersToGroup(uint256,uint256[])": FunctionFragment;
    "createGroup((uint256,uint256,uint256[]),(uint8,uint8,address,uint256,uint256,uint256))": FunctionFragment;
    "getGroup(uint256)": FunctionFragment;
    "getNextGroupId()": FunctionFragment;
    "removeOffersFromGroup(uint256,uint256[])": FunctionFragment;
    "setGroupCondition(uint256,(uint8,uint8,address,uint256,uint256,uint256))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addOffersToGroup",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createGroup",
    values: [BosonTypes.GroupStruct, BosonTypes.ConditionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getGroup",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextGroupId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeOffersFromGroup",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setGroupCondition",
    values: [BigNumberish, BosonTypes.ConditionStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "addOffersToGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGroup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNextGroupId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOffersFromGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGroupCondition",
    data: BytesLike
  ): Result;

  events: {
    "GroupCreated(uint256,uint256,tuple,tuple,address)": EventFragment;
    "GroupUpdated(uint256,uint256,tuple,tuple,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GroupCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GroupUpdated"): EventFragment;
}

export type GroupCreatedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BosonTypes.GroupStructOutput,
    BosonTypes.ConditionStructOutput,
    string
  ],
  {
    groupId: BigNumber;
    sellerId: BigNumber;
    group: BosonTypes.GroupStructOutput;
    condition: BosonTypes.ConditionStructOutput;
    executedBy: string;
  }
>;

export type GroupCreatedEventFilter = TypedEventFilter<GroupCreatedEvent>;

export type GroupUpdatedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BosonTypes.GroupStructOutput,
    BosonTypes.ConditionStructOutput,
    string
  ],
  {
    groupId: BigNumber;
    sellerId: BigNumber;
    group: BosonTypes.GroupStructOutput;
    condition: BosonTypes.ConditionStructOutput;
    executedBy: string;
  }
>;

export type GroupUpdatedEventFilter = TypedEventFilter<GroupUpdatedEvent>;

export interface IBosonGroupHandler extends BaseContract {
  contractName: "IBosonGroupHandler";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBosonGroupHandlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addOffersToGroup(
      _groupId: BigNumberish,
      _offerIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createGroup(
      _group: BosonTypes.GroupStruct,
      _condition: BosonTypes.ConditionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getGroup(
      _groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BosonTypes.GroupStructOutput,
        BosonTypes.ConditionStructOutput
      ] & {
        exists: boolean;
        group: BosonTypes.GroupStructOutput;
        condition: BosonTypes.ConditionStructOutput;
      }
    >;

    getNextGroupId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nextGroupId: BigNumber }>;

    removeOffersFromGroup(
      _groupId: BigNumberish,
      _offerIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGroupCondition(
      _groupId: BigNumberish,
      _condition: BosonTypes.ConditionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addOffersToGroup(
    _groupId: BigNumberish,
    _offerIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createGroup(
    _group: BosonTypes.GroupStruct,
    _condition: BosonTypes.ConditionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getGroup(
    _groupId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BosonTypes.GroupStructOutput,
      BosonTypes.ConditionStructOutput
    ] & {
      exists: boolean;
      group: BosonTypes.GroupStructOutput;
      condition: BosonTypes.ConditionStructOutput;
    }
  >;

  getNextGroupId(overrides?: CallOverrides): Promise<BigNumber>;

  removeOffersFromGroup(
    _groupId: BigNumberish,
    _offerIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGroupCondition(
    _groupId: BigNumberish,
    _condition: BosonTypes.ConditionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addOffersToGroup(
      _groupId: BigNumberish,
      _offerIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    createGroup(
      _group: BosonTypes.GroupStruct,
      _condition: BosonTypes.ConditionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getGroup(
      _groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BosonTypes.GroupStructOutput,
        BosonTypes.ConditionStructOutput
      ] & {
        exists: boolean;
        group: BosonTypes.GroupStructOutput;
        condition: BosonTypes.ConditionStructOutput;
      }
    >;

    getNextGroupId(overrides?: CallOverrides): Promise<BigNumber>;

    removeOffersFromGroup(
      _groupId: BigNumberish,
      _offerIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setGroupCondition(
      _groupId: BigNumberish,
      _condition: BosonTypes.ConditionStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "GroupCreated(uint256,uint256,tuple,tuple,address)"(
      groupId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      group?: null,
      condition?: null,
      executedBy?: string | null
    ): GroupCreatedEventFilter;
    GroupCreated(
      groupId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      group?: null,
      condition?: null,
      executedBy?: string | null
    ): GroupCreatedEventFilter;

    "GroupUpdated(uint256,uint256,tuple,tuple,address)"(
      groupId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      group?: null,
      condition?: null,
      executedBy?: string | null
    ): GroupUpdatedEventFilter;
    GroupUpdated(
      groupId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      group?: null,
      condition?: null,
      executedBy?: string | null
    ): GroupUpdatedEventFilter;
  };

  estimateGas: {
    addOffersToGroup(
      _groupId: BigNumberish,
      _offerIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createGroup(
      _group: BosonTypes.GroupStruct,
      _condition: BosonTypes.ConditionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getGroup(
      _groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextGroupId(overrides?: CallOverrides): Promise<BigNumber>;

    removeOffersFromGroup(
      _groupId: BigNumberish,
      _offerIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGroupCondition(
      _groupId: BigNumberish,
      _condition: BosonTypes.ConditionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addOffersToGroup(
      _groupId: BigNumberish,
      _offerIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createGroup(
      _group: BosonTypes.GroupStruct,
      _condition: BosonTypes.ConditionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getGroup(
      _groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextGroupId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeOffersFromGroup(
      _groupId: BigNumberish,
      _offerIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGroupCondition(
      _groupId: BigNumberish,
      _condition: BosonTypes.ConditionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
