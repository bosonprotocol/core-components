/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace BosonTypes {
  export type OfferStruct = {
    id: BigNumberish;
    sellerId: BigNumberish;
    price: BigNumberish;
    sellerDeposit: BigNumberish;
    buyerCancelPenalty: BigNumberish;
    quantityAvailable: BigNumberish;
    exchangeToken: string;
    metadataUri: string;
    metadataHash: string;
    voided: boolean;
  };

  export type OfferStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    boolean
  ] & {
    id: BigNumber;
    sellerId: BigNumber;
    price: BigNumber;
    sellerDeposit: BigNumber;
    buyerCancelPenalty: BigNumber;
    quantityAvailable: BigNumber;
    exchangeToken: string;
    metadataUri: string;
    metadataHash: string;
    voided: boolean;
  };

  export type OfferDatesStruct = {
    validFrom: BigNumberish;
    validUntil: BigNumberish;
    voucherRedeemableFrom: BigNumberish;
    voucherRedeemableUntil: BigNumberish;
  };

  export type OfferDatesStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    validFrom: BigNumber;
    validUntil: BigNumber;
    voucherRedeemableFrom: BigNumber;
    voucherRedeemableUntil: BigNumber;
  };

  export type OfferDurationsStruct = {
    disputePeriod: BigNumberish;
    voucherValid: BigNumberish;
    resolutionPeriod: BigNumberish;
  };

  export type OfferDurationsStructOutput = [BigNumber, BigNumber, BigNumber] & {
    disputePeriod: BigNumber;
    voucherValid: BigNumber;
    resolutionPeriod: BigNumber;
  };

  export type DisputeResolutionTermsStruct = {
    disputeResolverId: BigNumberish;
    escalationResponsePeriod: BigNumberish;
    feeAmount: BigNumberish;
    buyerEscalationDeposit: BigNumberish;
  };

  export type DisputeResolutionTermsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    disputeResolverId: BigNumber;
    escalationResponsePeriod: BigNumber;
    feeAmount: BigNumber;
    buyerEscalationDeposit: BigNumber;
  };

  export type OfferFeesStruct = {
    protocolFee: BigNumberish;
    agentFee: BigNumberish;
  };

  export type OfferFeesStructOutput = [BigNumber, BigNumber] & {
    protocolFee: BigNumber;
    agentFee: BigNumber;
  };
}

export interface IBosonOfferHandlerInterface extends utils.Interface {
  contractName: "IBosonOfferHandler";
  functions: {
    "createOffer((uint256,uint256,uint256,uint256,uint256,uint256,address,string,string,bool),(uint256,uint256,uint256,uint256),(uint256,uint256,uint256),uint256,uint256)": FunctionFragment;
    "createOfferBatch((uint256,uint256,uint256,uint256,uint256,uint256,address,string,string,bool)[],(uint256,uint256,uint256,uint256)[],(uint256,uint256,uint256)[],uint256[],uint256[])": FunctionFragment;
    "extendOffer(uint256,uint256)": FunctionFragment;
    "extendOfferBatch(uint256[],uint256)": FunctionFragment;
    "getAgentIdByOffer(uint256)": FunctionFragment;
    "getNextOfferId()": FunctionFragment;
    "getOffer(uint256)": FunctionFragment;
    "isOfferVoided(uint256)": FunctionFragment;
    "voidOffer(uint256)": FunctionFragment;
    "voidOfferBatch(uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createOffer",
    values: [
      BosonTypes.OfferStruct,
      BosonTypes.OfferDatesStruct,
      BosonTypes.OfferDurationsStruct,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createOfferBatch",
    values: [
      BosonTypes.OfferStruct[],
      BosonTypes.OfferDatesStruct[],
      BosonTypes.OfferDurationsStruct[],
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "extendOffer",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "extendOfferBatch",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentIdByOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextOfferId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isOfferVoided",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voidOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voidOfferBatch",
    values: [BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "createOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOfferBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extendOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extendOfferBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentIdByOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextOfferId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isOfferVoided",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voidOffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voidOfferBatch",
    data: BytesLike
  ): Result;

  events: {
    "OfferCreated(uint256,uint256,tuple,tuple,tuple,tuple,tuple,uint256,address)": EventFragment;
    "OfferExtended(uint256,uint256,uint256,address)": EventFragment;
    "OfferVoided(uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OfferCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferVoided"): EventFragment;
}

export type OfferCreatedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BosonTypes.OfferStructOutput,
    BosonTypes.OfferDatesStructOutput,
    BosonTypes.OfferDurationsStructOutput,
    BosonTypes.DisputeResolutionTermsStructOutput,
    BosonTypes.OfferFeesStructOutput,
    BigNumber,
    string
  ],
  {
    offerId: BigNumber;
    sellerId: BigNumber;
    offer: BosonTypes.OfferStructOutput;
    offerDates: BosonTypes.OfferDatesStructOutput;
    offerDurations: BosonTypes.OfferDurationsStructOutput;
    disputeResolutionTerms: BosonTypes.DisputeResolutionTermsStructOutput;
    offerFees: BosonTypes.OfferFeesStructOutput;
    agentId: BigNumber;
    executedBy: string;
  }
>;

export type OfferCreatedEventFilter = TypedEventFilter<OfferCreatedEvent>;

export type OfferExtendedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  {
    offerId: BigNumber;
    sellerId: BigNumber;
    validUntilDate: BigNumber;
    executedBy: string;
  }
>;

export type OfferExtendedEventFilter = TypedEventFilter<OfferExtendedEvent>;

export type OfferVoidedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { offerId: BigNumber; sellerId: BigNumber; executedBy: string }
>;

export type OfferVoidedEventFilter = TypedEventFilter<OfferVoidedEvent>;

export interface IBosonOfferHandler extends BaseContract {
  contractName: "IBosonOfferHandler";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBosonOfferHandlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createOffer(
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _agentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createOfferBatch(
      _offers: BosonTypes.OfferStruct[],
      _offerDates: BosonTypes.OfferDatesStruct[],
      _offerDurations: BosonTypes.OfferDurationsStruct[],
      _disputeResolverIds: BigNumberish[],
      _agentIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    extendOffer(
      _offerId: BigNumberish,
      _validUntilDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    extendOfferBatch(
      _offerIds: BigNumberish[],
      _validUntilDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAgentIdByOffer(
      _offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { exists: boolean; agentId: BigNumber }>;

    getNextOfferId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nextOfferId: BigNumber }>;

    getOffer(
      _offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BosonTypes.OfferStructOutput,
        BosonTypes.OfferDatesStructOutput,
        BosonTypes.OfferDurationsStructOutput,
        BosonTypes.DisputeResolutionTermsStructOutput,
        BosonTypes.OfferFeesStructOutput
      ] & {
        exists: boolean;
        offer: BosonTypes.OfferStructOutput;
        offerDates: BosonTypes.OfferDatesStructOutput;
        offerDurations: BosonTypes.OfferDurationsStructOutput;
        disputeResolutionTerms: BosonTypes.DisputeResolutionTermsStructOutput;
        offerFees: BosonTypes.OfferFeesStructOutput;
      }
    >;

    isOfferVoided(
      _offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean] & { exists: boolean; offerVoided: boolean }>;

    voidOffer(
      _offerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voidOfferBatch(
      _offerIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createOffer(
    _offer: BosonTypes.OfferStruct,
    _offerDates: BosonTypes.OfferDatesStruct,
    _offerDurations: BosonTypes.OfferDurationsStruct,
    _disputeResolverId: BigNumberish,
    _agentId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createOfferBatch(
    _offers: BosonTypes.OfferStruct[],
    _offerDates: BosonTypes.OfferDatesStruct[],
    _offerDurations: BosonTypes.OfferDurationsStruct[],
    _disputeResolverIds: BigNumberish[],
    _agentIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  extendOffer(
    _offerId: BigNumberish,
    _validUntilDate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  extendOfferBatch(
    _offerIds: BigNumberish[],
    _validUntilDate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAgentIdByOffer(
    _offerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { exists: boolean; agentId: BigNumber }>;

  getNextOfferId(overrides?: CallOverrides): Promise<BigNumber>;

  getOffer(
    _offerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BosonTypes.OfferStructOutput,
      BosonTypes.OfferDatesStructOutput,
      BosonTypes.OfferDurationsStructOutput,
      BosonTypes.DisputeResolutionTermsStructOutput,
      BosonTypes.OfferFeesStructOutput
    ] & {
      exists: boolean;
      offer: BosonTypes.OfferStructOutput;
      offerDates: BosonTypes.OfferDatesStructOutput;
      offerDurations: BosonTypes.OfferDurationsStructOutput;
      disputeResolutionTerms: BosonTypes.DisputeResolutionTermsStructOutput;
      offerFees: BosonTypes.OfferFeesStructOutput;
    }
  >;

  isOfferVoided(
    _offerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean] & { exists: boolean; offerVoided: boolean }>;

  voidOffer(
    _offerId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voidOfferBatch(
    _offerIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createOffer(
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _agentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createOfferBatch(
      _offers: BosonTypes.OfferStruct[],
      _offerDates: BosonTypes.OfferDatesStruct[],
      _offerDurations: BosonTypes.OfferDurationsStruct[],
      _disputeResolverIds: BigNumberish[],
      _agentIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    extendOffer(
      _offerId: BigNumberish,
      _validUntilDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    extendOfferBatch(
      _offerIds: BigNumberish[],
      _validUntilDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAgentIdByOffer(
      _offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { exists: boolean; agentId: BigNumber }>;

    getNextOfferId(overrides?: CallOverrides): Promise<BigNumber>;

    getOffer(
      _offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BosonTypes.OfferStructOutput,
        BosonTypes.OfferDatesStructOutput,
        BosonTypes.OfferDurationsStructOutput,
        BosonTypes.DisputeResolutionTermsStructOutput,
        BosonTypes.OfferFeesStructOutput
      ] & {
        exists: boolean;
        offer: BosonTypes.OfferStructOutput;
        offerDates: BosonTypes.OfferDatesStructOutput;
        offerDurations: BosonTypes.OfferDurationsStructOutput;
        disputeResolutionTerms: BosonTypes.DisputeResolutionTermsStructOutput;
        offerFees: BosonTypes.OfferFeesStructOutput;
      }
    >;

    isOfferVoided(
      _offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean] & { exists: boolean; offerVoided: boolean }>;

    voidOffer(_offerId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    voidOfferBatch(
      _offerIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OfferCreated(uint256,uint256,tuple,tuple,tuple,tuple,tuple,uint256,address)"(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      offer?: null,
      offerDates?: null,
      offerDurations?: null,
      disputeResolutionTerms?: null,
      offerFees?: null,
      agentId?: BigNumberish | null,
      executedBy?: null
    ): OfferCreatedEventFilter;
    OfferCreated(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      offer?: null,
      offerDates?: null,
      offerDurations?: null,
      disputeResolutionTerms?: null,
      offerFees?: null,
      agentId?: BigNumberish | null,
      executedBy?: null
    ): OfferCreatedEventFilter;

    "OfferExtended(uint256,uint256,uint256,address)"(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      validUntilDate?: null,
      executedBy?: string | null
    ): OfferExtendedEventFilter;
    OfferExtended(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      validUntilDate?: null,
      executedBy?: string | null
    ): OfferExtendedEventFilter;

    "OfferVoided(uint256,uint256,address)"(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      executedBy?: string | null
    ): OfferVoidedEventFilter;
    OfferVoided(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      executedBy?: string | null
    ): OfferVoidedEventFilter;
  };

  estimateGas: {
    createOffer(
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _agentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createOfferBatch(
      _offers: BosonTypes.OfferStruct[],
      _offerDates: BosonTypes.OfferDatesStruct[],
      _offerDurations: BosonTypes.OfferDurationsStruct[],
      _disputeResolverIds: BigNumberish[],
      _agentIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    extendOffer(
      _offerId: BigNumberish,
      _validUntilDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    extendOfferBatch(
      _offerIds: BigNumberish[],
      _validUntilDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAgentIdByOffer(
      _offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextOfferId(overrides?: CallOverrides): Promise<BigNumber>;

    getOffer(
      _offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOfferVoided(
      _offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voidOffer(
      _offerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voidOfferBatch(
      _offerIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createOffer(
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _agentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createOfferBatch(
      _offers: BosonTypes.OfferStruct[],
      _offerDates: BosonTypes.OfferDatesStruct[],
      _offerDurations: BosonTypes.OfferDurationsStruct[],
      _disputeResolverIds: BigNumberish[],
      _agentIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    extendOffer(
      _offerId: BigNumberish,
      _validUntilDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    extendOfferBatch(
      _offerIds: BigNumberish[],
      _validUntilDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAgentIdByOffer(
      _offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextOfferId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOffer(
      _offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOfferVoided(
      _offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voidOffer(
      _offerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voidOfferBatch(
      _offerIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
