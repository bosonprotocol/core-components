/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace BosonTypes {
  export type OfferStruct = {
    id: BigNumberish;
    sellerId: BigNumberish;
    price: BigNumberish;
    sellerDeposit: BigNumberish;
    buyerCancelPenalty: BigNumberish;
    quantityAvailable: BigNumberish;
    validFromDate: BigNumberish;
    validUntilDate: BigNumberish;
    redeemableFromDate: BigNumberish;
    fulfillmentPeriodDuration: BigNumberish;
    voucherValidDuration: BigNumberish;
    exchangeToken: string;
    metadataUri: string;
    offerChecksum: string;
    voided: boolean;
  };

  export type OfferStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    boolean
  ] & {
    id: BigNumber;
    sellerId: BigNumber;
    price: BigNumber;
    sellerDeposit: BigNumber;
    buyerCancelPenalty: BigNumber;
    quantityAvailable: BigNumber;
    validFromDate: BigNumber;
    validUntilDate: BigNumber;
    redeemableFromDate: BigNumber;
    fulfillmentPeriodDuration: BigNumber;
    voucherValidDuration: BigNumber;
    exchangeToken: string;
    metadataUri: string;
    offerChecksum: string;
    voided: boolean;
  };
}

export interface IBosonOfferHandlerInterface extends utils.Interface {
  contractName: "IBosonOfferHandler";
  functions: {
    "createOffer((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,string,string,bool))": FunctionFragment;
    "createOfferBatch((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,string,string,bool)[])": FunctionFragment;
    "extendOffer(uint256,uint256)": FunctionFragment;
    "getNextOfferId()": FunctionFragment;
    "getOffer(uint256)": FunctionFragment;
    "isOfferUpdateable(uint256)": FunctionFragment;
    "isOfferVoided(uint256)": FunctionFragment;
    "updateOffer((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,string,string,bool))": FunctionFragment;
    "voidOffer(uint256)": FunctionFragment;
    "voidOfferBatch(uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createOffer",
    values: [BosonTypes.OfferStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createOfferBatch",
    values: [BosonTypes.OfferStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "extendOffer",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextOfferId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isOfferUpdateable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isOfferVoided",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOffer",
    values: [BosonTypes.OfferStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "voidOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voidOfferBatch",
    values: [BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "createOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOfferBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extendOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextOfferId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isOfferUpdateable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOfferVoided",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voidOffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voidOfferBatch",
    data: BytesLike
  ): Result;

  events: {
    "OfferCreated(uint256,uint256,tuple)": EventFragment;
    "OfferUpdated(uint256,uint256,tuple)": EventFragment;
    "OfferVoided(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OfferCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferVoided"): EventFragment;
}

export type OfferCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, BosonTypes.OfferStructOutput],
  {
    offerId: BigNumber;
    sellerId: BigNumber;
    offer: BosonTypes.OfferStructOutput;
  }
>;

export type OfferCreatedEventFilter = TypedEventFilter<OfferCreatedEvent>;

export type OfferUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BosonTypes.OfferStructOutput],
  {
    offerId: BigNumber;
    sellerId: BigNumber;
    offer: BosonTypes.OfferStructOutput;
  }
>;

export type OfferUpdatedEventFilter = TypedEventFilter<OfferUpdatedEvent>;

export type OfferVoidedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { offerId: BigNumber; sellerId: BigNumber }
>;

export type OfferVoidedEventFilter = TypedEventFilter<OfferVoidedEvent>;

export interface IBosonOfferHandler extends BaseContract {
  contractName: "IBosonOfferHandler";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBosonOfferHandlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createOffer(
      _offer: BosonTypes.OfferStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createOfferBatch(
      _offers: BosonTypes.OfferStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    extendOffer(
      _offerId: BigNumberish,
      _validUntilDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNextOfferId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nextOfferId: BigNumber }>;

    getOffer(
      _offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BosonTypes.OfferStructOutput] & {
        exists: boolean;
        offer: BosonTypes.OfferStructOutput;
      }
    >;

    isOfferUpdateable(
      _offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean] & { exists: boolean; offerUpdateable: boolean }
    >;

    isOfferVoided(
      _offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean] & { exists: boolean; offerVoided: boolean }>;

    updateOffer(
      _offer: BosonTypes.OfferStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voidOffer(
      _offerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voidOfferBatch(
      _offerIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createOffer(
    _offer: BosonTypes.OfferStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createOfferBatch(
    _offers: BosonTypes.OfferStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  extendOffer(
    _offerId: BigNumberish,
    _validUntilDate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNextOfferId(overrides?: CallOverrides): Promise<BigNumber>;

  getOffer(
    _offerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BosonTypes.OfferStructOutput] & {
      exists: boolean;
      offer: BosonTypes.OfferStructOutput;
    }
  >;

  isOfferUpdateable(
    _offerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean] & { exists: boolean; offerUpdateable: boolean }
  >;

  isOfferVoided(
    _offerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean] & { exists: boolean; offerVoided: boolean }>;

  updateOffer(
    _offer: BosonTypes.OfferStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voidOffer(
    _offerId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voidOfferBatch(
    _offerIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createOffer(
      _offer: BosonTypes.OfferStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    createOfferBatch(
      _offers: BosonTypes.OfferStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    extendOffer(
      _offerId: BigNumberish,
      _validUntilDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getNextOfferId(overrides?: CallOverrides): Promise<BigNumber>;

    getOffer(
      _offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BosonTypes.OfferStructOutput] & {
        exists: boolean;
        offer: BosonTypes.OfferStructOutput;
      }
    >;

    isOfferUpdateable(
      _offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean] & { exists: boolean; offerUpdateable: boolean }
    >;

    isOfferVoided(
      _offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean] & { exists: boolean; offerVoided: boolean }>;

    updateOffer(
      _offer: BosonTypes.OfferStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    voidOffer(_offerId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    voidOfferBatch(
      _offerIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OfferCreated(uint256,uint256,tuple)"(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      offer?: null
    ): OfferCreatedEventFilter;
    OfferCreated(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      offer?: null
    ): OfferCreatedEventFilter;

    "OfferUpdated(uint256,uint256,tuple)"(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      offer?: null
    ): OfferUpdatedEventFilter;
    OfferUpdated(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      offer?: null
    ): OfferUpdatedEventFilter;

    "OfferVoided(uint256,uint256)"(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null
    ): OfferVoidedEventFilter;
    OfferVoided(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null
    ): OfferVoidedEventFilter;
  };

  estimateGas: {
    createOffer(
      _offer: BosonTypes.OfferStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createOfferBatch(
      _offers: BosonTypes.OfferStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    extendOffer(
      _offerId: BigNumberish,
      _validUntilDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNextOfferId(overrides?: CallOverrides): Promise<BigNumber>;

    getOffer(
      _offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOfferUpdateable(
      _offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOfferVoided(
      _offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateOffer(
      _offer: BosonTypes.OfferStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voidOffer(
      _offerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voidOfferBatch(
      _offerIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createOffer(
      _offer: BosonTypes.OfferStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createOfferBatch(
      _offers: BosonTypes.OfferStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    extendOffer(
      _offerId: BigNumberish,
      _validUntilDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNextOfferId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOffer(
      _offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOfferUpdateable(
      _offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOfferVoided(
      _offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateOffer(
      _offer: BosonTypes.OfferStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voidOffer(
      _offerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voidOfferBatch(
      _offerIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
