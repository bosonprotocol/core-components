/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BaseContract, BigNumber, BigNumberish, Signer, utils } from "ethers";
import { EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace BosonTypes {
  export type RoyaltyInfoStruct = { recipients: string[]; bps: BigNumberish[] };

  export type RoyaltyInfoStructOutput = [string[], BigNumber[]] & {
    recipients: string[];
    bps: BigNumber[];
  };

  export type OfferStruct = {
    id: BigNumberish;
    sellerId: BigNumberish;
    price: BigNumberish;
    sellerDeposit: BigNumberish;
    buyerCancelPenalty: BigNumberish;
    quantityAvailable: BigNumberish;
    exchangeToken: string;
    priceType: BigNumberish;
    metadataUri: string;
    metadataHash: string;
    voided: boolean;
    collectionIndex: BigNumberish;
    royaltyInfo: BosonTypes.RoyaltyInfoStruct[];
  };

  export type OfferStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    number,
    string,
    string,
    boolean,
    BigNumber,
    BosonTypes.RoyaltyInfoStructOutput[]
  ] & {
    id: BigNumber;
    sellerId: BigNumber;
    price: BigNumber;
    sellerDeposit: BigNumber;
    buyerCancelPenalty: BigNumber;
    quantityAvailable: BigNumber;
    exchangeToken: string;
    priceType: number;
    metadataUri: string;
    metadataHash: string;
    voided: boolean;
    collectionIndex: BigNumber;
    royaltyInfo: BosonTypes.RoyaltyInfoStructOutput[];
  };

  export type OfferDatesStruct = {
    validFrom: BigNumberish;
    validUntil: BigNumberish;
    voucherRedeemableFrom: BigNumberish;
    voucherRedeemableUntil: BigNumberish;
  };

  export type OfferDatesStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    validFrom: BigNumber;
    validUntil: BigNumber;
    voucherRedeemableFrom: BigNumber;
    voucherRedeemableUntil: BigNumber;
  };

  export type OfferDurationsStruct = {
    disputePeriod: BigNumberish;
    voucherValid: BigNumberish;
    resolutionPeriod: BigNumberish;
  };

  export type OfferDurationsStructOutput = [BigNumber, BigNumber, BigNumber] & {
    disputePeriod: BigNumber;
    voucherValid: BigNumber;
    resolutionPeriod: BigNumber;
  };

  export type DisputeResolutionTermsStruct = {
    disputeResolverId: BigNumberish;
    escalationResponsePeriod: BigNumberish;
    feeAmount: BigNumberish;
    buyerEscalationDeposit: BigNumberish;
  };

  export type DisputeResolutionTermsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    disputeResolverId: BigNumber;
    escalationResponsePeriod: BigNumber;
    feeAmount: BigNumber;
    buyerEscalationDeposit: BigNumber;
  };

  export type OfferFeesStruct = {
    protocolFee: BigNumberish;
    agentFee: BigNumberish;
  };

  export type OfferFeesStructOutput = [BigNumber, BigNumber] & {
    protocolFee: BigNumber;
    agentFee: BigNumber;
  };
}

export interface IBosonOfferHandler240Interface extends utils.Interface {
  contractName: "IBosonOfferHandler240";
  functions: {};

  events: {
    "OfferCreated(uint256,uint256,tuple,tuple,tuple,tuple,tuple,uint256,address)": EventFragment;
    "OfferVoided(uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OfferCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferVoided"): EventFragment;
}

export type OfferCreatedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BosonTypes.OfferStructOutput,
    BosonTypes.OfferDatesStructOutput,
    BosonTypes.OfferDurationsStructOutput,
    BosonTypes.DisputeResolutionTermsStructOutput,
    BosonTypes.OfferFeesStructOutput,
    BigNumber,
    string
  ],
  {
    offerId: BigNumber;
    sellerId: BigNumber;
    offer: BosonTypes.OfferStructOutput;
    offerDates: BosonTypes.OfferDatesStructOutput;
    offerDurations: BosonTypes.OfferDurationsStructOutput;
    disputeResolutionTerms: BosonTypes.DisputeResolutionTermsStructOutput;
    offerFees: BosonTypes.OfferFeesStructOutput;
    agentId: BigNumber;
    executedBy: string;
  }
>;

export type OfferCreatedEventFilter = TypedEventFilter<OfferCreatedEvent>;

export type OfferVoidedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { offerId: BigNumber; sellerId: BigNumber; executedBy: string }
>;

export type OfferVoidedEventFilter = TypedEventFilter<OfferVoidedEvent>;

export interface IBosonOfferHandler240 extends BaseContract {
  contractName: "IBosonOfferHandler240";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBosonOfferHandler240Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "OfferCreated(uint256,uint256,tuple,tuple,tuple,tuple,tuple,uint256,address)"(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      offer?: null,
      offerDates?: null,
      offerDurations?: null,
      disputeResolutionTerms?: null,
      offerFees?: null,
      agentId?: BigNumberish | null,
      executedBy?: null
    ): OfferCreatedEventFilter;
    OfferCreated(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      offer?: null,
      offerDates?: null,
      offerDurations?: null,
      disputeResolutionTerms?: null,
      offerFees?: null,
      agentId?: BigNumberish | null,
      executedBy?: null
    ): OfferCreatedEventFilter;

    "OfferVoided(uint256,uint256,address)"(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      executedBy?: string | null
    ): OfferVoidedEventFilter;
    OfferVoided(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      executedBy?: string | null
    ): OfferVoidedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
