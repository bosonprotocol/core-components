/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace BosonTypes {
  export type BuyerStruct = {
    id: BigNumberish;
    wallet: string;
    active: boolean;
  };

  export type BuyerStructOutput = [BigNumber, string, boolean] & {
    id: BigNumber;
    wallet: string;
    active: boolean;
  };

  export type ConditionStruct = {
    method: BigNumberish;
    tokenAddress: string;
    tokenId: BigNumberish;
    threshold: BigNumberish;
  };

  export type ConditionStructOutput = [number, string, BigNumber, BigNumber] & {
    method: number;
    tokenAddress: string;
    tokenId: BigNumber;
    threshold: BigNumber;
  };

  export type GroupStruct = {
    id: BigNumberish;
    sellerId: BigNumberish;
    offerIds: BigNumberish[];
    condition: BosonTypes.ConditionStruct;
  };

  export type GroupStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber[],
    BosonTypes.ConditionStructOutput
  ] & {
    id: BigNumber;
    sellerId: BigNumber;
    offerIds: BigNumber[];
    condition: BosonTypes.ConditionStructOutput;
  };

  export type OfferStruct = {
    id: BigNumberish;
    sellerId: BigNumberish;
    price: BigNumberish;
    sellerDeposit: BigNumberish;
    buyerCancelPenalty: BigNumberish;
    quantityAvailable: BigNumberish;
    validFromDate: BigNumberish;
    validUntilDate: BigNumberish;
    redeemableFromDate: BigNumberish;
    fulfillmentPeriodDuration: BigNumberish;
    voucherValidDuration: BigNumberish;
    exchangeToken: string;
    metadataUri: string;
    offerChecksum: string;
    voided: boolean;
  };

  export type OfferStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    boolean
  ] & {
    id: BigNumber;
    sellerId: BigNumber;
    price: BigNumber;
    sellerDeposit: BigNumber;
    buyerCancelPenalty: BigNumber;
    quantityAvailable: BigNumber;
    validFromDate: BigNumber;
    validUntilDate: BigNumber;
    redeemableFromDate: BigNumber;
    fulfillmentPeriodDuration: BigNumber;
    voucherValidDuration: BigNumber;
    exchangeToken: string;
    metadataUri: string;
    offerChecksum: string;
    voided: boolean;
  };

  export type SellerStruct = {
    id: BigNumberish;
    operator: string;
    admin: string;
    clerk: string;
    treasury: string;
    active: boolean;
  };

  export type SellerStructOutput = [
    BigNumber,
    string,
    string,
    string,
    string,
    boolean
  ] & {
    id: BigNumber;
    operator: string;
    admin: string;
    clerk: string;
    treasury: string;
    active: boolean;
  };
}

export interface IBosonOrchestrationHandlerInterface extends utils.Interface {
  contractName: "IBosonOrchestrationHandler";
  functions: {
    "createOfferWithCondition((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,string,string,bool),(uint8,address,uint256,uint256))": FunctionFragment;
    "createSellerAndOffer((uint256,address,address,address,address,bool),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,string,string,bool))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createOfferWithCondition",
    values: [BosonTypes.OfferStruct, BosonTypes.ConditionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createSellerAndOffer",
    values: [BosonTypes.SellerStruct, BosonTypes.OfferStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "createOfferWithCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSellerAndOffer",
    data: BytesLike
  ): Result;

  events: {
    "BuyerCreated(uint256,tuple)": EventFragment;
    "GroupCreated(uint256,uint256,tuple)": EventFragment;
    "GroupUpdated(uint256,uint256,tuple)": EventFragment;
    "OfferCreated(uint256,uint256,tuple)": EventFragment;
    "OfferUpdated(uint256,uint256,tuple)": EventFragment;
    "OfferVoided(uint256,uint256)": EventFragment;
    "SellerCreated(uint256,tuple)": EventFragment;
    "SellerUpdated(uint256,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BuyerCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GroupCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GroupUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferVoided"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellerCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellerUpdated"): EventFragment;
}

export type BuyerCreatedEvent = TypedEvent<
  [BigNumber, BosonTypes.BuyerStructOutput],
  { buyerId: BigNumber; buyer: BosonTypes.BuyerStructOutput }
>;

export type BuyerCreatedEventFilter = TypedEventFilter<BuyerCreatedEvent>;

export type GroupCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, BosonTypes.GroupStructOutput],
  {
    groupId: BigNumber;
    sellerId: BigNumber;
    group: BosonTypes.GroupStructOutput;
  }
>;

export type GroupCreatedEventFilter = TypedEventFilter<GroupCreatedEvent>;

export type GroupUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BosonTypes.GroupStructOutput],
  {
    groupId: BigNumber;
    sellerId: BigNumber;
    group: BosonTypes.GroupStructOutput;
  }
>;

export type GroupUpdatedEventFilter = TypedEventFilter<GroupUpdatedEvent>;

export type OfferCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, BosonTypes.OfferStructOutput],
  {
    offerId: BigNumber;
    sellerId: BigNumber;
    offer: BosonTypes.OfferStructOutput;
  }
>;

export type OfferCreatedEventFilter = TypedEventFilter<OfferCreatedEvent>;

export type OfferUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BosonTypes.OfferStructOutput],
  {
    offerId: BigNumber;
    sellerId: BigNumber;
    offer: BosonTypes.OfferStructOutput;
  }
>;

export type OfferUpdatedEventFilter = TypedEventFilter<OfferUpdatedEvent>;

export type OfferVoidedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { offerId: BigNumber; sellerId: BigNumber }
>;

export type OfferVoidedEventFilter = TypedEventFilter<OfferVoidedEvent>;

export type SellerCreatedEvent = TypedEvent<
  [BigNumber, BosonTypes.SellerStructOutput],
  { sellerId: BigNumber; seller: BosonTypes.SellerStructOutput }
>;

export type SellerCreatedEventFilter = TypedEventFilter<SellerCreatedEvent>;

export type SellerUpdatedEvent = TypedEvent<
  [BigNumber, BosonTypes.SellerStructOutput],
  { sellerId: BigNumber; seller: BosonTypes.SellerStructOutput }
>;

export type SellerUpdatedEventFilter = TypedEventFilter<SellerUpdatedEvent>;

export interface IBosonOrchestrationHandler extends BaseContract {
  contractName: "IBosonOrchestrationHandler";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBosonOrchestrationHandlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createOfferWithCondition(
      _offer: BosonTypes.OfferStruct,
      _condition: BosonTypes.ConditionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createSellerAndOffer(
      _seller: BosonTypes.SellerStruct,
      _offer: BosonTypes.OfferStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createOfferWithCondition(
    _offer: BosonTypes.OfferStruct,
    _condition: BosonTypes.ConditionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createSellerAndOffer(
    _seller: BosonTypes.SellerStruct,
    _offer: BosonTypes.OfferStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createOfferWithCondition(
      _offer: BosonTypes.OfferStruct,
      _condition: BosonTypes.ConditionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    createSellerAndOffer(
      _seller: BosonTypes.SellerStruct,
      _offer: BosonTypes.OfferStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BuyerCreated(uint256,tuple)"(
      buyerId?: BigNumberish | null,
      buyer?: null
    ): BuyerCreatedEventFilter;
    BuyerCreated(
      buyerId?: BigNumberish | null,
      buyer?: null
    ): BuyerCreatedEventFilter;

    "GroupCreated(uint256,uint256,tuple)"(
      groupId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      group?: null
    ): GroupCreatedEventFilter;
    GroupCreated(
      groupId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      group?: null
    ): GroupCreatedEventFilter;

    "GroupUpdated(uint256,uint256,tuple)"(
      groupId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      group?: null
    ): GroupUpdatedEventFilter;
    GroupUpdated(
      groupId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      group?: null
    ): GroupUpdatedEventFilter;

    "OfferCreated(uint256,uint256,tuple)"(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      offer?: null
    ): OfferCreatedEventFilter;
    OfferCreated(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      offer?: null
    ): OfferCreatedEventFilter;

    "OfferUpdated(uint256,uint256,tuple)"(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      offer?: null
    ): OfferUpdatedEventFilter;
    OfferUpdated(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      offer?: null
    ): OfferUpdatedEventFilter;

    "OfferVoided(uint256,uint256)"(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null
    ): OfferVoidedEventFilter;
    OfferVoided(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null
    ): OfferVoidedEventFilter;

    "SellerCreated(uint256,tuple)"(
      sellerId?: BigNumberish | null,
      seller?: null
    ): SellerCreatedEventFilter;
    SellerCreated(
      sellerId?: BigNumberish | null,
      seller?: null
    ): SellerCreatedEventFilter;

    "SellerUpdated(uint256,tuple)"(
      sellerId?: BigNumberish | null,
      seller?: null
    ): SellerUpdatedEventFilter;
    SellerUpdated(
      sellerId?: BigNumberish | null,
      seller?: null
    ): SellerUpdatedEventFilter;
  };

  estimateGas: {
    createOfferWithCondition(
      _offer: BosonTypes.OfferStruct,
      _condition: BosonTypes.ConditionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createSellerAndOffer(
      _seller: BosonTypes.SellerStruct,
      _offer: BosonTypes.OfferStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createOfferWithCondition(
      _offer: BosonTypes.OfferStruct,
      _condition: BosonTypes.ConditionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createSellerAndOffer(
      _seller: BosonTypes.SellerStruct,
      _offer: BosonTypes.OfferStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
