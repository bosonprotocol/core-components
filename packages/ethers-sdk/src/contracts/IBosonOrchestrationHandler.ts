/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace BosonTypes {
  export type AgentStruct = {
    id: BigNumberish;
    feePercentage: BigNumberish;
    wallet: string;
    active: boolean;
  };

  export type AgentStructOutput = [BigNumber, BigNumber, string, boolean] & {
    id: BigNumber;
    feePercentage: BigNumber;
    wallet: string;
    active: boolean;
  };

  export type BundleStruct = {
    id: BigNumberish;
    sellerId: BigNumberish;
    offerIds: BigNumberish[];
    twinIds: BigNumberish[];
  };

  export type BundleStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber[],
    BigNumber[]
  ] & {
    id: BigNumber;
    sellerId: BigNumber;
    offerIds: BigNumber[];
    twinIds: BigNumber[];
  };

  export type BuyerStruct = {
    id: BigNumberish;
    wallet: string;
    active: boolean;
  };

  export type BuyerStructOutput = [BigNumber, string, boolean] & {
    id: BigNumber;
    wallet: string;
    active: boolean;
  };

  export type DisputeResolverStruct = {
    id: BigNumberish;
    escalationResponsePeriod: BigNumberish;
    operator: string;
    admin: string;
    clerk: string;
    treasury: string;
    metadataUri: string;
    active: boolean;
  };

  export type DisputeResolverStructOutput = [
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    string,
    string,
    boolean
  ] & {
    id: BigNumber;
    escalationResponsePeriod: BigNumber;
    operator: string;
    admin: string;
    clerk: string;
    treasury: string;
    metadataUri: string;
    active: boolean;
  };

  export type DisputeResolverFeeStruct = {
    tokenAddress: string;
    tokenName: string;
    feeAmount: BigNumberish;
  };

  export type DisputeResolverFeeStructOutput = [string, string, BigNumber] & {
    tokenAddress: string;
    tokenName: string;
    feeAmount: BigNumber;
  };

  export type GroupStruct = {
    id: BigNumberish;
    sellerId: BigNumberish;
    offerIds: BigNumberish[];
  };

  export type GroupStructOutput = [BigNumber, BigNumber, BigNumber[]] & {
    id: BigNumber;
    sellerId: BigNumber;
    offerIds: BigNumber[];
  };

  export type ConditionStruct = {
    method: BigNumberish;
    tokenType: BigNumberish;
    tokenAddress: string;
    tokenId: BigNumberish;
    threshold: BigNumberish;
    maxCommits: BigNumberish;
  };

  export type ConditionStructOutput = [
    number,
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    method: number;
    tokenType: number;
    tokenAddress: string;
    tokenId: BigNumber;
    threshold: BigNumber;
    maxCommits: BigNumber;
  };

  export type OfferStruct = {
    id: BigNumberish;
    sellerId: BigNumberish;
    price: BigNumberish;
    sellerDeposit: BigNumberish;
    buyerCancelPenalty: BigNumberish;
    quantityAvailable: BigNumberish;
    exchangeToken: string;
    metadataUri: string;
    metadataHash: string;
    voided: boolean;
  };

  export type OfferStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    boolean
  ] & {
    id: BigNumber;
    sellerId: BigNumber;
    price: BigNumber;
    sellerDeposit: BigNumber;
    buyerCancelPenalty: BigNumber;
    quantityAvailable: BigNumber;
    exchangeToken: string;
    metadataUri: string;
    metadataHash: string;
    voided: boolean;
  };

  export type OfferDatesStruct = {
    validFrom: BigNumberish;
    validUntil: BigNumberish;
    voucherRedeemableFrom: BigNumberish;
    voucherRedeemableUntil: BigNumberish;
  };

  export type OfferDatesStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    validFrom: BigNumber;
    validUntil: BigNumber;
    voucherRedeemableFrom: BigNumber;
    voucherRedeemableUntil: BigNumber;
  };

  export type OfferDurationsStruct = {
    disputePeriod: BigNumberish;
    voucherValid: BigNumberish;
    resolutionPeriod: BigNumberish;
  };

  export type OfferDurationsStructOutput = [BigNumber, BigNumber, BigNumber] & {
    disputePeriod: BigNumber;
    voucherValid: BigNumber;
    resolutionPeriod: BigNumber;
  };

  export type DisputeResolutionTermsStruct = {
    disputeResolverId: BigNumberish;
    escalationResponsePeriod: BigNumberish;
    feeAmount: BigNumberish;
    buyerEscalationDeposit: BigNumberish;
  };

  export type DisputeResolutionTermsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    disputeResolverId: BigNumber;
    escalationResponsePeriod: BigNumber;
    feeAmount: BigNumber;
    buyerEscalationDeposit: BigNumber;
  };

  export type OfferFeesStruct = {
    protocolFee: BigNumberish;
    agentFee: BigNumberish;
  };

  export type OfferFeesStructOutput = [BigNumber, BigNumber] & {
    protocolFee: BigNumber;
    agentFee: BigNumber;
  };

  export type SellerStruct = {
    id: BigNumberish;
    operator: string;
    admin: string;
    clerk: string;
    treasury: string;
    active: boolean;
  };

  export type SellerStructOutput = [
    BigNumber,
    string,
    string,
    string,
    string,
    boolean
  ] & {
    id: BigNumber;
    operator: string;
    admin: string;
    clerk: string;
    treasury: string;
    active: boolean;
  };

  export type AuthTokenStruct = {
    tokenId: BigNumberish;
    tokenType: BigNumberish;
  };

  export type AuthTokenStructOutput = [BigNumber, number] & {
    tokenId: BigNumber;
    tokenType: number;
  };

  export type TwinStruct = {
    id: BigNumberish;
    sellerId: BigNumberish;
    amount: BigNumberish;
    supplyAvailable: BigNumberish;
    tokenId: BigNumberish;
    tokenAddress: string;
    tokenType: BigNumberish;
  };

  export type TwinStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    number
  ] & {
    id: BigNumber;
    sellerId: BigNumber;
    amount: BigNumber;
    supplyAvailable: BigNumber;
    tokenId: BigNumber;
    tokenAddress: string;
    tokenType: number;
  };

  export type VoucherInitValuesStruct = {
    contractURI: string;
    royaltyPercentage: BigNumberish;
  };

  export type VoucherInitValuesStructOutput = [string, BigNumber] & {
    contractURI: string;
    royaltyPercentage: BigNumber;
  };
}

export interface IBosonOrchestrationHandlerInterface extends utils.Interface {
  contractName: "IBosonOrchestrationHandler";
  functions: {
    "createOfferAddToGroup((uint256,uint256,uint256,uint256,uint256,uint256,address,string,string,bool),(uint256,uint256,uint256,uint256),(uint256,uint256,uint256),uint256,uint256,uint256)": FunctionFragment;
    "createOfferAndTwinWithBundle((uint256,uint256,uint256,uint256,uint256,uint256,address,string,string,bool),(uint256,uint256,uint256,uint256),(uint256,uint256,uint256),uint256,(uint256,uint256,uint256,uint256,uint256,address,uint8),uint256)": FunctionFragment;
    "createOfferWithCondition((uint256,uint256,uint256,uint256,uint256,uint256,address,string,string,bool),(uint256,uint256,uint256,uint256),(uint256,uint256,uint256),uint256,(uint8,uint8,address,uint256,uint256,uint256),uint256)": FunctionFragment;
    "createOfferWithConditionAndTwinAndBundle((uint256,uint256,uint256,uint256,uint256,uint256,address,string,string,bool),(uint256,uint256,uint256,uint256),(uint256,uint256,uint256),uint256,(uint8,uint8,address,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256,address,uint8),uint256)": FunctionFragment;
    "createSellerAndOffer((uint256,address,address,address,address,bool),(uint256,uint256,uint256,uint256,uint256,uint256,address,string,string,bool),(uint256,uint256,uint256,uint256),(uint256,uint256,uint256),uint256,(uint256,uint8),(string,uint256),uint256)": FunctionFragment;
    "createSellerAndOfferAndTwinWithBundle((uint256,address,address,address,address,bool),(uint256,uint256,uint256,uint256,uint256,uint256,address,string,string,bool),(uint256,uint256,uint256,uint256),(uint256,uint256,uint256),uint256,(uint256,uint256,uint256,uint256,uint256,address,uint8),(uint256,uint8),(string,uint256),uint256)": FunctionFragment;
    "createSellerAndOfferWithCondition((uint256,address,address,address,address,bool),(uint256,uint256,uint256,uint256,uint256,uint256,address,string,string,bool),(uint256,uint256,uint256,uint256),(uint256,uint256,uint256),uint256,(uint8,uint8,address,uint256,uint256,uint256),(uint256,uint8),(string,uint256),uint256)": FunctionFragment;
    "createSellerAndOfferWithConditionAndTwinAndBundle((uint256,address,address,address,address,bool),(uint256,uint256,uint256,uint256,uint256,uint256,address,string,string,bool),(uint256,uint256,uint256,uint256),(uint256,uint256,uint256),uint256,(uint8,uint8,address,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256,address,uint8),(uint256,uint8),(string,uint256),uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createOfferAddToGroup",
    values: [
      BosonTypes.OfferStruct,
      BosonTypes.OfferDatesStruct,
      BosonTypes.OfferDurationsStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createOfferAndTwinWithBundle",
    values: [
      BosonTypes.OfferStruct,
      BosonTypes.OfferDatesStruct,
      BosonTypes.OfferDurationsStruct,
      BigNumberish,
      BosonTypes.TwinStruct,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createOfferWithCondition",
    values: [
      BosonTypes.OfferStruct,
      BosonTypes.OfferDatesStruct,
      BosonTypes.OfferDurationsStruct,
      BigNumberish,
      BosonTypes.ConditionStruct,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createOfferWithConditionAndTwinAndBundle",
    values: [
      BosonTypes.OfferStruct,
      BosonTypes.OfferDatesStruct,
      BosonTypes.OfferDurationsStruct,
      BigNumberish,
      BosonTypes.ConditionStruct,
      BosonTypes.TwinStruct,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createSellerAndOffer",
    values: [
      BosonTypes.SellerStruct,
      BosonTypes.OfferStruct,
      BosonTypes.OfferDatesStruct,
      BosonTypes.OfferDurationsStruct,
      BigNumberish,
      BosonTypes.AuthTokenStruct,
      BosonTypes.VoucherInitValuesStruct,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createSellerAndOfferAndTwinWithBundle",
    values: [
      BosonTypes.SellerStruct,
      BosonTypes.OfferStruct,
      BosonTypes.OfferDatesStruct,
      BosonTypes.OfferDurationsStruct,
      BigNumberish,
      BosonTypes.TwinStruct,
      BosonTypes.AuthTokenStruct,
      BosonTypes.VoucherInitValuesStruct,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createSellerAndOfferWithCondition",
    values: [
      BosonTypes.SellerStruct,
      BosonTypes.OfferStruct,
      BosonTypes.OfferDatesStruct,
      BosonTypes.OfferDurationsStruct,
      BigNumberish,
      BosonTypes.ConditionStruct,
      BosonTypes.AuthTokenStruct,
      BosonTypes.VoucherInitValuesStruct,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createSellerAndOfferWithConditionAndTwinAndBundle",
    values: [
      BosonTypes.SellerStruct,
      BosonTypes.OfferStruct,
      BosonTypes.OfferDatesStruct,
      BosonTypes.OfferDurationsStruct,
      BigNumberish,
      BosonTypes.ConditionStruct,
      BosonTypes.TwinStruct,
      BosonTypes.AuthTokenStruct,
      BosonTypes.VoucherInitValuesStruct,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "createOfferAddToGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOfferAndTwinWithBundle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOfferWithCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOfferWithConditionAndTwinAndBundle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSellerAndOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSellerAndOfferAndTwinWithBundle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSellerAndOfferWithCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSellerAndOfferWithConditionAndTwinAndBundle",
    data: BytesLike
  ): Result;

  events: {
    "AgentCreated(uint256,tuple,address)": EventFragment;
    "AgentUpdated(uint256,tuple,address)": EventFragment;
    "AllowedSellersAdded(uint256,uint256[],address)": EventFragment;
    "AllowedSellersRemoved(uint256,uint256[],address)": EventFragment;
    "BundleCreated(uint256,uint256,tuple,address)": EventFragment;
    "BuyerCreated(uint256,tuple,address)": EventFragment;
    "BuyerUpdated(uint256,tuple,address)": EventFragment;
    "DisputeResolverActivated(uint256,tuple,address)": EventFragment;
    "DisputeResolverCreated(uint256,tuple,tuple[],uint256[],address)": EventFragment;
    "DisputeResolverFeesAdded(uint256,tuple[],address)": EventFragment;
    "DisputeResolverFeesRemoved(uint256,address[],address)": EventFragment;
    "DisputeResolverUpdated(uint256,tuple,address)": EventFragment;
    "GroupCreated(uint256,uint256,tuple,tuple,address)": EventFragment;
    "GroupUpdated(uint256,uint256,tuple,tuple,address)": EventFragment;
    "OfferCreated(uint256,uint256,tuple,tuple,tuple,tuple,tuple,uint256,address)": EventFragment;
    "OfferExtended(uint256,uint256,uint256,address)": EventFragment;
    "OfferVoided(uint256,uint256,address)": EventFragment;
    "SellerCreated(uint256,tuple,address,tuple,address)": EventFragment;
    "SellerUpdated(uint256,tuple,tuple,address)": EventFragment;
    "TwinCreated(uint256,uint256,tuple,address)": EventFragment;
    "TwinDeleted(uint256,uint256,address)": EventFragment;
    "TwinTransferFailed(uint256,address,uint256,uint256,uint256,address)": EventFragment;
    "TwinTransferred(uint256,address,uint256,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AgentCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgentUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllowedSellersAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllowedSellersRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BundleCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyerCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeResolverActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeResolverCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeResolverFeesAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeResolverFeesRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeResolverUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GroupCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GroupUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferVoided"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellerCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TwinCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TwinDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TwinTransferFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TwinTransferred"): EventFragment;
}

export type AgentCreatedEvent = TypedEvent<
  [BigNumber, BosonTypes.AgentStructOutput, string],
  {
    agentId: BigNumber;
    agent: BosonTypes.AgentStructOutput;
    executedBy: string;
  }
>;

export type AgentCreatedEventFilter = TypedEventFilter<AgentCreatedEvent>;

export type AgentUpdatedEvent = TypedEvent<
  [BigNumber, BosonTypes.AgentStructOutput, string],
  {
    agentId: BigNumber;
    agent: BosonTypes.AgentStructOutput;
    executedBy: string;
  }
>;

export type AgentUpdatedEventFilter = TypedEventFilter<AgentUpdatedEvent>;

export type AllowedSellersAddedEvent = TypedEvent<
  [BigNumber, BigNumber[], string],
  {
    disputeResolverId: BigNumber;
    addedSellers: BigNumber[];
    executedBy: string;
  }
>;

export type AllowedSellersAddedEventFilter =
  TypedEventFilter<AllowedSellersAddedEvent>;

export type AllowedSellersRemovedEvent = TypedEvent<
  [BigNumber, BigNumber[], string],
  {
    disputeResolverId: BigNumber;
    removedSellers: BigNumber[];
    executedBy: string;
  }
>;

export type AllowedSellersRemovedEventFilter =
  TypedEventFilter<AllowedSellersRemovedEvent>;

export type BundleCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, BosonTypes.BundleStructOutput, string],
  {
    bundleId: BigNumber;
    sellerId: BigNumber;
    bundle: BosonTypes.BundleStructOutput;
    executedBy: string;
  }
>;

export type BundleCreatedEventFilter = TypedEventFilter<BundleCreatedEvent>;

export type BuyerCreatedEvent = TypedEvent<
  [BigNumber, BosonTypes.BuyerStructOutput, string],
  {
    buyerId: BigNumber;
    buyer: BosonTypes.BuyerStructOutput;
    executedBy: string;
  }
>;

export type BuyerCreatedEventFilter = TypedEventFilter<BuyerCreatedEvent>;

export type BuyerUpdatedEvent = TypedEvent<
  [BigNumber, BosonTypes.BuyerStructOutput, string],
  {
    buyerId: BigNumber;
    buyer: BosonTypes.BuyerStructOutput;
    executedBy: string;
  }
>;

export type BuyerUpdatedEventFilter = TypedEventFilter<BuyerUpdatedEvent>;

export type DisputeResolverActivatedEvent = TypedEvent<
  [BigNumber, BosonTypes.DisputeResolverStructOutput, string],
  {
    disputeResolverId: BigNumber;
    disputeResolver: BosonTypes.DisputeResolverStructOutput;
    executedBy: string;
  }
>;

export type DisputeResolverActivatedEventFilter =
  TypedEventFilter<DisputeResolverActivatedEvent>;

export type DisputeResolverCreatedEvent = TypedEvent<
  [
    BigNumber,
    BosonTypes.DisputeResolverStructOutput,
    BosonTypes.DisputeResolverFeeStructOutput[],
    BigNumber[],
    string
  ],
  {
    disputeResolverId: BigNumber;
    disputeResolver: BosonTypes.DisputeResolverStructOutput;
    disputeResolverFees: BosonTypes.DisputeResolverFeeStructOutput[];
    sellerAllowList: BigNumber[];
    executedBy: string;
  }
>;

export type DisputeResolverCreatedEventFilter =
  TypedEventFilter<DisputeResolverCreatedEvent>;

export type DisputeResolverFeesAddedEvent = TypedEvent<
  [BigNumber, BosonTypes.DisputeResolverFeeStructOutput[], string],
  {
    disputeResolverId: BigNumber;
    disputeResolverFees: BosonTypes.DisputeResolverFeeStructOutput[];
    executedBy: string;
  }
>;

export type DisputeResolverFeesAddedEventFilter =
  TypedEventFilter<DisputeResolverFeesAddedEvent>;

export type DisputeResolverFeesRemovedEvent = TypedEvent<
  [BigNumber, string[], string],
  {
    disputeResolverId: BigNumber;
    feeTokensRemoved: string[];
    executedBy: string;
  }
>;

export type DisputeResolverFeesRemovedEventFilter =
  TypedEventFilter<DisputeResolverFeesRemovedEvent>;

export type DisputeResolverUpdatedEvent = TypedEvent<
  [BigNumber, BosonTypes.DisputeResolverStructOutput, string],
  {
    disputeResolverId: BigNumber;
    disputeResolver: BosonTypes.DisputeResolverStructOutput;
    executedBy: string;
  }
>;

export type DisputeResolverUpdatedEventFilter =
  TypedEventFilter<DisputeResolverUpdatedEvent>;

export type GroupCreatedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BosonTypes.GroupStructOutput,
    BosonTypes.ConditionStructOutput,
    string
  ],
  {
    groupId: BigNumber;
    sellerId: BigNumber;
    group: BosonTypes.GroupStructOutput;
    condition: BosonTypes.ConditionStructOutput;
    executedBy: string;
  }
>;

export type GroupCreatedEventFilter = TypedEventFilter<GroupCreatedEvent>;

export type GroupUpdatedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BosonTypes.GroupStructOutput,
    BosonTypes.ConditionStructOutput,
    string
  ],
  {
    groupId: BigNumber;
    sellerId: BigNumber;
    group: BosonTypes.GroupStructOutput;
    condition: BosonTypes.ConditionStructOutput;
    executedBy: string;
  }
>;

export type GroupUpdatedEventFilter = TypedEventFilter<GroupUpdatedEvent>;

export type OfferCreatedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BosonTypes.OfferStructOutput,
    BosonTypes.OfferDatesStructOutput,
    BosonTypes.OfferDurationsStructOutput,
    BosonTypes.DisputeResolutionTermsStructOutput,
    BosonTypes.OfferFeesStructOutput,
    BigNumber,
    string
  ],
  {
    offerId: BigNumber;
    sellerId: BigNumber;
    offer: BosonTypes.OfferStructOutput;
    offerDates: BosonTypes.OfferDatesStructOutput;
    offerDurations: BosonTypes.OfferDurationsStructOutput;
    disputeResolutionTerms: BosonTypes.DisputeResolutionTermsStructOutput;
    offerFees: BosonTypes.OfferFeesStructOutput;
    agentId: BigNumber;
    executedBy: string;
  }
>;

export type OfferCreatedEventFilter = TypedEventFilter<OfferCreatedEvent>;

export type OfferExtendedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  {
    offerId: BigNumber;
    sellerId: BigNumber;
    validUntilDate: BigNumber;
    executedBy: string;
  }
>;

export type OfferExtendedEventFilter = TypedEventFilter<OfferExtendedEvent>;

export type OfferVoidedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { offerId: BigNumber; sellerId: BigNumber; executedBy: string }
>;

export type OfferVoidedEventFilter = TypedEventFilter<OfferVoidedEvent>;

export type SellerCreatedEvent = TypedEvent<
  [
    BigNumber,
    BosonTypes.SellerStructOutput,
    string,
    BosonTypes.AuthTokenStructOutput,
    string
  ],
  {
    sellerId: BigNumber;
    seller: BosonTypes.SellerStructOutput;
    voucherCloneAddress: string;
    authToken: BosonTypes.AuthTokenStructOutput;
    executedBy: string;
  }
>;

export type SellerCreatedEventFilter = TypedEventFilter<SellerCreatedEvent>;

export type SellerUpdatedEvent = TypedEvent<
  [
    BigNumber,
    BosonTypes.SellerStructOutput,
    BosonTypes.AuthTokenStructOutput,
    string
  ],
  {
    sellerId: BigNumber;
    seller: BosonTypes.SellerStructOutput;
    authToken: BosonTypes.AuthTokenStructOutput;
    executedBy: string;
  }
>;

export type SellerUpdatedEventFilter = TypedEventFilter<SellerUpdatedEvent>;

export type TwinCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, BosonTypes.TwinStructOutput, string],
  {
    twinId: BigNumber;
    sellerId: BigNumber;
    twin: BosonTypes.TwinStructOutput;
    executedBy: string;
  }
>;

export type TwinCreatedEventFilter = TypedEventFilter<TwinCreatedEvent>;

export type TwinDeletedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { twinId: BigNumber; sellerId: BigNumber; executedBy: string }
>;

export type TwinDeletedEventFilter = TypedEventFilter<TwinDeletedEvent>;

export type TwinTransferFailedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber, string],
  {
    twinId: BigNumber;
    tokenAddress: string;
    exchangeId: BigNumber;
    tokenId: BigNumber;
    amount: BigNumber;
    executedBy: string;
  }
>;

export type TwinTransferFailedEventFilter =
  TypedEventFilter<TwinTransferFailedEvent>;

export type TwinTransferredEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber, string],
  {
    twinId: BigNumber;
    tokenAddress: string;
    exchangeId: BigNumber;
    tokenId: BigNumber;
    amount: BigNumber;
    executedBy: string;
  }
>;

export type TwinTransferredEventFilter = TypedEventFilter<TwinTransferredEvent>;

export interface IBosonOrchestrationHandler extends BaseContract {
  contractName: "IBosonOrchestrationHandler";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBosonOrchestrationHandlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createOfferAddToGroup(
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _groupId: BigNumberish,
      _agentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createOfferAndTwinWithBundle(
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _twin: BosonTypes.TwinStruct,
      _agentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createOfferWithCondition(
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _condition: BosonTypes.ConditionStruct,
      _agentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createOfferWithConditionAndTwinAndBundle(
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _condition: BosonTypes.ConditionStruct,
      _twin: BosonTypes.TwinStruct,
      _agentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createSellerAndOffer(
      _seller: BosonTypes.SellerStruct,
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _authToken: BosonTypes.AuthTokenStruct,
      _voucherInitValues: BosonTypes.VoucherInitValuesStruct,
      _agentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createSellerAndOfferAndTwinWithBundle(
      _seller: BosonTypes.SellerStruct,
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _twin: BosonTypes.TwinStruct,
      _authToken: BosonTypes.AuthTokenStruct,
      _voucherInitValues: BosonTypes.VoucherInitValuesStruct,
      _agentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createSellerAndOfferWithCondition(
      _seller: BosonTypes.SellerStruct,
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _condition: BosonTypes.ConditionStruct,
      _authToken: BosonTypes.AuthTokenStruct,
      _voucherInitValues: BosonTypes.VoucherInitValuesStruct,
      _agentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createSellerAndOfferWithConditionAndTwinAndBundle(
      _seller: BosonTypes.SellerStruct,
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _condition: BosonTypes.ConditionStruct,
      _twin: BosonTypes.TwinStruct,
      _authToken: BosonTypes.AuthTokenStruct,
      _voucherInitValues: BosonTypes.VoucherInitValuesStruct,
      _agentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createOfferAddToGroup(
    _offer: BosonTypes.OfferStruct,
    _offerDates: BosonTypes.OfferDatesStruct,
    _offerDurations: BosonTypes.OfferDurationsStruct,
    _disputeResolverId: BigNumberish,
    _groupId: BigNumberish,
    _agentId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createOfferAndTwinWithBundle(
    _offer: BosonTypes.OfferStruct,
    _offerDates: BosonTypes.OfferDatesStruct,
    _offerDurations: BosonTypes.OfferDurationsStruct,
    _disputeResolverId: BigNumberish,
    _twin: BosonTypes.TwinStruct,
    _agentId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createOfferWithCondition(
    _offer: BosonTypes.OfferStruct,
    _offerDates: BosonTypes.OfferDatesStruct,
    _offerDurations: BosonTypes.OfferDurationsStruct,
    _disputeResolverId: BigNumberish,
    _condition: BosonTypes.ConditionStruct,
    _agentId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createOfferWithConditionAndTwinAndBundle(
    _offer: BosonTypes.OfferStruct,
    _offerDates: BosonTypes.OfferDatesStruct,
    _offerDurations: BosonTypes.OfferDurationsStruct,
    _disputeResolverId: BigNumberish,
    _condition: BosonTypes.ConditionStruct,
    _twin: BosonTypes.TwinStruct,
    _agentId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createSellerAndOffer(
    _seller: BosonTypes.SellerStruct,
    _offer: BosonTypes.OfferStruct,
    _offerDates: BosonTypes.OfferDatesStruct,
    _offerDurations: BosonTypes.OfferDurationsStruct,
    _disputeResolverId: BigNumberish,
    _authToken: BosonTypes.AuthTokenStruct,
    _voucherInitValues: BosonTypes.VoucherInitValuesStruct,
    _agentId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createSellerAndOfferAndTwinWithBundle(
    _seller: BosonTypes.SellerStruct,
    _offer: BosonTypes.OfferStruct,
    _offerDates: BosonTypes.OfferDatesStruct,
    _offerDurations: BosonTypes.OfferDurationsStruct,
    _disputeResolverId: BigNumberish,
    _twin: BosonTypes.TwinStruct,
    _authToken: BosonTypes.AuthTokenStruct,
    _voucherInitValues: BosonTypes.VoucherInitValuesStruct,
    _agentId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createSellerAndOfferWithCondition(
    _seller: BosonTypes.SellerStruct,
    _offer: BosonTypes.OfferStruct,
    _offerDates: BosonTypes.OfferDatesStruct,
    _offerDurations: BosonTypes.OfferDurationsStruct,
    _disputeResolverId: BigNumberish,
    _condition: BosonTypes.ConditionStruct,
    _authToken: BosonTypes.AuthTokenStruct,
    _voucherInitValues: BosonTypes.VoucherInitValuesStruct,
    _agentId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createSellerAndOfferWithConditionAndTwinAndBundle(
    _seller: BosonTypes.SellerStruct,
    _offer: BosonTypes.OfferStruct,
    _offerDates: BosonTypes.OfferDatesStruct,
    _offerDurations: BosonTypes.OfferDurationsStruct,
    _disputeResolverId: BigNumberish,
    _condition: BosonTypes.ConditionStruct,
    _twin: BosonTypes.TwinStruct,
    _authToken: BosonTypes.AuthTokenStruct,
    _voucherInitValues: BosonTypes.VoucherInitValuesStruct,
    _agentId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createOfferAddToGroup(
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _groupId: BigNumberish,
      _agentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createOfferAndTwinWithBundle(
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _twin: BosonTypes.TwinStruct,
      _agentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createOfferWithCondition(
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _condition: BosonTypes.ConditionStruct,
      _agentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createOfferWithConditionAndTwinAndBundle(
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _condition: BosonTypes.ConditionStruct,
      _twin: BosonTypes.TwinStruct,
      _agentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createSellerAndOffer(
      _seller: BosonTypes.SellerStruct,
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _authToken: BosonTypes.AuthTokenStruct,
      _voucherInitValues: BosonTypes.VoucherInitValuesStruct,
      _agentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createSellerAndOfferAndTwinWithBundle(
      _seller: BosonTypes.SellerStruct,
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _twin: BosonTypes.TwinStruct,
      _authToken: BosonTypes.AuthTokenStruct,
      _voucherInitValues: BosonTypes.VoucherInitValuesStruct,
      _agentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createSellerAndOfferWithCondition(
      _seller: BosonTypes.SellerStruct,
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _condition: BosonTypes.ConditionStruct,
      _authToken: BosonTypes.AuthTokenStruct,
      _voucherInitValues: BosonTypes.VoucherInitValuesStruct,
      _agentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createSellerAndOfferWithConditionAndTwinAndBundle(
      _seller: BosonTypes.SellerStruct,
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _condition: BosonTypes.ConditionStruct,
      _twin: BosonTypes.TwinStruct,
      _authToken: BosonTypes.AuthTokenStruct,
      _voucherInitValues: BosonTypes.VoucherInitValuesStruct,
      _agentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AgentCreated(uint256,tuple,address)"(
      agentId?: BigNumberish | null,
      agent?: null,
      executedBy?: string | null
    ): AgentCreatedEventFilter;
    AgentCreated(
      agentId?: BigNumberish | null,
      agent?: null,
      executedBy?: string | null
    ): AgentCreatedEventFilter;

    "AgentUpdated(uint256,tuple,address)"(
      agentId?: BigNumberish | null,
      agent?: null,
      executedBy?: string | null
    ): AgentUpdatedEventFilter;
    AgentUpdated(
      agentId?: BigNumberish | null,
      agent?: null,
      executedBy?: string | null
    ): AgentUpdatedEventFilter;

    "AllowedSellersAdded(uint256,uint256[],address)"(
      disputeResolverId?: BigNumberish | null,
      addedSellers?: null,
      executedBy?: string | null
    ): AllowedSellersAddedEventFilter;
    AllowedSellersAdded(
      disputeResolverId?: BigNumberish | null,
      addedSellers?: null,
      executedBy?: string | null
    ): AllowedSellersAddedEventFilter;

    "AllowedSellersRemoved(uint256,uint256[],address)"(
      disputeResolverId?: BigNumberish | null,
      removedSellers?: null,
      executedBy?: string | null
    ): AllowedSellersRemovedEventFilter;
    AllowedSellersRemoved(
      disputeResolverId?: BigNumberish | null,
      removedSellers?: null,
      executedBy?: string | null
    ): AllowedSellersRemovedEventFilter;

    "BundleCreated(uint256,uint256,tuple,address)"(
      bundleId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      bundle?: null,
      executedBy?: string | null
    ): BundleCreatedEventFilter;
    BundleCreated(
      bundleId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      bundle?: null,
      executedBy?: string | null
    ): BundleCreatedEventFilter;

    "BuyerCreated(uint256,tuple,address)"(
      buyerId?: BigNumberish | null,
      buyer?: null,
      executedBy?: string | null
    ): BuyerCreatedEventFilter;
    BuyerCreated(
      buyerId?: BigNumberish | null,
      buyer?: null,
      executedBy?: string | null
    ): BuyerCreatedEventFilter;

    "BuyerUpdated(uint256,tuple,address)"(
      buyerId?: BigNumberish | null,
      buyer?: null,
      executedBy?: string | null
    ): BuyerUpdatedEventFilter;
    BuyerUpdated(
      buyerId?: BigNumberish | null,
      buyer?: null,
      executedBy?: string | null
    ): BuyerUpdatedEventFilter;

    "DisputeResolverActivated(uint256,tuple,address)"(
      disputeResolverId?: BigNumberish | null,
      disputeResolver?: null,
      executedBy?: string | null
    ): DisputeResolverActivatedEventFilter;
    DisputeResolverActivated(
      disputeResolverId?: BigNumberish | null,
      disputeResolver?: null,
      executedBy?: string | null
    ): DisputeResolverActivatedEventFilter;

    "DisputeResolverCreated(uint256,tuple,tuple[],uint256[],address)"(
      disputeResolverId?: BigNumberish | null,
      disputeResolver?: null,
      disputeResolverFees?: null,
      sellerAllowList?: null,
      executedBy?: string | null
    ): DisputeResolverCreatedEventFilter;
    DisputeResolverCreated(
      disputeResolverId?: BigNumberish | null,
      disputeResolver?: null,
      disputeResolverFees?: null,
      sellerAllowList?: null,
      executedBy?: string | null
    ): DisputeResolverCreatedEventFilter;

    "DisputeResolverFeesAdded(uint256,tuple[],address)"(
      disputeResolverId?: BigNumberish | null,
      disputeResolverFees?: null,
      executedBy?: string | null
    ): DisputeResolverFeesAddedEventFilter;
    DisputeResolverFeesAdded(
      disputeResolverId?: BigNumberish | null,
      disputeResolverFees?: null,
      executedBy?: string | null
    ): DisputeResolverFeesAddedEventFilter;

    "DisputeResolverFeesRemoved(uint256,address[],address)"(
      disputeResolverId?: BigNumberish | null,
      feeTokensRemoved?: null,
      executedBy?: string | null
    ): DisputeResolverFeesRemovedEventFilter;
    DisputeResolverFeesRemoved(
      disputeResolverId?: BigNumberish | null,
      feeTokensRemoved?: null,
      executedBy?: string | null
    ): DisputeResolverFeesRemovedEventFilter;

    "DisputeResolverUpdated(uint256,tuple,address)"(
      disputeResolverId?: BigNumberish | null,
      disputeResolver?: null,
      executedBy?: string | null
    ): DisputeResolverUpdatedEventFilter;
    DisputeResolverUpdated(
      disputeResolverId?: BigNumberish | null,
      disputeResolver?: null,
      executedBy?: string | null
    ): DisputeResolverUpdatedEventFilter;

    "GroupCreated(uint256,uint256,tuple,tuple,address)"(
      groupId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      group?: null,
      condition?: null,
      executedBy?: string | null
    ): GroupCreatedEventFilter;
    GroupCreated(
      groupId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      group?: null,
      condition?: null,
      executedBy?: string | null
    ): GroupCreatedEventFilter;

    "GroupUpdated(uint256,uint256,tuple,tuple,address)"(
      groupId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      group?: null,
      condition?: null,
      executedBy?: string | null
    ): GroupUpdatedEventFilter;
    GroupUpdated(
      groupId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      group?: null,
      condition?: null,
      executedBy?: string | null
    ): GroupUpdatedEventFilter;

    "OfferCreated(uint256,uint256,tuple,tuple,tuple,tuple,tuple,uint256,address)"(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      offer?: null,
      offerDates?: null,
      offerDurations?: null,
      disputeResolutionTerms?: null,
      offerFees?: null,
      agentId?: BigNumberish | null,
      executedBy?: null
    ): OfferCreatedEventFilter;
    OfferCreated(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      offer?: null,
      offerDates?: null,
      offerDurations?: null,
      disputeResolutionTerms?: null,
      offerFees?: null,
      agentId?: BigNumberish | null,
      executedBy?: null
    ): OfferCreatedEventFilter;

    "OfferExtended(uint256,uint256,uint256,address)"(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      validUntilDate?: null,
      executedBy?: string | null
    ): OfferExtendedEventFilter;
    OfferExtended(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      validUntilDate?: null,
      executedBy?: string | null
    ): OfferExtendedEventFilter;

    "OfferVoided(uint256,uint256,address)"(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      executedBy?: string | null
    ): OfferVoidedEventFilter;
    OfferVoided(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      executedBy?: string | null
    ): OfferVoidedEventFilter;

    "SellerCreated(uint256,tuple,address,tuple,address)"(
      sellerId?: BigNumberish | null,
      seller?: null,
      voucherCloneAddress?: null,
      authToken?: null,
      executedBy?: string | null
    ): SellerCreatedEventFilter;
    SellerCreated(
      sellerId?: BigNumberish | null,
      seller?: null,
      voucherCloneAddress?: null,
      authToken?: null,
      executedBy?: string | null
    ): SellerCreatedEventFilter;

    "SellerUpdated(uint256,tuple,tuple,address)"(
      sellerId?: BigNumberish | null,
      seller?: null,
      authToken?: null,
      executedBy?: string | null
    ): SellerUpdatedEventFilter;
    SellerUpdated(
      sellerId?: BigNumberish | null,
      seller?: null,
      authToken?: null,
      executedBy?: string | null
    ): SellerUpdatedEventFilter;

    "TwinCreated(uint256,uint256,tuple,address)"(
      twinId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      twin?: null,
      executedBy?: string | null
    ): TwinCreatedEventFilter;
    TwinCreated(
      twinId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      twin?: null,
      executedBy?: string | null
    ): TwinCreatedEventFilter;

    "TwinDeleted(uint256,uint256,address)"(
      twinId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      executedBy?: string | null
    ): TwinDeletedEventFilter;
    TwinDeleted(
      twinId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      executedBy?: string | null
    ): TwinDeletedEventFilter;

    "TwinTransferFailed(uint256,address,uint256,uint256,uint256,address)"(
      twinId?: BigNumberish | null,
      tokenAddress?: string | null,
      exchangeId?: BigNumberish | null,
      tokenId?: null,
      amount?: null,
      executedBy?: null
    ): TwinTransferFailedEventFilter;
    TwinTransferFailed(
      twinId?: BigNumberish | null,
      tokenAddress?: string | null,
      exchangeId?: BigNumberish | null,
      tokenId?: null,
      amount?: null,
      executedBy?: null
    ): TwinTransferFailedEventFilter;

    "TwinTransferred(uint256,address,uint256,uint256,uint256,address)"(
      twinId?: BigNumberish | null,
      tokenAddress?: string | null,
      exchangeId?: BigNumberish | null,
      tokenId?: null,
      amount?: null,
      executedBy?: null
    ): TwinTransferredEventFilter;
    TwinTransferred(
      twinId?: BigNumberish | null,
      tokenAddress?: string | null,
      exchangeId?: BigNumberish | null,
      tokenId?: null,
      amount?: null,
      executedBy?: null
    ): TwinTransferredEventFilter;
  };

  estimateGas: {
    createOfferAddToGroup(
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _groupId: BigNumberish,
      _agentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createOfferAndTwinWithBundle(
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _twin: BosonTypes.TwinStruct,
      _agentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createOfferWithCondition(
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _condition: BosonTypes.ConditionStruct,
      _agentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createOfferWithConditionAndTwinAndBundle(
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _condition: BosonTypes.ConditionStruct,
      _twin: BosonTypes.TwinStruct,
      _agentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createSellerAndOffer(
      _seller: BosonTypes.SellerStruct,
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _authToken: BosonTypes.AuthTokenStruct,
      _voucherInitValues: BosonTypes.VoucherInitValuesStruct,
      _agentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createSellerAndOfferAndTwinWithBundle(
      _seller: BosonTypes.SellerStruct,
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _twin: BosonTypes.TwinStruct,
      _authToken: BosonTypes.AuthTokenStruct,
      _voucherInitValues: BosonTypes.VoucherInitValuesStruct,
      _agentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createSellerAndOfferWithCondition(
      _seller: BosonTypes.SellerStruct,
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _condition: BosonTypes.ConditionStruct,
      _authToken: BosonTypes.AuthTokenStruct,
      _voucherInitValues: BosonTypes.VoucherInitValuesStruct,
      _agentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createSellerAndOfferWithConditionAndTwinAndBundle(
      _seller: BosonTypes.SellerStruct,
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _condition: BosonTypes.ConditionStruct,
      _twin: BosonTypes.TwinStruct,
      _authToken: BosonTypes.AuthTokenStruct,
      _voucherInitValues: BosonTypes.VoucherInitValuesStruct,
      _agentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createOfferAddToGroup(
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _groupId: BigNumberish,
      _agentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createOfferAndTwinWithBundle(
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _twin: BosonTypes.TwinStruct,
      _agentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createOfferWithCondition(
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _condition: BosonTypes.ConditionStruct,
      _agentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createOfferWithConditionAndTwinAndBundle(
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _condition: BosonTypes.ConditionStruct,
      _twin: BosonTypes.TwinStruct,
      _agentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createSellerAndOffer(
      _seller: BosonTypes.SellerStruct,
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _authToken: BosonTypes.AuthTokenStruct,
      _voucherInitValues: BosonTypes.VoucherInitValuesStruct,
      _agentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createSellerAndOfferAndTwinWithBundle(
      _seller: BosonTypes.SellerStruct,
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _twin: BosonTypes.TwinStruct,
      _authToken: BosonTypes.AuthTokenStruct,
      _voucherInitValues: BosonTypes.VoucherInitValuesStruct,
      _agentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createSellerAndOfferWithCondition(
      _seller: BosonTypes.SellerStruct,
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _condition: BosonTypes.ConditionStruct,
      _authToken: BosonTypes.AuthTokenStruct,
      _voucherInitValues: BosonTypes.VoucherInitValuesStruct,
      _agentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createSellerAndOfferWithConditionAndTwinAndBundle(
      _seller: BosonTypes.SellerStruct,
      _offer: BosonTypes.OfferStruct,
      _offerDates: BosonTypes.OfferDatesStruct,
      _offerDurations: BosonTypes.OfferDurationsStruct,
      _disputeResolverId: BigNumberish,
      _condition: BosonTypes.ConditionStruct,
      _twin: BosonTypes.TwinStruct,
      _authToken: BosonTypes.AuthTokenStruct,
      _voucherInitValues: BosonTypes.VoucherInitValuesStruct,
      _agentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
