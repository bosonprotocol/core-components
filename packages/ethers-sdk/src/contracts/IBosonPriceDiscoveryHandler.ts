/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace BosonTypes {
  export type ExchangeStruct = {
    id: BigNumberish;
    offerId: BigNumberish;
    buyerId: BigNumberish;
    finalizedDate: BigNumberish;
    state: BigNumberish;
    mutualizerAddress: string;
  };

  export type ExchangeStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    string
  ] & {
    id: BigNumber;
    offerId: BigNumber;
    buyerId: BigNumber;
    finalizedDate: BigNumber;
    state: number;
    mutualizerAddress: string;
  };

  export type VoucherStruct = {
    committedDate: BigNumberish;
    validUntilDate: BigNumberish;
    redeemedDate: BigNumberish;
    expired: boolean;
  };

  export type VoucherStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    committedDate: BigNumber;
    validUntilDate: BigNumber;
    redeemedDate: BigNumber;
    expired: boolean;
  };

  export type RoyaltyInfoStruct = { recipients: string[]; bps: BigNumberish[] };

  export type RoyaltyInfoStructOutput = [string[], BigNumber[]] & {
    recipients: string[];
    bps: BigNumber[];
  };

  export type SellerOfferParamsStruct = {
    collectionIndex: BigNumberish;
    royaltyInfo: BosonTypes.RoyaltyInfoStruct;
    mutualizerAddress: string;
  };

  export type SellerOfferParamsStructOutput = [
    BigNumber,
    BosonTypes.RoyaltyInfoStructOutput,
    string
  ] & {
    collectionIndex: BigNumber;
    royaltyInfo: BosonTypes.RoyaltyInfoStructOutput;
    mutualizerAddress: string;
  };

  export type TwinStruct = {
    id: BigNumberish;
    sellerId: BigNumberish;
    amount: BigNumberish;
    supplyAvailable: BigNumberish;
    tokenId: BigNumberish;
    tokenAddress: string;
    tokenType: BigNumberish;
  };

  export type TwinStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    number
  ] & {
    id: BigNumber;
    sellerId: BigNumber;
    amount: BigNumber;
    supplyAvailable: BigNumber;
    tokenId: BigNumber;
    tokenAddress: string;
    tokenType: number;
  };

  export type PriceDiscoveryStruct = {
    price: BigNumberish;
    side: BigNumberish;
    priceDiscoveryContract: string;
    conduit: string;
    priceDiscoveryData: BytesLike;
  };

  export type PriceDiscoveryStructOutput = [
    BigNumber,
    number,
    string,
    string,
    string
  ] & {
    price: BigNumber;
    side: number;
    priceDiscoveryContract: string;
    conduit: string;
    priceDiscoveryData: string;
  };
}

export interface IBosonPriceDiscoveryHandlerInterface extends utils.Interface {
  contractName: "IBosonPriceDiscoveryHandler";
  functions: {
    "commitToPriceDiscoveryOffer(address,uint256,(uint256,uint8,address,address,bytes))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "commitToPriceDiscoveryOffer",
    values: [string, BigNumberish, BosonTypes.PriceDiscoveryStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "commitToPriceDiscoveryOffer",
    data: BytesLike
  ): Result;

  events: {
    "BuyerCommitted(uint256,uint256,uint256,tuple,tuple,address)": EventFragment;
    "BuyerInitiatedOfferSetSellerParams(uint256,uint256,tuple,address)": EventFragment;
    "ConditionalCommitAuthorized(uint256,uint8,address,uint256,uint256,uint256)": EventFragment;
    "DRFeeRequested(uint256,address,uint256,address,address)": EventFragment;
    "DRFeeReturned(uint256,address,uint256,address,address)": EventFragment;
    "ExchangeCompleted(uint256,uint256,uint256,address)": EventFragment;
    "FundsEncumbered(uint256,address,uint256,address)": EventFragment;
    "FundsReleased(uint256,uint256,address,uint256,address)": EventFragment;
    "FundsWithdrawn(uint256,address,address,uint256,address)": EventFragment;
    "ProtocolFeeCollected(uint256,address,uint256,address)": EventFragment;
    "SellerCommitted(uint256,uint256,uint256,tuple,tuple,address)": EventFragment;
    "TwinCreated(uint256,uint256,tuple,address)": EventFragment;
    "TwinDeleted(uint256,uint256,address)": EventFragment;
    "TwinTransferFailed(uint256,address,uint256,uint256,uint256,address)": EventFragment;
    "TwinTransferSkipped(uint256,uint256,address)": EventFragment;
    "TwinTransferred(uint256,address,uint256,uint256,uint256,address)": EventFragment;
    "VoucherCanceled(uint256,uint256,address)": EventFragment;
    "VoucherExpired(uint256,uint256,address)": EventFragment;
    "VoucherExtended(uint256,uint256,uint256,address)": EventFragment;
    "VoucherRedeemed(uint256,uint256,address)": EventFragment;
    "VoucherRevoked(uint256,uint256,address)": EventFragment;
    "VoucherTransferred(uint256,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BuyerCommitted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BuyerInitiatedOfferSetSellerParams"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ConditionalCommitAuthorized"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DRFeeRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DRFeeReturned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsEncumbered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsReleased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolFeeCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellerCommitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TwinCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TwinDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TwinTransferFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TwinTransferSkipped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TwinTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoucherCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoucherExpired"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoucherExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoucherRedeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoucherRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoucherTransferred"): EventFragment;
}

export type BuyerCommittedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    BosonTypes.ExchangeStructOutput,
    BosonTypes.VoucherStructOutput,
    string
  ],
  {
    offerId: BigNumber;
    buyerId: BigNumber;
    exchangeId: BigNumber;
    exchange: BosonTypes.ExchangeStructOutput;
    voucher: BosonTypes.VoucherStructOutput;
    executedBy: string;
  }
>;

export type BuyerCommittedEventFilter = TypedEventFilter<BuyerCommittedEvent>;

export type BuyerInitiatedOfferSetSellerParamsEvent = TypedEvent<
  [BigNumber, BigNumber, BosonTypes.SellerOfferParamsStructOutput, string],
  {
    offerId: BigNumber;
    sellerId: BigNumber;
    sellerParams: BosonTypes.SellerOfferParamsStructOutput;
    executedBy: string;
  }
>;

export type BuyerInitiatedOfferSetSellerParamsEventFilter =
  TypedEventFilter<BuyerInitiatedOfferSetSellerParamsEvent>;

export type ConditionalCommitAuthorizedEvent = TypedEvent<
  [BigNumber, number, string, BigNumber, BigNumber, BigNumber],
  {
    offerId: BigNumber;
    gating: number;
    buyerAddress: string;
    tokenId: BigNumber;
    commitCount: BigNumber;
    maxCommits: BigNumber;
  }
>;

export type ConditionalCommitAuthorizedEventFilter =
  TypedEventFilter<ConditionalCommitAuthorizedEvent>;

export type DRFeeRequestedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, string],
  {
    exchangeId: BigNumber;
    tokenAddress: string;
    feeAmount: BigNumber;
    mutualizerAddress: string;
    executedBy: string;
  }
>;

export type DRFeeRequestedEventFilter = TypedEventFilter<DRFeeRequestedEvent>;

export type DRFeeReturnedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, string],
  {
    exchangeId: BigNumber;
    tokenAddress: string;
    returnAmount: BigNumber;
    mutualizerAddress: string;
    executedBy: string;
  }
>;

export type DRFeeReturnedEventFilter = TypedEventFilter<DRFeeReturnedEvent>;

export type ExchangeCompletedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  {
    offerId: BigNumber;
    buyerId: BigNumber;
    exchangeId: BigNumber;
    executedBy: string;
  }
>;

export type ExchangeCompletedEventFilter =
  TypedEventFilter<ExchangeCompletedEvent>;

export type FundsEncumberedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  {
    entityId: BigNumber;
    exchangeToken: string;
    amount: BigNumber;
    executedBy: string;
  }
>;

export type FundsEncumberedEventFilter = TypedEventFilter<FundsEncumberedEvent>;

export type FundsReleasedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, string],
  {
    exchangeId: BigNumber;
    entityId: BigNumber;
    exchangeToken: string;
    amount: BigNumber;
    executedBy: string;
  }
>;

export type FundsReleasedEventFilter = TypedEventFilter<FundsReleasedEvent>;

export type FundsWithdrawnEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, string],
  {
    sellerId: BigNumber;
    withdrawnTo: string;
    tokenAddress: string;
    amount: BigNumber;
    executedBy: string;
  }
>;

export type FundsWithdrawnEventFilter = TypedEventFilter<FundsWithdrawnEvent>;

export type ProtocolFeeCollectedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  {
    exchangeId: BigNumber;
    exchangeToken: string;
    amount: BigNumber;
    executedBy: string;
  }
>;

export type ProtocolFeeCollectedEventFilter =
  TypedEventFilter<ProtocolFeeCollectedEvent>;

export type SellerCommittedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    BosonTypes.ExchangeStructOutput,
    BosonTypes.VoucherStructOutput,
    string
  ],
  {
    offerId: BigNumber;
    sellerId: BigNumber;
    exchangeId: BigNumber;
    exchange: BosonTypes.ExchangeStructOutput;
    voucher: BosonTypes.VoucherStructOutput;
    executedBy: string;
  }
>;

export type SellerCommittedEventFilter = TypedEventFilter<SellerCommittedEvent>;

export type TwinCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, BosonTypes.TwinStructOutput, string],
  {
    twinId: BigNumber;
    sellerId: BigNumber;
    twin: BosonTypes.TwinStructOutput;
    executedBy: string;
  }
>;

export type TwinCreatedEventFilter = TypedEventFilter<TwinCreatedEvent>;

export type TwinDeletedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { twinId: BigNumber; sellerId: BigNumber; executedBy: string }
>;

export type TwinDeletedEventFilter = TypedEventFilter<TwinDeletedEvent>;

export type TwinTransferFailedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber, string],
  {
    twinId: BigNumber;
    tokenAddress: string;
    exchangeId: BigNumber;
    tokenId: BigNumber;
    amount: BigNumber;
    executedBy: string;
  }
>;

export type TwinTransferFailedEventFilter =
  TypedEventFilter<TwinTransferFailedEvent>;

export type TwinTransferSkippedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { exchangeId: BigNumber; twinCount: BigNumber; executedBy: string }
>;

export type TwinTransferSkippedEventFilter =
  TypedEventFilter<TwinTransferSkippedEvent>;

export type TwinTransferredEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber, string],
  {
    twinId: BigNumber;
    tokenAddress: string;
    exchangeId: BigNumber;
    tokenId: BigNumber;
    amount: BigNumber;
    executedBy: string;
  }
>;

export type TwinTransferredEventFilter = TypedEventFilter<TwinTransferredEvent>;

export type VoucherCanceledEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { offerId: BigNumber; exchangeId: BigNumber; executedBy: string }
>;

export type VoucherCanceledEventFilter = TypedEventFilter<VoucherCanceledEvent>;

export type VoucherExpiredEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { offerId: BigNumber; exchangeId: BigNumber; executedBy: string }
>;

export type VoucherExpiredEventFilter = TypedEventFilter<VoucherExpiredEvent>;

export type VoucherExtendedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  {
    offerId: BigNumber;
    exchangeId: BigNumber;
    validUntil: BigNumber;
    executedBy: string;
  }
>;

export type VoucherExtendedEventFilter = TypedEventFilter<VoucherExtendedEvent>;

export type VoucherRedeemedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { offerId: BigNumber; exchangeId: BigNumber; executedBy: string }
>;

export type VoucherRedeemedEventFilter = TypedEventFilter<VoucherRedeemedEvent>;

export type VoucherRevokedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { offerId: BigNumber; exchangeId: BigNumber; executedBy: string }
>;

export type VoucherRevokedEventFilter = TypedEventFilter<VoucherRevokedEvent>;

export type VoucherTransferredEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  {
    offerId: BigNumber;
    exchangeId: BigNumber;
    newBuyerId: BigNumber;
    executedBy: string;
  }
>;

export type VoucherTransferredEventFilter =
  TypedEventFilter<VoucherTransferredEvent>;

export interface IBosonPriceDiscoveryHandler extends BaseContract {
  contractName: "IBosonPriceDiscoveryHandler";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBosonPriceDiscoveryHandlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    commitToPriceDiscoveryOffer(
      _buyer: string,
      _tokenIdOrOfferId: BigNumberish,
      _priceDiscovery: BosonTypes.PriceDiscoveryStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  commitToPriceDiscoveryOffer(
    _buyer: string,
    _tokenIdOrOfferId: BigNumberish,
    _priceDiscovery: BosonTypes.PriceDiscoveryStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    commitToPriceDiscoveryOffer(
      _buyer: string,
      _tokenIdOrOfferId: BigNumberish,
      _priceDiscovery: BosonTypes.PriceDiscoveryStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BuyerCommitted(uint256,uint256,uint256,tuple,tuple,address)"(
      offerId?: BigNumberish | null,
      buyerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      exchange?: null,
      voucher?: null,
      executedBy?: null
    ): BuyerCommittedEventFilter;
    BuyerCommitted(
      offerId?: BigNumberish | null,
      buyerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      exchange?: null,
      voucher?: null,
      executedBy?: null
    ): BuyerCommittedEventFilter;

    "BuyerInitiatedOfferSetSellerParams(uint256,uint256,tuple,address)"(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      sellerParams?: null,
      executedBy?: null
    ): BuyerInitiatedOfferSetSellerParamsEventFilter;
    BuyerInitiatedOfferSetSellerParams(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      sellerParams?: null,
      executedBy?: null
    ): BuyerInitiatedOfferSetSellerParamsEventFilter;

    "ConditionalCommitAuthorized(uint256,uint8,address,uint256,uint256,uint256)"(
      offerId?: BigNumberish | null,
      gating?: null,
      buyerAddress?: string | null,
      tokenId?: BigNumberish | null,
      commitCount?: null,
      maxCommits?: null
    ): ConditionalCommitAuthorizedEventFilter;
    ConditionalCommitAuthorized(
      offerId?: BigNumberish | null,
      gating?: null,
      buyerAddress?: string | null,
      tokenId?: BigNumberish | null,
      commitCount?: null,
      maxCommits?: null
    ): ConditionalCommitAuthorizedEventFilter;

    "DRFeeRequested(uint256,address,uint256,address,address)"(
      exchangeId?: BigNumberish | null,
      tokenAddress?: string | null,
      feeAmount?: null,
      mutualizerAddress?: string | null,
      executedBy?: null
    ): DRFeeRequestedEventFilter;
    DRFeeRequested(
      exchangeId?: BigNumberish | null,
      tokenAddress?: string | null,
      feeAmount?: null,
      mutualizerAddress?: string | null,
      executedBy?: null
    ): DRFeeRequestedEventFilter;

    "DRFeeReturned(uint256,address,uint256,address,address)"(
      exchangeId?: BigNumberish | null,
      tokenAddress?: string | null,
      returnAmount?: null,
      mutualizerAddress?: null,
      executedBy?: null
    ): DRFeeReturnedEventFilter;
    DRFeeReturned(
      exchangeId?: BigNumberish | null,
      tokenAddress?: string | null,
      returnAmount?: null,
      mutualizerAddress?: null,
      executedBy?: null
    ): DRFeeReturnedEventFilter;

    "ExchangeCompleted(uint256,uint256,uint256,address)"(
      offerId?: BigNumberish | null,
      buyerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      executedBy?: null
    ): ExchangeCompletedEventFilter;
    ExchangeCompleted(
      offerId?: BigNumberish | null,
      buyerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      executedBy?: null
    ): ExchangeCompletedEventFilter;

    "FundsEncumbered(uint256,address,uint256,address)"(
      entityId?: BigNumberish | null,
      exchangeToken?: string | null,
      amount?: null,
      executedBy?: string | null
    ): FundsEncumberedEventFilter;
    FundsEncumbered(
      entityId?: BigNumberish | null,
      exchangeToken?: string | null,
      amount?: null,
      executedBy?: string | null
    ): FundsEncumberedEventFilter;

    "FundsReleased(uint256,uint256,address,uint256,address)"(
      exchangeId?: BigNumberish | null,
      entityId?: BigNumberish | null,
      exchangeToken?: string | null,
      amount?: null,
      executedBy?: null
    ): FundsReleasedEventFilter;
    FundsReleased(
      exchangeId?: BigNumberish | null,
      entityId?: BigNumberish | null,
      exchangeToken?: string | null,
      amount?: null,
      executedBy?: null
    ): FundsReleasedEventFilter;

    "FundsWithdrawn(uint256,address,address,uint256,address)"(
      sellerId?: BigNumberish | null,
      withdrawnTo?: string | null,
      tokenAddress?: string | null,
      amount?: null,
      executedBy?: null
    ): FundsWithdrawnEventFilter;
    FundsWithdrawn(
      sellerId?: BigNumberish | null,
      withdrawnTo?: string | null,
      tokenAddress?: string | null,
      amount?: null,
      executedBy?: null
    ): FundsWithdrawnEventFilter;

    "ProtocolFeeCollected(uint256,address,uint256,address)"(
      exchangeId?: BigNumberish | null,
      exchangeToken?: string | null,
      amount?: null,
      executedBy?: string | null
    ): ProtocolFeeCollectedEventFilter;
    ProtocolFeeCollected(
      exchangeId?: BigNumberish | null,
      exchangeToken?: string | null,
      amount?: null,
      executedBy?: string | null
    ): ProtocolFeeCollectedEventFilter;

    "SellerCommitted(uint256,uint256,uint256,tuple,tuple,address)"(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      exchange?: null,
      voucher?: null,
      executedBy?: null
    ): SellerCommittedEventFilter;
    SellerCommitted(
      offerId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      exchange?: null,
      voucher?: null,
      executedBy?: null
    ): SellerCommittedEventFilter;

    "TwinCreated(uint256,uint256,tuple,address)"(
      twinId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      twin?: null,
      executedBy?: string | null
    ): TwinCreatedEventFilter;
    TwinCreated(
      twinId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      twin?: null,
      executedBy?: string | null
    ): TwinCreatedEventFilter;

    "TwinDeleted(uint256,uint256,address)"(
      twinId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      executedBy?: string | null
    ): TwinDeletedEventFilter;
    TwinDeleted(
      twinId?: BigNumberish | null,
      sellerId?: BigNumberish | null,
      executedBy?: string | null
    ): TwinDeletedEventFilter;

    "TwinTransferFailed(uint256,address,uint256,uint256,uint256,address)"(
      twinId?: BigNumberish | null,
      tokenAddress?: string | null,
      exchangeId?: BigNumberish | null,
      tokenId?: null,
      amount?: null,
      executedBy?: null
    ): TwinTransferFailedEventFilter;
    TwinTransferFailed(
      twinId?: BigNumberish | null,
      tokenAddress?: string | null,
      exchangeId?: BigNumberish | null,
      tokenId?: null,
      amount?: null,
      executedBy?: null
    ): TwinTransferFailedEventFilter;

    "TwinTransferSkipped(uint256,uint256,address)"(
      exchangeId?: BigNumberish | null,
      twinCount?: null,
      executedBy?: string | null
    ): TwinTransferSkippedEventFilter;
    TwinTransferSkipped(
      exchangeId?: BigNumberish | null,
      twinCount?: null,
      executedBy?: string | null
    ): TwinTransferSkippedEventFilter;

    "TwinTransferred(uint256,address,uint256,uint256,uint256,address)"(
      twinId?: BigNumberish | null,
      tokenAddress?: string | null,
      exchangeId?: BigNumberish | null,
      tokenId?: null,
      amount?: null,
      executedBy?: null
    ): TwinTransferredEventFilter;
    TwinTransferred(
      twinId?: BigNumberish | null,
      tokenAddress?: string | null,
      exchangeId?: BigNumberish | null,
      tokenId?: null,
      amount?: null,
      executedBy?: null
    ): TwinTransferredEventFilter;

    "VoucherCanceled(uint256,uint256,address)"(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      executedBy?: string | null
    ): VoucherCanceledEventFilter;
    VoucherCanceled(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      executedBy?: string | null
    ): VoucherCanceledEventFilter;

    "VoucherExpired(uint256,uint256,address)"(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      executedBy?: string | null
    ): VoucherExpiredEventFilter;
    VoucherExpired(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      executedBy?: string | null
    ): VoucherExpiredEventFilter;

    "VoucherExtended(uint256,uint256,uint256,address)"(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      validUntil?: null,
      executedBy?: string | null
    ): VoucherExtendedEventFilter;
    VoucherExtended(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      validUntil?: null,
      executedBy?: string | null
    ): VoucherExtendedEventFilter;

    "VoucherRedeemed(uint256,uint256,address)"(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      executedBy?: string | null
    ): VoucherRedeemedEventFilter;
    VoucherRedeemed(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      executedBy?: string | null
    ): VoucherRedeemedEventFilter;

    "VoucherRevoked(uint256,uint256,address)"(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      executedBy?: string | null
    ): VoucherRevokedEventFilter;
    VoucherRevoked(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      executedBy?: string | null
    ): VoucherRevokedEventFilter;

    "VoucherTransferred(uint256,uint256,uint256,address)"(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      newBuyerId?: BigNumberish | null,
      executedBy?: null
    ): VoucherTransferredEventFilter;
    VoucherTransferred(
      offerId?: BigNumberish | null,
      exchangeId?: BigNumberish | null,
      newBuyerId?: BigNumberish | null,
      executedBy?: null
    ): VoucherTransferredEventFilter;
  };

  estimateGas: {
    commitToPriceDiscoveryOffer(
      _buyer: string,
      _tokenIdOrOfferId: BigNumberish,
      _priceDiscovery: BosonTypes.PriceDiscoveryStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    commitToPriceDiscoveryOffer(
      _buyer: string,
      _tokenIdOrOfferId: BigNumberish,
      _priceDiscovery: BosonTypes.PriceDiscoveryStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
