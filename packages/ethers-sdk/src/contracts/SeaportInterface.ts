/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace SeaportInterface {
  export type OfferItemStruct = {
    itemType: BigNumberish;
    token: string;
    identifierOrCriteria: BigNumberish;
    startAmount: BigNumberish;
    endAmount: BigNumberish;
  };

  export type OfferItemStructOutput = [
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    itemType: number;
    token: string;
    identifierOrCriteria: BigNumber;
    startAmount: BigNumber;
    endAmount: BigNumber;
  };

  export type ConsiderationItemStruct = {
    itemType: BigNumberish;
    token: string;
    identifierOrCriteria: BigNumberish;
    startAmount: BigNumberish;
    endAmount: BigNumberish;
    recipient: string;
  };

  export type ConsiderationItemStructOutput = [
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    itemType: number;
    token: string;
    identifierOrCriteria: BigNumber;
    startAmount: BigNumber;
    endAmount: BigNumber;
    recipient: string;
  };

  export type OrderParametersStruct = {
    offerer: string;
    zone: string;
    offer: SeaportInterface.OfferItemStruct[];
    consideration: SeaportInterface.ConsiderationItemStruct[];
    orderType: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    zoneHash: BytesLike;
    salt: BigNumberish;
    conduitKey: BytesLike;
    totalOriginalConsiderationItems: BigNumberish;
  };

  export type OrderParametersStructOutput = [
    string,
    string,
    SeaportInterface.OfferItemStructOutput[],
    SeaportInterface.ConsiderationItemStructOutput[],
    number,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber
  ] & {
    offerer: string;
    zone: string;
    offer: SeaportInterface.OfferItemStructOutput[];
    consideration: SeaportInterface.ConsiderationItemStructOutput[];
    orderType: number;
    startTime: BigNumber;
    endTime: BigNumber;
    zoneHash: string;
    salt: BigNumber;
    conduitKey: string;
    totalOriginalConsiderationItems: BigNumber;
  };

  export type AdvancedOrderStruct = {
    parameters: SeaportInterface.OrderParametersStruct;
    numerator: BigNumberish;
    denominator: BigNumberish;
    signature: BytesLike;
    extraData: BytesLike;
  };

  export type AdvancedOrderStructOutput = [
    SeaportInterface.OrderParametersStructOutput,
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    parameters: SeaportInterface.OrderParametersStructOutput;
    numerator: BigNumber;
    denominator: BigNumber;
    signature: string;
    extraData: string;
  };

  export type CriteriaResolverStruct = {
    orderIndex: BigNumberish;
    side: BigNumberish;
    index: BigNumberish;
    identifier: BigNumberish;
    criteriaProof: BytesLike[];
  };

  export type CriteriaResolverStructOutput = [
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    string[]
  ] & {
    orderIndex: BigNumber;
    side: number;
    index: BigNumber;
    identifier: BigNumber;
    criteriaProof: string[];
  };

  export type FulfillmentComponentStruct = {
    orderIndex: BigNumberish;
    itemIndex: BigNumberish;
  };

  export type FulfillmentComponentStructOutput = [BigNumber, BigNumber] & {
    orderIndex: BigNumber;
    itemIndex: BigNumber;
  };

  export type FulfillmentStruct = {
    offerComponents: SeaportInterface.FulfillmentComponentStruct[];
    considerationComponents: SeaportInterface.FulfillmentComponentStruct[];
  };

  export type FulfillmentStructOutput = [
    SeaportInterface.FulfillmentComponentStructOutput[],
    SeaportInterface.FulfillmentComponentStructOutput[]
  ] & {
    offerComponents: SeaportInterface.FulfillmentComponentStructOutput[];
    considerationComponents: SeaportInterface.FulfillmentComponentStructOutput[];
  };

  export type ReceivedItemStruct = {
    itemType: BigNumberish;
    token: string;
    identifier: BigNumberish;
    amount: BigNumberish;
    recipient: string;
  };

  export type ReceivedItemStructOutput = [
    number,
    string,
    BigNumber,
    BigNumber,
    string
  ] & {
    itemType: number;
    token: string;
    identifier: BigNumber;
    amount: BigNumber;
    recipient: string;
  };

  export type ExecutionStruct = {
    item: SeaportInterface.ReceivedItemStruct;
    offerer: string;
    conduitKey: BytesLike;
  };

  export type ExecutionStructOutput = [
    SeaportInterface.ReceivedItemStructOutput,
    string,
    string
  ] & {
    item: SeaportInterface.ReceivedItemStructOutput;
    offerer: string;
    conduitKey: string;
  };

  export type OrderStruct = {
    parameters: SeaportInterface.OrderParametersStruct;
    signature: BytesLike;
  };

  export type OrderStructOutput = [
    SeaportInterface.OrderParametersStructOutput,
    string
  ] & {
    parameters: SeaportInterface.OrderParametersStructOutput;
    signature: string;
  };
}

export interface SeaportInterfaceInterface extends utils.Interface {
  contractName: "SeaportInterface";
  functions: {
    "matchAdvancedOrders(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),uint120,uint120,bytes,bytes)[],(uint256,uint8,uint256,uint256,bytes32[])[],((uint256,uint256)[],(uint256,uint256)[])[],address)": FunctionFragment;
    "validate(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),bytes)[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "matchAdvancedOrders",
    values: [
      SeaportInterface.AdvancedOrderStruct[],
      SeaportInterface.CriteriaResolverStruct[],
      SeaportInterface.FulfillmentStruct[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validate",
    values: [SeaportInterface.OrderStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "matchAdvancedOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validate", data: BytesLike): Result;

  events: {};
}

export interface SeaportInterface extends BaseContract {
  contractName: "SeaportInterface";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SeaportInterfaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    matchAdvancedOrders(
      orders: SeaportInterface.AdvancedOrderStruct[],
      criteriaResolvers: SeaportInterface.CriteriaResolverStruct[],
      fulfillments: SeaportInterface.FulfillmentStruct[],
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validate(
      orders: SeaportInterface.OrderStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  matchAdvancedOrders(
    orders: SeaportInterface.AdvancedOrderStruct[],
    criteriaResolvers: SeaportInterface.CriteriaResolverStruct[],
    fulfillments: SeaportInterface.FulfillmentStruct[],
    recipient: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validate(
    orders: SeaportInterface.OrderStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    matchAdvancedOrders(
      orders: SeaportInterface.AdvancedOrderStruct[],
      criteriaResolvers: SeaportInterface.CriteriaResolverStruct[],
      fulfillments: SeaportInterface.FulfillmentStruct[],
      recipient: string,
      overrides?: CallOverrides
    ): Promise<SeaportInterface.ExecutionStructOutput[]>;

    validate(
      orders: SeaportInterface.OrderStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    matchAdvancedOrders(
      orders: SeaportInterface.AdvancedOrderStruct[],
      criteriaResolvers: SeaportInterface.CriteriaResolverStruct[],
      fulfillments: SeaportInterface.FulfillmentStruct[],
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validate(
      orders: SeaportInterface.OrderStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    matchAdvancedOrders(
      orders: SeaportInterface.AdvancedOrderStruct[],
      criteriaResolvers: SeaportInterface.CriteriaResolverStruct[],
      fulfillments: SeaportInterface.FulfillmentStruct[],
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validate(
      orders: SeaportInterface.OrderStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
