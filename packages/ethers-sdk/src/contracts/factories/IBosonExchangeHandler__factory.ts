/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IBosonExchangeHandler,
  IBosonExchangeHandlerInterface,
} from "../IBosonExchangeHandler";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "offerId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "buyerId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "exchangeId",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "offerId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "buyerId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "finalizedDate",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "committedDate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "validUntilDate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "redeemedDate",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "expired",
                type: "bool",
              },
            ],
            internalType: "struct BosonTypes.Voucher",
            name: "voucher",
            type: "tuple",
          },
          {
            internalType: "bool",
            name: "disputed",
            type: "bool",
          },
          {
            internalType: "enum BosonTypes.ExchangeState",
            name: "state",
            type: "uint8",
          },
        ],
        indexed: false,
        internalType: "struct BosonTypes.Exchange",
        name: "exchange",
        type: "tuple",
      },
    ],
    name: "BuyerCommitted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_buyer",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_offerId",
        type: "uint256",
      },
    ],
    name: "commitToOffer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_exchangeId",
        type: "uint256",
      },
    ],
    name: "getExchange",
    outputs: [
      {
        internalType: "bool",
        name: "exists",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "offerId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "buyerId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "finalizedDate",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "committedDate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "validUntilDate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "redeemedDate",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "expired",
                type: "bool",
              },
            ],
            internalType: "struct BosonTypes.Voucher",
            name: "voucher",
            type: "tuple",
          },
          {
            internalType: "bool",
            name: "disputed",
            type: "bool",
          },
          {
            internalType: "enum BosonTypes.ExchangeState",
            name: "state",
            type: "uint8",
          },
        ],
        internalType: "struct BosonTypes.Exchange",
        name: "exchange",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_exchangeId",
        type: "uint256",
      },
    ],
    name: "getExchangeState",
    outputs: [
      {
        internalType: "bool",
        name: "exists",
        type: "bool",
      },
      {
        internalType: "enum BosonTypes.ExchangeState",
        name: "state",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNextExchangeId",
    outputs: [
      {
        internalType: "uint256",
        name: "nextExchangeId",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_exchangeId",
        type: "uint256",
      },
    ],
    name: "isExchangeFinalized",
    outputs: [
      {
        internalType: "bool",
        name: "exists",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "isFinalized",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class IBosonExchangeHandler__factory {
  static readonly abi = _abi;
  static createInterface(): IBosonExchangeHandlerInterface {
    return new utils.Interface(_abi) as IBosonExchangeHandlerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IBosonExchangeHandler {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IBosonExchangeHandler;
  }
}
