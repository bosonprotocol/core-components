/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IBosonGroupHandlerLegacy,
  IBosonGroupHandlerLegacyInterface,
} from "../IBosonGroupHandlerLegacy";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "groupId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "sellerId",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "sellerId",
            type: "uint256",
          },
          {
            internalType: "uint256[]",
            name: "offerIds",
            type: "uint256[]",
          },
        ],
        indexed: false,
        internalType: "struct BosonTypes.Group",
        name: "group",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum BosonTypes.EvaluationMethod",
            name: "method",
            type: "uint8",
          },
          {
            internalType: "enum BosonTypes.TokenType",
            name: "tokenType",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "threshold",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxCommits",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct BosonTypes.Condition",
        name: "condition",
        type: "tuple",
      },
      {
        indexed: true,
        internalType: "address",
        name: "executedBy",
        type: "address",
      },
    ],
    name: "GroupCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "groupId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "sellerId",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "sellerId",
            type: "uint256",
          },
          {
            internalType: "uint256[]",
            name: "offerIds",
            type: "uint256[]",
          },
        ],
        indexed: false,
        internalType: "struct BosonTypes.Group",
        name: "group",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum BosonTypes.EvaluationMethod",
            name: "method",
            type: "uint8",
          },
          {
            internalType: "enum BosonTypes.TokenType",
            name: "tokenType",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "threshold",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxCommits",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct BosonTypes.Condition",
        name: "condition",
        type: "tuple",
      },
      {
        indexed: true,
        internalType: "address",
        name: "executedBy",
        type: "address",
      },
    ],
    name: "GroupUpdated",
    type: "event",
  },
];

export class IBosonGroupHandlerLegacy__factory {
  static readonly abi = _abi;
  static createInterface(): IBosonGroupHandlerLegacyInterface {
    return new utils.Interface(_abi) as IBosonGroupHandlerLegacyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IBosonGroupHandlerLegacy {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IBosonGroupHandlerLegacy;
  }
}
