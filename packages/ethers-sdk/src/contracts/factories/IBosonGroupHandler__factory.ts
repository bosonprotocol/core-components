/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IBosonGroupHandler,
  IBosonGroupHandlerInterface,
} from "../IBosonGroupHandler";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "groupId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "sellerId",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "sellerId",
            type: "uint256",
          },
          {
            internalType: "uint256[]",
            name: "offerIds",
            type: "uint256[]",
          },
        ],
        indexed: false,
        internalType: "struct BosonTypes.Group",
        name: "group",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum BosonTypes.EvaluationMethod",
            name: "method",
            type: "uint8",
          },
          {
            internalType: "enum BosonTypes.TokenType",
            name: "tokenType",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "threshold",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxCommits",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct BosonTypes.Condition",
        name: "condition",
        type: "tuple",
      },
      {
        indexed: true,
        internalType: "address",
        name: "executedBy",
        type: "address",
      },
    ],
    name: "GroupCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "groupId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "sellerId",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "sellerId",
            type: "uint256",
          },
          {
            internalType: "uint256[]",
            name: "offerIds",
            type: "uint256[]",
          },
        ],
        indexed: false,
        internalType: "struct BosonTypes.Group",
        name: "group",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum BosonTypes.EvaluationMethod",
            name: "method",
            type: "uint8",
          },
          {
            internalType: "enum BosonTypes.TokenType",
            name: "tokenType",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "threshold",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxCommits",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct BosonTypes.Condition",
        name: "condition",
        type: "tuple",
      },
      {
        indexed: true,
        internalType: "address",
        name: "executedBy",
        type: "address",
      },
    ],
    name: "GroupUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_groupId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_offerIds",
        type: "uint256[]",
      },
    ],
    name: "addOffersToGroup",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "sellerId",
            type: "uint256",
          },
          {
            internalType: "uint256[]",
            name: "offerIds",
            type: "uint256[]",
          },
        ],
        internalType: "struct BosonTypes.Group",
        name: "_group",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum BosonTypes.EvaluationMethod",
            name: "method",
            type: "uint8",
          },
          {
            internalType: "enum BosonTypes.TokenType",
            name: "tokenType",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "threshold",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxCommits",
            type: "uint256",
          },
        ],
        internalType: "struct BosonTypes.Condition",
        name: "_condition",
        type: "tuple",
      },
    ],
    name: "createGroup",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_groupId",
        type: "uint256",
      },
    ],
    name: "getGroup",
    outputs: [
      {
        internalType: "bool",
        name: "exists",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "sellerId",
            type: "uint256",
          },
          {
            internalType: "uint256[]",
            name: "offerIds",
            type: "uint256[]",
          },
        ],
        internalType: "struct BosonTypes.Group",
        name: "group",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum BosonTypes.EvaluationMethod",
            name: "method",
            type: "uint8",
          },
          {
            internalType: "enum BosonTypes.TokenType",
            name: "tokenType",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "threshold",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxCommits",
            type: "uint256",
          },
        ],
        internalType: "struct BosonTypes.Condition",
        name: "condition",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNextGroupId",
    outputs: [
      {
        internalType: "uint256",
        name: "nextGroupId",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_groupId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_offerIds",
        type: "uint256[]",
      },
    ],
    name: "removeOffersFromGroup",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_groupId",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "enum BosonTypes.EvaluationMethod",
            name: "method",
            type: "uint8",
          },
          {
            internalType: "enum BosonTypes.TokenType",
            name: "tokenType",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "threshold",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxCommits",
            type: "uint256",
          },
        ],
        internalType: "struct BosonTypes.Condition",
        name: "_condition",
        type: "tuple",
      },
    ],
    name: "setGroupCondition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IBosonGroupHandler__factory {
  static readonly abi = _abi;
  static createInterface(): IBosonGroupHandlerInterface {
    return new utils.Interface(_abi) as IBosonGroupHandlerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IBosonGroupHandler {
    return new Contract(address, _abi, signerOrProvider) as IBosonGroupHandler;
  }
}
