/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IDRFeeMutualizer,
  IDRFeeMutualizerInterface,
} from "../IDRFeeMutualizer";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_exchangeId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_feeAmount",
        type: "uint256",
      },
    ],
    name: "finalizeExchange",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_sellerId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_feeAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_disputeResolverId",
        type: "uint256",
      },
    ],
    name: "isSellerCovered",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_sellerId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_feeAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_exchangeId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_disputeResolverId",
        type: "uint256",
      },
    ],
    name: "requestDRFee",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class IDRFeeMutualizer__factory {
  static readonly abi = _abi;
  static createInterface(): IDRFeeMutualizerInterface {
    return new utils.Interface(_abi) as IDRFeeMutualizerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IDRFeeMutualizer {
    return new Contract(address, _abi, signerOrProvider) as IDRFeeMutualizer;
  }
}
