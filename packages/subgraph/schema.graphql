enum MetadataType {
  BASE
  PRODUCT_V1
}

interface MetadataInterface {
  """
  Fields compliant to metadata standard
  """
  id: ID! # [OFFER_ID]-metadata
  name: String!
  description: String!
  externalUrl: String! # Arbitrary URL which is linked to metadata
  schemaUrl: String! # JSON schema URL
  type: MetadataType!
  image: String!
  attributes: [MetadataAttribute!]
  """
  References to entities
  """
  offer: Offer!
  seller: Seller!
  exchangeToken: ExchangeToken!
  """
  Enriched fields from offer entity to allow nested query workaround
  """
  createdAt: BigInt!
  voided: Boolean!
  validFromDate: BigInt!
  validUntilDate: BigInt!
  quantityAvailable: BigInt!
}

type MetadataAttribute @entity {
  id: ID!
  traitType: String!
  value: String!
  displayType: String!
}

type BaseMetadataEntity implements MetadataInterface @entity {
  """
  Fields compliant to metadata standard
  """
  id: ID!
  name: String!
  description: String!
  externalUrl: String! # Arbitrary URL which is linked to metadata
  schemaUrl: String! # JSON schema URL
  "MetadataType.BASE"
  type: MetadataType!
  image: String!
  attributes: [MetadataAttribute!]
  """
  References to entities
  """
  offer: Offer!
  seller: Seller!
  exchangeToken: ExchangeToken!
  """
  Enriched fields from offer entity to allow nested query workaround
  """
  createdAt: BigInt!
  voided: Boolean!
  validFromDate: BigInt!
  validUntilDate: BigInt!
  quantityAvailable: BigInt!
}

type ProductV1MetadataEntity implements MetadataInterface @entity {
  """
  Fields compliant to metadata standard
  """
  id: ID!
  name: String!
  description: String!
  externalUrl: String! # Arbitrary URL which is linked to metadata
  schemaUrl: String! # JSON schema URL
  "MetadataType.PRODUCT_V1"
  type: MetadataType!
  image: String!
  attributes: [MetadataAttribute!]
  """
  References to entities
  """
  offer: Offer!
  seller: Seller!
  exchangeToken: ExchangeToken!
  """
  Enriched fields from offer entity to allow nested query workaround
  """
  createdAt: BigInt!
  voided: Boolean!
  validFromDate: BigInt!
  validUntilDate: BigInt!
  quantityAvailable: BigInt!
  """
  PRODUCT_V1 specific fields
  """
  uuid: String!
  product: ProductV1Product!
  variations: [ProductV1Variation!]
  productV1Seller: ProductV1Seller!
  shipping: ProductV1ShippingOption
  exchangePolicy: ProductV1ExchangePolicy!
  productOverrides: ProductV1ProductOverrides
}

type ProductV1Product @entity {
  id: ID!
  uuid: String!
  version: Int!
  title: String!
  description: String!
  """
  Identification fields
  """
  identification_sKU: String
  identification_productId: String
  identification_productIdType: String
  """
  Product information fields
  """
  productionInformation_brandName: String!
  brand: ProductV1Brand! # ref by productionInformation_brandName
  productionInformation_manufacturer: String
  productionInformation_manufacturerPartNumber: String
  productionInformation_modelNumber: String
  productionInformation_materials: [String!]
  """
  Details fields
  """
  details_category: String
  category: ProductV1Category
  details_subCategory: String
  subCategory: ProductV1Category
  details_subCategory2: String
  subCategory2: ProductV1Category
  details_offerCategory: String!
  offerCategory: ProductV1OfferCategory!
  details_tags: [String!]
  tags: [ProductV1Tag!]
  details_sections: [String!]
  sections: [ProductV1Section!]
  details_personalisation: [String!]
  personalisation: [ProductV1Personalisation!]
  """
  Visuals
  """
  visuals_images: [ProductV1Media!]!
  visuals_videos: [ProductV1Media!]
  """
  Packaging
  """
  packaging_packageQuantity: String
  packaging_dimensions_length: String
  packaging_dimensions_width: String
  packaging_dimensions_height: String
  packaging_dimensions_unit: String
  packaging_weight_value: String
  packaging_weight_unit: String
}

type ProductV1Brand @entity {
  id: ID!
  name: String!
  products: [ProductV1Product!]! @derivedFrom(field: "brand")
}

type ProductV1Category @entity {
  id: ID!
  name: String!
}

type ProductV1Tag @entity {
  id: ID!
  name: String!
}

type ProductV1Section @entity {
  id: ID!
  name: String!
}

type ProductV1Media @entity {
  id: ID!
  url: String!
  tag: String
  type: ProductV1MediaType!
}

type ProductV1Personalisation @entity {
  id: ID!
  name: String!
}

type ProductV1Variation @entity {
  id: ID!
  type: String!
  option: String!
}

type ProductV1Seller @entity {
  id: ID!
  defaultVersion: Int!
  name: String
  description: String
  externalUrl: String
  tokenId: String
  images: [ProductV1Media!]
  contactLinks: [ProductV1SellerContactLink!]
  """
  Refs
  """
  seller: Seller!
}

type ProductV1SellerContactLink @entity {
  id: ID!
  url: String!
  tag: String!
}

type ProductV1ShippingOption @entity {
  id: ID!
  defaultVersion: Int
  countryOfOrigin: String
  supportedJurisdictions: [ProductV1ShippingJurisdiction!]
  redemptionPoint: String
}

type ProductV1ShippingJurisdiction @entity {
  id: ID!
  label: String!
  deliveryTime: String!
}

type ProductV1ExchangePolicy @entity {
  id: ID!
  uuid: String!
  version: Int!
  label: String
  template: String!
}

type ProductV1ProductOverrides @entity {
  id: ID!
  version: Int!
  title: String!
  description: String!
  identification_sKU: String
  identification_productId: String
  identification_productIdType: String
  productionInformation_brandName: String!
  brand: ProductV1Brand!
  productionInformation_manufacturer: String
  productionInformation_manufacturerPartNumber: String
  productionInformation_modelNumber: String
  productionInformation_materials: [String!]
  visuals_images: [ProductV1Media!]!
  visuals_videos: [ProductV1Media!]
  packaging_packageQuantity: String
  packaging_dimensions_length: String
  packaging_dimensions_width: String
  packaging_dimensions_height: String
  packaging_dimensions_unit: String
  packaging_weight_value: String
  packaging_weight_unit: String
}

enum ProductV1OfferCategory {
  PHYSICAL
  PHYGITAL
  DIGITAL
}

enum ProductV1MediaType {
  IMAGE
  VIDEO
}

"""
Offer
"""
type Offer @entity {
  id: ID!
  createdAt: BigInt!
  price: BigInt!
  sellerDeposit: BigInt!
  protocolFee: BigInt!
  agentFee: BigInt!
  agentId: BigInt!
  buyerCancelPenalty: BigInt!
  quantityInitial: BigInt!
  quantityAvailable: BigInt!

  "Offer dates"
  validFromDate: BigInt!
  validUntilDate: BigInt!
  voucherRedeemableFromDate: BigInt!
  voucherRedeemableUntilDate: BigInt!

  "Offer durations"
  fulfillmentPeriodDuration: BigInt!
  voucherValidDuration: BigInt!
  resolutionPeriodDuration: BigInt!

  metadataUri: String!
  metadataHash: String!
  voided: Boolean!
  disputeResolverId: BigInt!
  disputeResolver: DisputeResolver!
  disputeResolutionTerms: DisputeResolutionTermsEntity!
  sellerId: BigInt!
  seller: Seller!
  exchangeToken: ExchangeToken!
  metadata: MetadataInterface
  voidedAt: BigInt
  exchanges: [Exchange!]! @derivedFrom(field: "offer")
}

"""
Exchange and Voucher
"""
enum ExchangeState {
  COMMITTED
  REVOKED
  CANCELLED
  REDEEMED
  COMPLETED
  DISPUTED
}

type Exchange @entity {
  id: ID!
  offer: Offer!
  buyer: Buyer!
  seller: Seller!
  disputed: Boolean!
  state: ExchangeState!
  committedDate: BigInt!
  finalizedDate: BigInt
  validUntilDate: BigInt!
  redeemedDate: BigInt
  revokedDate: BigInt
  completedDate: BigInt
  cancelledDate: BigInt
  expired: Boolean!
}

"""
Accounts
"""
interface Account {
  id: ID!
  funds: [FundsEntity!]! @derivedFrom(field: "account")
}

type Seller implements Account @entity {
  id: ID! # Offer.sellerId
  sellerId: BigInt! # Allows sorting numerically by id
  offers: [Offer!]! @derivedFrom(field: "seller")
  exchanges: [Exchange!]! @derivedFrom(field: "seller")
  operator: Bytes!
  admin: Bytes!
  clerk: Bytes!
  treasury: Bytes!
  active: Boolean!
  funds: [FundsEntity!]! @derivedFrom(field: "account")
  voucherCloneAddress: Bytes!
  authTokenId: BigInt!
  authTokenType: Int!
}

type Buyer implements Account @entity {
  id: ID!
  exchanges: [Exchange!]! @derivedFrom(field: "buyer")
  wallet: Bytes!
  active: Boolean!
  funds: [FundsEntity!]! @derivedFrom(field: "account")
}

type DisputeResolver @entity {
  id: ID!
  escalationResponsePeriod: BigInt!
  admin: Bytes!
  clerk: Bytes!
  treasury: Bytes!
  operator: Bytes!
  metadataUri: String!
  fees: [DisputeResolverFee!]!
  sellerAllowList: [BigInt!]!
  active: Boolean!
  offers: [Offer!]! @derivedFrom(field: "disputeResolver")
}

type DisputeResolutionTermsEntity @entity {
  "<DISPUTE_RESOLVER_ID>-terms"
  id: ID!
  disputeResolverId: BigInt!
  escalationResponsePeriod: BigInt!
  feeAmount: BigInt!
  buyerEscalationDeposit: BigInt!
  disputeResolver: DisputeResolver!
  offer: Offer!
}

type DisputeResolverFee @entity {
  "<DISPUTE_RESOLVER_ID>-<TOKEN_ADDRESS>-fee"
  id: ID!
  tokenAddress: Bytes!
  tokenName: String!
  token: ExchangeToken!
  feeAmount: BigInt!
}

"""
Disputes
"""
enum DisputeState {
  RESOLVING
  RETRACTED
  RESOLVED
  ESCALATED
  DECIDED
  REFUSED
}

type Dispute @entity {
  id: ID!
  exchangeId: BigInt!
  exchange: Exchange!
  complaint: String!
  state: DisputeState!
  buyerPercent: BigInt!
  disputedDate: BigInt!
  escalatedDate: BigInt
  finalizedDate: BigInt
  timeout: BigInt!
  seller: Seller!
  buyer: Buyer!
}

"""
Funds
"""
type FundsEntity @entity {
  id: ID! # sellerId + "-" + tokenAddress
  availableAmount: BigInt!
  tokenAddress: Bytes!
  token: ExchangeToken!
  accountId: BigInt!
  account: Account!
}

"""
Tokens
"""
type ExchangeToken @entity {
  id: ID!
  address: Bytes!
  decimals: BigInt!
  symbol: String!
  name: String!
  offers: [Offer!]! @derivedFrom(field: "exchangeToken")
  funds: [FundsEntity!]! @derivedFrom(field: "token")
}
