enum MetadataType {
  BASE
  PRODUCT_V1
}

interface MetadataInterface {
  "<OFFER_ID>-metadata"
  id: ID!
  name: String
  description: String
  "Arbitrary URL which is linked to metadata"
  externalUrl: String
  "JSON schema URL"
  schemaUrl: String
  "Enum"
  type: MetadataType!
  "Reference to related Offer entity"
  offer: Offer!
  "Reference to related Seller entity"
  seller: Seller!
}

type BaseMetadataEntity implements MetadataInterface @entity {
  id: ID!
  name: String
  description: String
  externalUrl: String
  schemaUrl: String
  type: MetadataType! # MetadataType.BASE
  offer: Offer!
  seller: Seller!
}

type ProductV1MetadataEntity implements MetadataInterface @entity {
  id: ID!
  name: String
  description: String
  externalUrl: String
  schemaUrl: String
  type: MetadataType! # MetadataType.PRODUCT
  offer: Offer!
  seller: Seller!
  """
  ProductV1MetadataEntity specific fields
  """
  images: [String!]
  tags: [String!]
  brandName: String
}

"""
Offer
"""
type Offer @entity {
  id: ID!
  createdAt: BigInt!
  price: BigInt!
  deposit: BigInt!
  penalty: BigInt!
  quantity: BigInt!
  validFromDate: BigInt!
  validUntilDate: BigInt!
  redeemableDate: BigInt!
  fulfillmentPeriodDuration: BigInt!
  voucherValidDuration: BigInt!
  metadataUri: String!
  metadataHash: String!
  voided: Boolean!
  seller: Seller!
  exchangeToken: ExchangeToken!
  metadata: MetadataInterface
  voidedAt: BigInt
}

type Seller @entity {
  id: ID!
  address: Bytes!
  offers: [Offer!]! @derivedFrom(field: "seller")
  offerCount: BigInt!
  # TODO: add more fields
}

type ExchangeToken @entity {
  id: ID!
  address: Bytes!
  offers: [Offer!]! @derivedFrom(field: "exchangeToken")
  decimals: BigInt!
  symbol: String!
  name: String!
  # TODO: add more fields
}
